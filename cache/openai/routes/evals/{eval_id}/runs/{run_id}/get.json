{
  "description": "Get an evaluation run by ID.\n",
  "operationId": "getEvalRun",
  "parameters": [
    {
      "description": "The ID of the evaluation to retrieve runs for.",
      "in": "path",
      "name": "eval_id",
      "required": true,
      "schema": {
        "type": "string"
      }
    },
    {
      "description": "The ID of the run to retrieve.",
      "in": "path",
      "name": "run_id",
      "required": true,
      "schema": {
        "type": "string"
      }
    }
  ],
  "responses": {
    "200": {
      "content": {
        "application/json": {
          "schema": {
            "description": "A schema representing an evaluation run.\n",
            "properties": {
              "created_at": {
                "description": "Unix timestamp (in seconds) when the evaluation run was created.",
                "type": "integer"
              },
              "data_source": {
                "anyOf": [
                  {
                    "description": "A JsonlRunDataSource object with that specifies a JSONL file that matches the eval \n",
                    "properties": {
                      "source": {
                        "anyOf": [
                          {
                            "properties": {
                              "content": {
                                "description": "The content of the jsonl file.",
                                "items": {
                                  "properties": {
                                    "item": {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    "sample": {
                                      "additionalProperties": true,
                                      "type": "object"
                                    }
                                  },
                                  "required": [
                                    "item"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "type": {
                                "default": "file_content",
                                "description": "The type of jsonl source. Always `file_content`.",
                                "enum": [
                                  "file_content"
                                ],
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "content"
                            ],
                            "title": "EvalJsonlFileContentSource",
                            "type": "object"
                          },
                          {
                            "properties": {
                              "id": {
                                "description": "The identifier of the file.",
                                "type": "string"
                              },
                              "type": {
                                "default": "file_id",
                                "description": "The type of jsonl source. Always `file_id`.",
                                "enum": [
                                  "file_id"
                                ],
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "id"
                            ],
                            "title": "EvalJsonlFileIdSource",
                            "type": "object"
                          }
                        ],
                        "description": "Determines what populates the `item` namespace in the data source.",
                        "discriminator": {
                          "propertyName": "type"
                        }
                      },
                      "type": {
                        "default": "jsonl",
                        "description": "The type of data source. Always `jsonl`.",
                        "enum": [
                          "jsonl"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "source"
                    ],
                    "title": "JsonlRunDataSource",
                    "type": "object"
                  },
                  {
                    "description": "A CompletionsRunDataSource object describing a model sampling configuration.\n",
                    "properties": {
                      "input_messages": {
                        "anyOf": [
                          {
                            "properties": {
                              "template": {
                                "description": "A list of chat messages forming the prompt or context. May include variable references to the `item` namespace, ie {{item.name}}.",
                                "items": {
                                  "anyOf": [
                                    {
                                      "description": "A message input to the model with a role indicating instruction following\nhierarchy. Instructions given with the `developer` or `system` role take\nprecedence over instructions given with the `user` role. Messages with the\n`assistant` role are presumed to have been generated by the model in previous\ninteractions.\n",
                                      "properties": {
                                        "content": {
                                          "anyOf": [
                                            {
                                              "description": "A text input to the model.\n",
                                              "title": "Text input",
                                              "type": "string"
                                            },
                                            {
                                              "description": "A list of one or many input items to the model, containing different content \ntypes.\n",
                                              "items": {
                                                "anyOf": [
                                                  {
                                                    "description": "A text input to the model.",
                                                    "properties": {
                                                      "text": {
                                                        "description": "The text input to the model.",
                                                        "type": "string"
                                                      },
                                                      "type": {
                                                        "default": "input_text",
                                                        "description": "The type of the input item. Always `input_text`.",
                                                        "enum": [
                                                          "input_text"
                                                        ],
                                                        "type": "string"
                                                      }
                                                    },
                                                    "required": [
                                                      "type",
                                                      "text"
                                                    ],
                                                    "title": "Input text",
                                                    "type": "object"
                                                  },
                                                  {
                                                    "description": "An image input to the model. Learn about [image inputs](https://platform.openai.com/docs/guides/vision).",
                                                    "properties": {
                                                      "detail": {
                                                        "description": "The detail level of the image to be sent to the model. One of `high`, `low`, or `auto`. Defaults to `auto`.",
                                                        "enum": [
                                                          "low",
                                                          "high",
                                                          "auto"
                                                        ],
                                                        "type": "string"
                                                      },
                                                      "file_id": {
                                                        "anyOf": [
                                                          {
                                                            "description": "The ID of the file to be sent to the model.",
                                                            "type": "string"
                                                          },
                                                          {
                                                            "type": "null"
                                                          }
                                                        ]
                                                      },
                                                      "image_url": {
                                                        "anyOf": [
                                                          {
                                                            "description": "The URL of the image to be sent to the model. A fully qualified URL or base64 encoded image in a data URL.",
                                                            "type": "string"
                                                          },
                                                          {
                                                            "type": "null"
                                                          }
                                                        ]
                                                      },
                                                      "type": {
                                                        "default": "input_image",
                                                        "description": "The type of the input item. Always `input_image`.",
                                                        "enum": [
                                                          "input_image"
                                                        ],
                                                        "type": "string"
                                                      }
                                                    },
                                                    "required": [
                                                      "type",
                                                      "detail"
                                                    ],
                                                    "title": "Input image",
                                                    "type": "object"
                                                  },
                                                  {
                                                    "description": "A file input to the model.",
                                                    "properties": {
                                                      "file_data": {
                                                        "description": "The content of the file to be sent to the model.\n",
                                                        "type": "string"
                                                      },
                                                      "file_id": {
                                                        "anyOf": [
                                                          {
                                                            "description": "The ID of the file to be sent to the model.",
                                                            "type": "string"
                                                          },
                                                          {
                                                            "type": "null"
                                                          }
                                                        ]
                                                      },
                                                      "file_url": {
                                                        "description": "The URL of the file to be sent to the model.",
                                                        "type": "string"
                                                      },
                                                      "filename": {
                                                        "description": "The name of the file to be sent to the model.",
                                                        "type": "string"
                                                      },
                                                      "type": {
                                                        "default": "input_file",
                                                        "description": "The type of the input item. Always `input_file`.",
                                                        "enum": [
                                                          "input_file"
                                                        ],
                                                        "type": "string"
                                                      }
                                                    },
                                                    "required": [
                                                      "type"
                                                    ],
                                                    "title": "Input file",
                                                    "type": "object"
                                                  },
                                                  {
                                                    "description": "An audio input to the model.\n",
                                                    "properties": {
                                                      "input_audio": {
                                                        "properties": {
                                                          "data": {
                                                            "description": "Base64-encoded audio data.\n",
                                                            "type": "string"
                                                          },
                                                          "format": {
                                                            "description": "The format of the audio data. Currently supported formats are `mp3` and\n`wav`.\n",
                                                            "enum": [
                                                              "mp3",
                                                              "wav"
                                                            ],
                                                            "type": "string"
                                                          }
                                                        },
                                                        "required": [
                                                          "data",
                                                          "format"
                                                        ],
                                                        "type": "object"
                                                      },
                                                      "type": {
                                                        "description": "The type of the input item. Always `input_audio`.\n",
                                                        "enum": [
                                                          "input_audio"
                                                        ],
                                                        "type": "string"
                                                      }
                                                    },
                                                    "required": [
                                                      "type",
                                                      "input_audio"
                                                    ],
                                                    "title": "Input audio",
                                                    "type": "object"
                                                  }
                                                ],
                                                "discriminator": {
                                                  "propertyName": "type"
                                                }
                                              },
                                              "title": "Input item content list",
                                              "type": "array"
                                            }
                                          ],
                                          "description": "Text, image, or audio input to the model, used to generate a response.\nCan also contain previous assistant responses.\n"
                                        },
                                        "role": {
                                          "description": "The role of the message input. One of `user`, `assistant`, `system`, or\n`developer`.\n",
                                          "enum": [
                                            "user",
                                            "assistant",
                                            "system",
                                            "developer"
                                          ],
                                          "type": "string"
                                        },
                                        "type": {
                                          "description": "The type of the message input. Always `message`.\n",
                                          "enum": [
                                            "message"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "role",
                                        "content"
                                      ],
                                      "title": "Input message",
                                      "type": "object"
                                    },
                                    {
                                      "description": "A message input to the model with a role indicating instruction following\nhierarchy. Instructions given with the `developer` or `system` role take\nprecedence over instructions given with the `user` role. Messages with the\n`assistant` role are presumed to have been generated by the model in previous\ninteractions.\n",
                                      "properties": {
                                        "content": {
                                          "anyOf": [
                                            {
                                              "description": "A text input to the model.\n",
                                              "title": "Text input",
                                              "type": "string"
                                            },
                                            {
                                              "description": "A text input to the model.",
                                              "properties": {
                                                "text": {
                                                  "description": "The text input to the model.",
                                                  "type": "string"
                                                },
                                                "type": {
                                                  "default": "input_text",
                                                  "description": "The type of the input item. Always `input_text`.",
                                                  "enum": [
                                                    "input_text"
                                                  ],
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "type",
                                                "text"
                                              ],
                                              "title": "Input text",
                                              "type": "object"
                                            },
                                            {
                                              "description": "A text output from the model.\n",
                                              "properties": {
                                                "text": {
                                                  "description": "The text output from the model.\n",
                                                  "type": "string"
                                                },
                                                "type": {
                                                  "description": "The type of the output text. Always `output_text`.\n",
                                                  "enum": [
                                                    "output_text"
                                                  ],
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "type",
                                                "text"
                                              ],
                                              "title": "Output text",
                                              "type": "object"
                                            },
                                            {
                                              "description": "An image input to the model.\n",
                                              "properties": {
                                                "detail": {
                                                  "description": "The detail level of the image to be sent to the model. One of `high`, `low`, or `auto`. Defaults to `auto`.\n",
                                                  "type": "string"
                                                },
                                                "image_url": {
                                                  "description": "The URL of the image input.\n",
                                                  "type": "string"
                                                },
                                                "type": {
                                                  "description": "The type of the image input. Always `input_image`.\n",
                                                  "enum": [
                                                    "input_image"
                                                  ],
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "type",
                                                "image_url"
                                              ],
                                              "title": "Input image",
                                              "type": "object"
                                            },
                                            {
                                              "description": "An audio input to the model.\n",
                                              "properties": {
                                                "input_audio": {
                                                  "properties": {
                                                    "data": {
                                                      "description": "Base64-encoded audio data.\n",
                                                      "type": "string"
                                                    },
                                                    "format": {
                                                      "description": "The format of the audio data. Currently supported formats are `mp3` and\n`wav`.\n",
                                                      "enum": [
                                                        "mp3",
                                                        "wav"
                                                      ],
                                                      "type": "string"
                                                    }
                                                  },
                                                  "required": [
                                                    "data",
                                                    "format"
                                                  ],
                                                  "type": "object"
                                                },
                                                "type": {
                                                  "description": "The type of the input item. Always `input_audio`.\n",
                                                  "enum": [
                                                    "input_audio"
                                                  ],
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "type",
                                                "input_audio"
                                              ],
                                              "title": "Input audio",
                                              "type": "object"
                                            },
                                            {
                                              "description": "A list of inputs, each of which may be either an input text, input image, or input audio object.\n",
                                              "title": "An array of Input text, Input image, and Input audio",
                                              "type": "array"
                                            }
                                          ],
                                          "description": "Inputs to the model - can contain template strings.\n"
                                        },
                                        "role": {
                                          "description": "The role of the message input. One of `user`, `assistant`, `system`, or\n`developer`.\n",
                                          "enum": [
                                            "user",
                                            "assistant",
                                            "system",
                                            "developer"
                                          ],
                                          "type": "string"
                                        },
                                        "type": {
                                          "description": "The type of the message input. Always `message`.\n",
                                          "enum": [
                                            "message"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "role",
                                        "content"
                                      ],
                                      "title": "EvalItem",
                                      "type": "object"
                                    }
                                  ]
                                },
                                "type": "array"
                              },
                              "type": {
                                "description": "The type of input messages. Always `template`.",
                                "enum": [
                                  "template"
                                ],
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "template"
                            ],
                            "title": "TemplateInputMessages",
                            "type": "object"
                          },
                          {
                            "properties": {
                              "item_reference": {
                                "description": "A reference to a variable in the `item` namespace. Ie, \"item.input_trajectory\"",
                                "type": "string"
                              },
                              "type": {
                                "description": "The type of input messages. Always `item_reference`.",
                                "enum": [
                                  "item_reference"
                                ],
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "item_reference"
                            ],
                            "title": "ItemReferenceInputMessages",
                            "type": "object"
                          }
                        ],
                        "description": "Used when sampling from a model. Dictates the structure of the messages passed into the model. Can either be a reference to a prebuilt trajectory (ie, `item.input_trajectory`), or a template with variable references to the `item` namespace.",
                        "discriminator": {
                          "propertyName": "type"
                        }
                      },
                      "model": {
                        "description": "The name of the model to use for generating completions (e.g. \"o3-mini\").",
                        "type": "string"
                      },
                      "sampling_params": {
                        "properties": {
                          "max_completion_tokens": {
                            "description": "The maximum number of tokens in the generated output.",
                            "type": "integer"
                          },
                          "reasoning_effort": {
                            "anyOf": [
                              {
                                "default": "medium",
                                "description": "Constrains effort on reasoning for\n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\nCurrently supported values are `minimal`, `low`, `medium`, and `high`. Reducing\nreasoning effort can result in faster responses and fewer tokens used\non reasoning in a response.\n\nNote: The `gpt-5-pro` model defaults to (and only supports) `high` reasoning effort.\n",
                                "enum": [
                                  "minimal",
                                  "low",
                                  "medium",
                                  "high"
                                ],
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "response_format": {
                            "anyOf": [
                              {
                                "description": "Default response format. Used to generate text responses.\n",
                                "properties": {
                                  "type": {
                                    "description": "The type of response format being defined. Always `text`.",
                                    "enum": [
                                      "text"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type"
                                ],
                                "title": "Text",
                                "type": "object"
                              },
                              {
                                "description": "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs).\n",
                                "properties": {
                                  "json_schema": {
                                    "description": "Structured Outputs configuration options, including a JSON Schema.\n",
                                    "properties": {
                                      "description": {
                                        "description": "A description of what the response format is for, used by the model to\ndetermine how to respond in the format.\n",
                                        "type": "string"
                                      },
                                      "name": {
                                        "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64.\n",
                                        "type": "string"
                                      },
                                      "schema": {
                                        "additionalProperties": true,
                                        "description": "The schema for the response format, described as a JSON Schema object.\nLearn how to build JSON schemas [here](https://json-schema.org/).\n",
                                        "title": "JSON schema",
                                        "type": "object"
                                      },
                                      "strict": {
                                        "anyOf": [
                                          {
                                            "default": false,
                                            "description": "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](https://platform.openai.com/docs/guides/structured-outputs).\n",
                                            "type": "boolean"
                                          },
                                          {
                                            "type": "null"
                                          }
                                        ]
                                      }
                                    },
                                    "required": [
                                      "name"
                                    ],
                                    "title": "JSON schema",
                                    "type": "object"
                                  },
                                  "type": {
                                    "description": "The type of response format being defined. Always `json_schema`.",
                                    "enum": [
                                      "json_schema"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "json_schema"
                                ],
                                "title": "JSON schema",
                                "type": "object"
                              },
                              {
                                "description": "JSON object response format. An older method of generating JSON responses.\nUsing `json_schema` is recommended for models that support it. Note that the\nmodel will not generate JSON without a system or user message instructing it\nto do so.\n",
                                "properties": {
                                  "type": {
                                    "description": "The type of response format being defined. Always `json_object`.",
                                    "enum": [
                                      "json_object"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type"
                                ],
                                "title": "JSON object",
                                "type": "object"
                              }
                            ],
                            "description": "An object specifying the format that the model must output.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables\nStructured Outputs which ensures the model will match your supplied JSON\nschema. Learn more in the [Structured Outputs\nguide](https://platform.openai.com/docs/guides/structured-outputs).\n\nSetting to `{ \"type\": \"json_object\" }` enables the older JSON mode, which\nensures the message the model generates is valid JSON. Using `json_schema`\nis preferred for models that support it.\n"
                          },
                          "seed": {
                            "default": 42,
                            "description": "A seed value to initialize the randomness, during sampling.",
                            "type": "integer"
                          },
                          "temperature": {
                            "default": 1,
                            "description": "A higher temperature increases randomness in the outputs.",
                            "type": "number"
                          },
                          "tools": {
                            "description": "A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.\n",
                            "items": {
                              "description": "A function tool that can be used to generate a response.\n",
                              "properties": {
                                "function": {
                                  "properties": {
                                    "description": {
                                      "description": "A description of what the function does, used by the model to choose when and how to call the function.",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.",
                                      "type": "string"
                                    },
                                    "parameters": {
                                      "additionalProperties": true,
                                      "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list.",
                                      "type": "object"
                                    },
                                    "strict": {
                                      "anyOf": [
                                        {
                                          "default": false,
                                          "description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](https://platform.openai.com/docs/guides/function-calling).",
                                          "type": "boolean"
                                        },
                                        {
                                          "type": "null"
                                        }
                                      ]
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ],
                                  "type": "object"
                                },
                                "type": {
                                  "description": "The type of the tool. Currently, only `function` is supported.",
                                  "enum": [
                                    "function"
                                  ],
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "function"
                              ],
                              "title": "Function tool",
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "top_p": {
                            "default": 1,
                            "description": "An alternative to temperature for nucleus sampling; 1.0 includes all tokens.",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "source": {
                        "anyOf": [
                          {
                            "properties": {
                              "content": {
                                "description": "The content of the jsonl file.",
                                "items": {
                                  "properties": {
                                    "item": {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    "sample": {
                                      "additionalProperties": true,
                                      "type": "object"
                                    }
                                  },
                                  "required": [
                                    "item"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "type": {
                                "default": "file_content",
                                "description": "The type of jsonl source. Always `file_content`.",
                                "enum": [
                                  "file_content"
                                ],
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "content"
                            ],
                            "title": "EvalJsonlFileContentSource",
                            "type": "object"
                          },
                          {
                            "properties": {
                              "id": {
                                "description": "The identifier of the file.",
                                "type": "string"
                              },
                              "type": {
                                "default": "file_id",
                                "description": "The type of jsonl source. Always `file_id`.",
                                "enum": [
                                  "file_id"
                                ],
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "id"
                            ],
                            "title": "EvalJsonlFileIdSource",
                            "type": "object"
                          },
                          {
                            "description": "A StoredCompletionsRunDataSource configuration describing a set of filters\n",
                            "properties": {
                              "created_after": {
                                "anyOf": [
                                  {
                                    "description": "An optional Unix timestamp to filter items created after this time.",
                                    "type": "integer"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "created_before": {
                                "anyOf": [
                                  {
                                    "description": "An optional Unix timestamp to filter items created before this time.",
                                    "type": "integer"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "limit": {
                                "anyOf": [
                                  {
                                    "description": "An optional maximum number of items to return.",
                                    "type": "integer"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "metadata": {
                                "anyOf": [
                                  {
                                    "additionalProperties": {
                                      "type": "string"
                                    },
                                    "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                                    "type": "object"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "model": {
                                "anyOf": [
                                  {
                                    "description": "An optional model to filter by (e.g., 'gpt-4o').",
                                    "type": "string"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "type": {
                                "default": "stored_completions",
                                "description": "The type of source. Always `stored_completions`.",
                                "enum": [
                                  "stored_completions"
                                ],
                                "type": "string"
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "title": "StoredCompletionsRunDataSource",
                            "type": "object"
                          }
                        ],
                        "description": "Determines what populates the `item` namespace in this run's data source.",
                        "discriminator": {
                          "propertyName": "type"
                        }
                      },
                      "type": {
                        "default": "completions",
                        "description": "The type of run data source. Always `completions`.",
                        "enum": [
                          "completions"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "source"
                    ],
                    "title": "CompletionsRunDataSource",
                    "type": "object"
                  },
                  {
                    "description": "A ResponsesRunDataSource object describing a model sampling configuration.\n",
                    "properties": {
                      "input_messages": {
                        "anyOf": [
                          {
                            "properties": {
                              "template": {
                                "description": "A list of chat messages forming the prompt or context. May include variable references to the `item` namespace, ie {{item.name}}.",
                                "items": {
                                  "anyOf": [
                                    {
                                      "properties": {
                                        "content": {
                                          "description": "The content of the message.",
                                          "type": "string"
                                        },
                                        "role": {
                                          "description": "The role of the message (e.g. \"system\", \"assistant\", \"user\").",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "role",
                                        "content"
                                      ],
                                      "title": "ChatMessage",
                                      "type": "object"
                                    },
                                    {
                                      "description": "A message input to the model with a role indicating instruction following\nhierarchy. Instructions given with the `developer` or `system` role take\nprecedence over instructions given with the `user` role. Messages with the\n`assistant` role are presumed to have been generated by the model in previous\ninteractions.\n",
                                      "properties": {
                                        "content": {
                                          "anyOf": [
                                            {
                                              "description": "A text input to the model.\n",
                                              "title": "Text input",
                                              "type": "string"
                                            },
                                            {
                                              "description": "A text input to the model.",
                                              "properties": {
                                                "text": {
                                                  "description": "The text input to the model.",
                                                  "type": "string"
                                                },
                                                "type": {
                                                  "default": "input_text",
                                                  "description": "The type of the input item. Always `input_text`.",
                                                  "enum": [
                                                    "input_text"
                                                  ],
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "type",
                                                "text"
                                              ],
                                              "title": "Input text",
                                              "type": "object"
                                            },
                                            {
                                              "description": "A text output from the model.\n",
                                              "properties": {
                                                "text": {
                                                  "description": "The text output from the model.\n",
                                                  "type": "string"
                                                },
                                                "type": {
                                                  "description": "The type of the output text. Always `output_text`.\n",
                                                  "enum": [
                                                    "output_text"
                                                  ],
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "type",
                                                "text"
                                              ],
                                              "title": "Output text",
                                              "type": "object"
                                            },
                                            {
                                              "description": "An image input to the model.\n",
                                              "properties": {
                                                "detail": {
                                                  "description": "The detail level of the image to be sent to the model. One of `high`, `low`, or `auto`. Defaults to `auto`.\n",
                                                  "type": "string"
                                                },
                                                "image_url": {
                                                  "description": "The URL of the image input.\n",
                                                  "type": "string"
                                                },
                                                "type": {
                                                  "description": "The type of the image input. Always `input_image`.\n",
                                                  "enum": [
                                                    "input_image"
                                                  ],
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "type",
                                                "image_url"
                                              ],
                                              "title": "Input image",
                                              "type": "object"
                                            },
                                            {
                                              "description": "An audio input to the model.\n",
                                              "properties": {
                                                "input_audio": {
                                                  "properties": {
                                                    "data": {
                                                      "description": "Base64-encoded audio data.\n",
                                                      "type": "string"
                                                    },
                                                    "format": {
                                                      "description": "The format of the audio data. Currently supported formats are `mp3` and\n`wav`.\n",
                                                      "enum": [
                                                        "mp3",
                                                        "wav"
                                                      ],
                                                      "type": "string"
                                                    }
                                                  },
                                                  "required": [
                                                    "data",
                                                    "format"
                                                  ],
                                                  "type": "object"
                                                },
                                                "type": {
                                                  "description": "The type of the input item. Always `input_audio`.\n",
                                                  "enum": [
                                                    "input_audio"
                                                  ],
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "type",
                                                "input_audio"
                                              ],
                                              "title": "Input audio",
                                              "type": "object"
                                            },
                                            {
                                              "description": "A list of inputs, each of which may be either an input text, input image, or input audio object.\n",
                                              "title": "An array of Input text, Input image, and Input audio",
                                              "type": "array"
                                            }
                                          ],
                                          "description": "Inputs to the model - can contain template strings.\n"
                                        },
                                        "role": {
                                          "description": "The role of the message input. One of `user`, `assistant`, `system`, or\n`developer`.\n",
                                          "enum": [
                                            "user",
                                            "assistant",
                                            "system",
                                            "developer"
                                          ],
                                          "type": "string"
                                        },
                                        "type": {
                                          "description": "The type of the message input. Always `message`.\n",
                                          "enum": [
                                            "message"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "role",
                                        "content"
                                      ],
                                      "title": "EvalItem",
                                      "type": "object"
                                    }
                                  ]
                                },
                                "type": "array"
                              },
                              "type": {
                                "description": "The type of input messages. Always `template`.",
                                "enum": [
                                  "template"
                                ],
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "template"
                            ],
                            "title": "InputMessagesTemplate",
                            "type": "object"
                          },
                          {
                            "properties": {
                              "item_reference": {
                                "description": "A reference to a variable in the `item` namespace. Ie, \"item.name\"",
                                "type": "string"
                              },
                              "type": {
                                "description": "The type of input messages. Always `item_reference`.",
                                "enum": [
                                  "item_reference"
                                ],
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "item_reference"
                            ],
                            "title": "InputMessagesItemReference",
                            "type": "object"
                          }
                        ],
                        "description": "Used when sampling from a model. Dictates the structure of the messages passed into the model. Can either be a reference to a prebuilt trajectory (ie, `item.input_trajectory`), or a template with variable references to the `item` namespace.",
                        "discriminator": {
                          "propertyName": "type"
                        }
                      },
                      "model": {
                        "description": "The name of the model to use for generating completions (e.g. \"o3-mini\").",
                        "type": "string"
                      },
                      "sampling_params": {
                        "properties": {
                          "max_completion_tokens": {
                            "description": "The maximum number of tokens in the generated output.",
                            "type": "integer"
                          },
                          "reasoning_effort": {
                            "anyOf": [
                              {
                                "default": "medium",
                                "description": "Constrains effort on reasoning for\n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\nCurrently supported values are `minimal`, `low`, `medium`, and `high`. Reducing\nreasoning effort can result in faster responses and fewer tokens used\non reasoning in a response.\n\nNote: The `gpt-5-pro` model defaults to (and only supports) `high` reasoning effort.\n",
                                "enum": [
                                  "minimal",
                                  "low",
                                  "medium",
                                  "high"
                                ],
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "seed": {
                            "default": 42,
                            "description": "A seed value to initialize the randomness, during sampling.",
                            "type": "integer"
                          },
                          "temperature": {
                            "default": 1,
                            "description": "A higher temperature increases randomness in the outputs.",
                            "type": "number"
                          },
                          "text": {
                            "description": "Configuration options for a text response from the model. Can be plain\ntext or structured JSON data. Learn more:\n- [Text inputs and outputs](https://platform.openai.com/docs/guides/text)\n- [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs)\n",
                            "properties": {
                              "format": {
                                "anyOf": [
                                  {
                                    "description": "Default response format. Used to generate text responses.\n",
                                    "properties": {
                                      "type": {
                                        "description": "The type of response format being defined. Always `text`.",
                                        "enum": [
                                          "text"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type"
                                    ],
                                    "title": "Text",
                                    "type": "object"
                                  },
                                  {
                                    "description": "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs).\n",
                                    "properties": {
                                      "description": {
                                        "description": "A description of what the response format is for, used by the model to\ndetermine how to respond in the format.\n",
                                        "type": "string"
                                      },
                                      "name": {
                                        "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64.\n",
                                        "type": "string"
                                      },
                                      "schema": {
                                        "additionalProperties": true,
                                        "description": "The schema for the response format, described as a JSON Schema object.\nLearn how to build JSON schemas [here](https://json-schema.org/).\n",
                                        "title": "JSON schema",
                                        "type": "object"
                                      },
                                      "strict": {
                                        "anyOf": [
                                          {
                                            "default": false,
                                            "description": "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](https://platform.openai.com/docs/guides/structured-outputs).\n",
                                            "type": "boolean"
                                          },
                                          {
                                            "type": "null"
                                          }
                                        ]
                                      },
                                      "type": {
                                        "description": "The type of response format being defined. Always `json_schema`.",
                                        "enum": [
                                          "json_schema"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "schema",
                                      "name"
                                    ],
                                    "title": "JSON schema",
                                    "type": "object"
                                  },
                                  {
                                    "description": "JSON object response format. An older method of generating JSON responses.\nUsing `json_schema` is recommended for models that support it. Note that the\nmodel will not generate JSON without a system or user message instructing it\nto do so.\n",
                                    "properties": {
                                      "type": {
                                        "description": "The type of response format being defined. Always `json_object`.",
                                        "enum": [
                                          "json_object"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type"
                                    ],
                                    "title": "JSON object",
                                    "type": "object"
                                  }
                                ],
                                "description": "An object specifying the format that the model must output.\n\nConfiguring `{ \"type\": \"json_schema\" }` enables Structured Outputs, \nwhich ensures the model will match your supplied JSON schema. Learn more in the \n[Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).\n\nThe default format is `{ \"type\": \"text\" }` with no additional options.\n\n**Not recommended for gpt-4o and newer models:**\n\nSetting to `{ \"type\": \"json_object\" }` enables the older JSON mode, which\nensures the message the model generates is valid JSON. Using `json_schema`\nis preferred for models that support it.\n",
                                "discriminator": {
                                  "propertyName": "type"
                                }
                              }
                            },
                            "type": "object"
                          },
                          "tools": {
                            "description": "An array of tools the model may call while generating a response. You\ncan specify which tool to use by setting the `tool_choice` parameter.\n\nThe two categories of tools you can provide the model are:\n\n- **Built-in tools**: Tools that are provided by OpenAI that extend the\n  model's capabilities, like [web search](https://platform.openai.com/docs/guides/tools-web-search)\n  or [file search](https://platform.openai.com/docs/guides/tools-file-search). Learn more about\n  [built-in tools](https://platform.openai.com/docs/guides/tools).\n- **Function calls (custom tools)**: Functions that are defined by you,\n  enabling the model to call your own code. Learn more about\n  [function calling](https://platform.openai.com/docs/guides/function-calling).\n",
                            "items": {
                              "anyOf": [
                                {
                                  "description": "Defines a function in your own code the model can choose to call. Learn more about [function calling](https://platform.openai.com/docs/guides/function-calling).",
                                  "properties": {
                                    "description": {
                                      "anyOf": [
                                        {
                                          "description": "A description of the function. Used by the model to determine whether or not to call the function.",
                                          "type": "string"
                                        },
                                        {
                                          "type": "null"
                                        }
                                      ]
                                    },
                                    "name": {
                                      "description": "The name of the function to call.",
                                      "type": "string"
                                    },
                                    "parameters": {
                                      "anyOf": [
                                        {
                                          "additionalProperties": {},
                                          "description": "A JSON schema object describing the parameters of the function.",
                                          "type": "object"
                                        },
                                        {
                                          "type": "null"
                                        }
                                      ]
                                    },
                                    "strict": {
                                      "anyOf": [
                                        {
                                          "description": "Whether to enforce strict parameter validation. Default `true`.",
                                          "type": "boolean"
                                        },
                                        {
                                          "type": "null"
                                        }
                                      ]
                                    },
                                    "type": {
                                      "default": "function",
                                      "description": "The type of the function tool. Always `function`.",
                                      "enum": [
                                        "function"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "name",
                                    "strict",
                                    "parameters"
                                  ],
                                  "title": "Function",
                                  "type": "object"
                                },
                                {
                                  "description": "A tool that searches for relevant content from uploaded files. Learn more about the [file search tool](https://platform.openai.com/docs/guides/tools-file-search).",
                                  "properties": {
                                    "filters": {
                                      "anyOf": [
                                        {
                                          "description": "A filter to apply.",
                                          "anyOf": [
                                            {
                                              "additionalProperties": false,
                                              "description": "A filter used to compare a specified attribute key to a given value using a defined comparison operation.\n",
                                              "properties": {
                                                "key": {
                                                  "description": "The key to compare against the value.",
                                                  "type": "string"
                                                },
                                                "type": {
                                                  "default": "eq",
                                                  "description": "Specifies the comparison operator: `eq`, `ne`, `gt`, `gte`, `lt`, `lte`, `in`, `nin`.\n- `eq`: equals\n- `ne`: not equal\n- `gt`: greater than\n- `gte`: greater than or equal\n- `lt`: less than\n- `lte`: less than or equal\n- `in`: in\n- `nin`: not in\n",
                                                  "enum": [
                                                    "eq",
                                                    "ne",
                                                    "gt",
                                                    "gte",
                                                    "lt",
                                                    "lte"
                                                  ],
                                                  "type": "string"
                                                },
                                                "value": {
                                                  "anyOf": [
                                                    {
                                                      "type": "string"
                                                    },
                                                    {
                                                      "type": "number"
                                                    },
                                                    {
                                                      "type": "boolean"
                                                    },
                                                    {
                                                      "items": {
                                                        "anyOf": [
                                                          {
                                                            "type": "string"
                                                          },
                                                          {
                                                            "type": "number"
                                                          }
                                                        ]
                                                      },
                                                      "type": "array"
                                                    }
                                                  ],
                                                  "description": "The value to compare against the attribute key; supports string, number, or boolean types."
                                                }
                                              },
                                              "required": [
                                                "type",
                                                "key",
                                                "value"
                                              ],
                                              "title": "Comparison Filter",
                                              "type": "object"
                                            },
                                            {
                                              "$recursiveAnchor": true,
                                              "additionalProperties": false,
                                              "description": "Combine multiple filters using `and` or `or`.",
                                              "properties": {
                                                "filters": {
                                                  "description": "Array of filters to combine. Items can be `ComparisonFilter` or `CompoundFilter`.",
                                                  "items": {
                                                    "anyOf": [
                                                      {
                                                        "additionalProperties": false,
                                                        "description": "A filter used to compare a specified attribute key to a given value using a defined comparison operation.\n",
                                                        "properties": {
                                                          "key": {
                                                            "description": "The key to compare against the value.",
                                                            "type": "string"
                                                          },
                                                          "type": {
                                                            "default": "eq",
                                                            "description": "Specifies the comparison operator: `eq`, `ne`, `gt`, `gte`, `lt`, `lte`, `in`, `nin`.\n- `eq`: equals\n- `ne`: not equal\n- `gt`: greater than\n- `gte`: greater than or equal\n- `lt`: less than\n- `lte`: less than or equal\n- `in`: in\n- `nin`: not in\n",
                                                            "enum": [
                                                              "eq",
                                                              "ne",
                                                              "gt",
                                                              "gte",
                                                              "lt",
                                                              "lte"
                                                            ],
                                                            "type": "string"
                                                          },
                                                          "value": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string"
                                                              },
                                                              {
                                                                "type": "number"
                                                              },
                                                              {
                                                                "type": "boolean"
                                                              },
                                                              {
                                                                "items": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "string"
                                                                    },
                                                                    {
                                                                      "type": "number"
                                                                    }
                                                                  ]
                                                                },
                                                                "type": "array"
                                                              }
                                                            ],
                                                            "description": "The value to compare against the attribute key; supports string, number, or boolean types."
                                                          }
                                                        },
                                                        "required": [
                                                          "type",
                                                          "key",
                                                          "value"
                                                        ],
                                                        "title": "Comparison Filter",
                                                        "type": "object"
                                                      },
                                                      {
                                                        "$recursiveRef": "#"
                                                      }
                                                    ]
                                                  },
                                                  "type": "array"
                                                },
                                                "type": {
                                                  "description": "Type of operation: `and` or `or`.",
                                                  "enum": [
                                                    "and",
                                                    "or"
                                                  ],
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "type",
                                                "filters"
                                              ],
                                              "title": "Compound Filter",
                                              "type": "object"
                                            }
                                          ]
                                        },
                                        {
                                          "type": "null"
                                        }
                                      ]
                                    },
                                    "max_num_results": {
                                      "description": "The maximum number of results to return. This number should be between 1 and 50 inclusive.",
                                      "type": "integer"
                                    },
                                    "ranking_options": {
                                      "description": "Ranking options for search.",
                                      "properties": {
                                        "ranker": {
                                          "description": "The ranker to use for the file search.",
                                          "enum": [
                                            "auto",
                                            "default-2024-11-15"
                                          ],
                                          "type": "string"
                                        },
                                        "score_threshold": {
                                          "description": "The score threshold for the file search, a number between 0 and 1. Numbers closer to 1 will attempt to return only the most relevant results, but may return fewer results.",
                                          "type": "number"
                                        }
                                      },
                                      "required": [],
                                      "type": "object"
                                    },
                                    "type": {
                                      "default": "file_search",
                                      "description": "The type of the file search tool. Always `file_search`.",
                                      "enum": [
                                        "file_search"
                                      ],
                                      "type": "string"
                                    },
                                    "vector_store_ids": {
                                      "description": "The IDs of the vector stores to search.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "vector_store_ids"
                                  ],
                                  "title": "File search",
                                  "type": "object"
                                },
                                {
                                  "description": "A tool that controls a virtual computer. Learn more about the [computer tool](https://platform.openai.com/docs/guides/tools-computer-use).",
                                  "properties": {
                                    "display_height": {
                                      "description": "The height of the computer display.",
                                      "type": "integer"
                                    },
                                    "display_width": {
                                      "description": "The width of the computer display.",
                                      "type": "integer"
                                    },
                                    "environment": {
                                      "description": "The type of computer environment to control.",
                                      "enum": [
                                        "windows",
                                        "mac",
                                        "linux",
                                        "ubuntu",
                                        "browser"
                                      ],
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "computer_use_preview",
                                      "description": "The type of the computer use tool. Always `computer_use_preview`.",
                                      "enum": [
                                        "computer_use_preview"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "environment",
                                    "display_width",
                                    "display_height"
                                  ],
                                  "title": "Computer use preview",
                                  "type": "object"
                                },
                                {
                                  "description": "Search the Internet for sources related to the prompt. Learn more about the\n[web search tool](https://platform.openai.com/docs/guides/tools-web-search).\n",
                                  "properties": {
                                    "filters": {
                                      "anyOf": [
                                        {
                                          "description": "Filters for the search.\n",
                                          "properties": {
                                            "allowed_domains": {
                                              "anyOf": [
                                                {
                                                  "default": [],
                                                  "description": "Allowed domains for the search. If not provided, all domains are allowed.\nSubdomains of the provided domains are allowed as well.\n\nExample: `[\"pubmed.ncbi.nlm.nih.gov\"]`\n",
                                                  "items": {
                                                    "description": "Allowed domain for the search.",
                                                    "type": "string"
                                                  },
                                                  "title": "Allowed domains for the search.",
                                                  "type": "array"
                                                },
                                                {
                                                  "type": "null"
                                                }
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        {
                                          "type": "null"
                                        }
                                      ]
                                    },
                                    "search_context_size": {
                                      "default": "medium",
                                      "description": "High level guidance for the amount of context window space to use for the search. One of `low`, `medium`, or `high`. `medium` is the default.",
                                      "enum": [
                                        "low",
                                        "medium",
                                        "high"
                                      ],
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "web_search",
                                      "description": "The type of the web search tool. One of `web_search` or `web_search_2025_08_26`.",
                                      "enum": [
                                        "web_search",
                                        "web_search_2025_08_26"
                                      ],
                                      "type": "string"
                                    },
                                    "user_location": {
                                      "anyOf": [
                                        {
                                          "description": "The approximate location of the user.\n",
                                          "properties": {
                                            "city": {
                                              "anyOf": [
                                                {
                                                  "description": "Free text input for the city of the user, e.g. `San Francisco`.",
                                                  "type": "string"
                                                },
                                                {
                                                  "type": "null"
                                                }
                                              ]
                                            },
                                            "country": {
                                              "anyOf": [
                                                {
                                                  "description": "The two-letter [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1) of the user, e.g. `US`.",
                                                  "type": "string"
                                                },
                                                {
                                                  "type": "null"
                                                }
                                              ]
                                            },
                                            "region": {
                                              "anyOf": [
                                                {
                                                  "description": "Free text input for the region of the user, e.g. `California`.",
                                                  "type": "string"
                                                },
                                                {
                                                  "type": "null"
                                                }
                                              ]
                                            },
                                            "timezone": {
                                              "anyOf": [
                                                {
                                                  "description": "The [IANA timezone](https://timeapi.io/documentation/iana-timezones) of the user, e.g. `America/Los_Angeles`.",
                                                  "type": "string"
                                                },
                                                {
                                                  "type": "null"
                                                }
                                              ]
                                            },
                                            "type": {
                                              "default": "approximate",
                                              "description": "The type of location approximation. Always `approximate`.",
                                              "enum": [
                                                "approximate"
                                              ],
                                              "type": "string"
                                            }
                                          },
                                          "title": "Web search approximate location",
                                          "type": "object"
                                        },
                                        {
                                          "type": "null"
                                        }
                                      ]
                                    }
                                  },
                                  "required": [
                                    "type"
                                  ],
                                  "title": "Web search",
                                  "type": "object"
                                },
                                {
                                  "description": "Give the model access to additional tools via remote Model Context Protocol\n(MCP) servers. [Learn more about MCP](https://platform.openai.com/docs/guides/tools-remote-mcp).\n",
                                  "properties": {
                                    "allowed_tools": {
                                      "anyOf": [
                                        {
                                          "anyOf": [
                                            {
                                              "description": "A string array of allowed tool names",
                                              "items": {
                                                "type": "string"
                                              },
                                              "title": "MCP allowed tools",
                                              "type": "array"
                                            },
                                            {
                                              "additionalProperties": false,
                                              "description": "A filter object to specify which tools are allowed.\n",
                                              "properties": {
                                                "read_only": {
                                                  "description": "Indicates whether or not a tool modifies data or is read-only. If an\nMCP server is [annotated with `readOnlyHint`](https://modelcontextprotocol.io/specification/2025-06-18/schema#toolannotations-readonlyhint),\nit will match this filter.\n",
                                                  "type": "boolean"
                                                },
                                                "tool_names": {
                                                  "description": "List of allowed tool names.",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "title": "MCP allowed tools",
                                                  "type": "array"
                                                }
                                              },
                                              "required": [],
                                              "title": "MCP tool filter",
                                              "type": "object"
                                            }
                                          ],
                                          "description": "List of allowed tool names or a filter object.\n"
                                        },
                                        {
                                          "type": "null"
                                        }
                                      ]
                                    },
                                    "authorization": {
                                      "description": "An OAuth access token that can be used with a remote MCP server, either\nwith a custom MCP server URL or a service connector. Your application\nmust handle the OAuth authorization flow and provide the token here.\n",
                                      "type": "string"
                                    },
                                    "connector_id": {
                                      "description": "Identifier for service connectors, like those available in ChatGPT. One of\n`server_url` or `connector_id` must be provided. Learn more about service\nconnectors [here](https://platform.openai.com/docs/guides/tools-remote-mcp#connectors).\n\nCurrently supported `connector_id` values are:\n\n- Dropbox: `connector_dropbox`\n- Gmail: `connector_gmail`\n- Google Calendar: `connector_googlecalendar`\n- Google Drive: `connector_googledrive`\n- Microsoft Teams: `connector_microsoftteams`\n- Outlook Calendar: `connector_outlookcalendar`\n- Outlook Email: `connector_outlookemail`\n- SharePoint: `connector_sharepoint`\n",
                                      "enum": [
                                        "connector_dropbox",
                                        "connector_gmail",
                                        "connector_googlecalendar",
                                        "connector_googledrive",
                                        "connector_microsoftteams",
                                        "connector_outlookcalendar",
                                        "connector_outlookemail",
                                        "connector_sharepoint"
                                      ],
                                      "type": "string"
                                    },
                                    "headers": {
                                      "anyOf": [
                                        {
                                          "additionalProperties": {
                                            "type": "string"
                                          },
                                          "description": "Optional HTTP headers to send to the MCP server. Use for authentication\nor other purposes.\n",
                                          "type": "object"
                                        },
                                        {
                                          "type": "null"
                                        }
                                      ]
                                    },
                                    "require_approval": {
                                      "anyOf": [
                                        {
                                          "anyOf": [
                                            {
                                              "additionalProperties": false,
                                              "description": "Specify which of the MCP server's tools require approval. Can be\n`always`, `never`, or a filter object associated with tools\nthat require approval.\n",
                                              "properties": {
                                                "always": {
                                                  "additionalProperties": false,
                                                  "description": "A filter object to specify which tools are allowed.\n",
                                                  "properties": {
                                                    "read_only": {
                                                      "description": "Indicates whether or not a tool modifies data or is read-only. If an\nMCP server is [annotated with `readOnlyHint`](https://modelcontextprotocol.io/specification/2025-06-18/schema#toolannotations-readonlyhint),\nit will match this filter.\n",
                                                      "type": "boolean"
                                                    },
                                                    "tool_names": {
                                                      "description": "List of allowed tool names.",
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "title": "MCP allowed tools",
                                                      "type": "array"
                                                    }
                                                  },
                                                  "required": [],
                                                  "title": "MCP tool filter",
                                                  "type": "object"
                                                },
                                                "never": {
                                                  "additionalProperties": false,
                                                  "description": "A filter object to specify which tools are allowed.\n",
                                                  "properties": {
                                                    "read_only": {
                                                      "description": "Indicates whether or not a tool modifies data or is read-only. If an\nMCP server is [annotated with `readOnlyHint`](https://modelcontextprotocol.io/specification/2025-06-18/schema#toolannotations-readonlyhint),\nit will match this filter.\n",
                                                      "type": "boolean"
                                                    },
                                                    "tool_names": {
                                                      "description": "List of allowed tool names.",
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "title": "MCP allowed tools",
                                                      "type": "array"
                                                    }
                                                  },
                                                  "required": [],
                                                  "title": "MCP tool filter",
                                                  "type": "object"
                                                }
                                              },
                                              "title": "MCP tool approval filter",
                                              "type": "object"
                                            },
                                            {
                                              "description": "Specify a single approval policy for all tools. One of `always` or\n`never`. When set to `always`, all tools will require approval. When\nset to `never`, all tools will not require approval.\n",
                                              "enum": [
                                                "always",
                                                "never"
                                              ],
                                              "title": "MCP tool approval setting",
                                              "type": "string"
                                            }
                                          ],
                                          "default": "always",
                                          "description": "Specify which of the MCP server's tools require approval."
                                        },
                                        {
                                          "type": "null"
                                        }
                                      ]
                                    },
                                    "server_description": {
                                      "description": "Optional description of the MCP server, used to provide more context.\n",
                                      "type": "string"
                                    },
                                    "server_label": {
                                      "description": "A label for this MCP server, used to identify it in tool calls.\n",
                                      "type": "string"
                                    },
                                    "server_url": {
                                      "description": "The URL for the MCP server. One of `server_url` or `connector_id` must be\nprovided.\n",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "The type of the MCP tool. Always `mcp`.",
                                      "enum": [
                                        "mcp"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "server_label"
                                  ],
                                  "title": "MCP tool",
                                  "type": "object"
                                },
                                {
                                  "description": "A tool that runs Python code to help generate a response to a prompt.\n",
                                  "properties": {
                                    "container": {
                                      "anyOf": [
                                        {
                                          "description": "The container ID.",
                                          "type": "string"
                                        },
                                        {
                                          "description": "Configuration for a code interpreter container. Optionally specify the IDs\nof the files to run the code on.\n",
                                          "properties": {
                                            "file_ids": {
                                              "description": "An optional list of uploaded files to make available to your code.\n",
                                              "items": {
                                                "type": "string"
                                              },
                                              "type": "array"
                                            },
                                            "type": {
                                              "description": "Always `auto`.",
                                              "enum": [
                                                "auto"
                                              ],
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "type"
                                          ],
                                          "title": "CodeInterpreterToolAuto",
                                          "type": "object"
                                        }
                                      ],
                                      "description": "The code interpreter container. Can be a container ID or an object that\nspecifies uploaded file IDs to make available to your code.\n"
                                    },
                                    "type": {
                                      "description": "The type of the code interpreter tool. Always `code_interpreter`.\n",
                                      "enum": [
                                        "code_interpreter"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "container"
                                  ],
                                  "title": "Code interpreter",
                                  "type": "object"
                                },
                                {
                                  "description": "A tool that generates images using a model like `gpt-image-1`.\n",
                                  "properties": {
                                    "background": {
                                      "default": "auto",
                                      "description": "Background type for the generated image. One of `transparent`,\n`opaque`, or `auto`. Default: `auto`.\n",
                                      "enum": [
                                        "transparent",
                                        "opaque",
                                        "auto"
                                      ],
                                      "type": "string"
                                    },
                                    "input_fidelity": {
                                      "anyOf": [
                                        {
                                          "default": "low",
                                          "description": "Control how much effort the model will exert to match the style and features,\nespecially facial features, of input images. This parameter is only supported\nfor `gpt-image-1`. Unsupported for `gpt-image-1-mini`. Supports `high` and `low`. Defaults to `low`.\n",
                                          "enum": [
                                            "high",
                                            "low"
                                          ],
                                          "type": "string"
                                        },
                                        {
                                          "type": "null"
                                        }
                                      ]
                                    },
                                    "input_image_mask": {
                                      "additionalProperties": false,
                                      "description": "Optional mask for inpainting. Contains `image_url`\n(string, optional) and `file_id` (string, optional).\n",
                                      "properties": {
                                        "file_id": {
                                          "description": "File ID for the mask image.\n",
                                          "type": "string"
                                        },
                                        "image_url": {
                                          "description": "Base64-encoded mask image.\n",
                                          "type": "string"
                                        }
                                      },
                                      "required": [],
                                      "type": "object"
                                    },
                                    "model": {
                                      "default": "gpt-image-1",
                                      "description": "The image generation model to use. Default: `gpt-image-1`.\n",
                                      "enum": [
                                        "gpt-image-1",
                                        "gpt-image-1-mini"
                                      ],
                                      "type": "string"
                                    },
                                    "moderation": {
                                      "default": "auto",
                                      "description": "Moderation level for the generated image. Default: `auto`.\n",
                                      "enum": [
                                        "auto",
                                        "low"
                                      ],
                                      "type": "string"
                                    },
                                    "output_compression": {
                                      "default": 100,
                                      "description": "Compression level for the output image. Default: 100.\n",
                                      "maximum": 100,
                                      "minimum": 0,
                                      "type": "integer"
                                    },
                                    "output_format": {
                                      "default": "png",
                                      "description": "The output format of the generated image. One of `png`, `webp`, or\n`jpeg`. Default: `png`.\n",
                                      "enum": [
                                        "png",
                                        "webp",
                                        "jpeg"
                                      ],
                                      "type": "string"
                                    },
                                    "partial_images": {
                                      "default": 0,
                                      "description": "Number of partial images to generate in streaming mode, from 0 (default value) to 3.\n",
                                      "maximum": 3,
                                      "minimum": 0,
                                      "type": "integer"
                                    },
                                    "quality": {
                                      "default": "auto",
                                      "description": "The quality of the generated image. One of `low`, `medium`, `high`,\nor `auto`. Default: `auto`.\n",
                                      "enum": [
                                        "low",
                                        "medium",
                                        "high",
                                        "auto"
                                      ],
                                      "type": "string"
                                    },
                                    "size": {
                                      "default": "auto",
                                      "description": "The size of the generated image. One of `1024x1024`, `1024x1536`,\n`1536x1024`, or `auto`. Default: `auto`.\n",
                                      "enum": [
                                        "1024x1024",
                                        "1024x1536",
                                        "1536x1024",
                                        "auto"
                                      ],
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "The type of the image generation tool. Always `image_generation`.\n",
                                      "enum": [
                                        "image_generation"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type"
                                  ],
                                  "title": "Image generation tool",
                                  "type": "object"
                                },
                                {
                                  "description": "A tool that allows the model to execute shell commands in a local environment.\n",
                                  "properties": {
                                    "type": {
                                      "description": "The type of the local shell tool. Always `local_shell`.",
                                      "enum": [
                                        "local_shell"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type"
                                  ],
                                  "title": "Local shell tool",
                                  "type": "object"
                                },
                                {
                                  "description": "A custom tool that processes input using a specified format. Learn more about\n[custom tools](https://platform.openai.com/docs/guides/function-calling#custom-tools).\n",
                                  "properties": {
                                    "description": {
                                      "description": "Optional description of the custom tool, used to provide more context.\n",
                                      "type": "string"
                                    },
                                    "format": {
                                      "anyOf": [
                                        {
                                          "additionalProperties": false,
                                          "description": "Unconstrained free-form text.",
                                          "properties": {
                                            "type": {
                                              "description": "Unconstrained text format. Always `text`.",
                                              "enum": [
                                                "text"
                                              ],
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "type"
                                          ],
                                          "title": "Text format",
                                          "type": "object"
                                        },
                                        {
                                          "additionalProperties": false,
                                          "description": "A grammar defined by the user.",
                                          "properties": {
                                            "definition": {
                                              "description": "The grammar definition.",
                                              "type": "string"
                                            },
                                            "syntax": {
                                              "description": "The syntax of the grammar definition. One of `lark` or `regex`.",
                                              "enum": [
                                                "lark",
                                                "regex"
                                              ],
                                              "type": "string"
                                            },
                                            "type": {
                                              "description": "Grammar format. Always `grammar`.",
                                              "enum": [
                                                "grammar"
                                              ],
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "definition",
                                            "syntax"
                                          ],
                                          "title": "Grammar format",
                                          "type": "object"
                                        }
                                      ],
                                      "description": "The input format for the custom tool. Default is unconstrained text.\n",
                                      "discriminator": {
                                        "propertyName": "type"
                                      }
                                    },
                                    "name": {
                                      "description": "The name of the custom tool, used to identify it in tool calls.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "The type of the custom tool. Always `custom`.",
                                      "enum": [
                                        "custom"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "name"
                                  ],
                                  "title": "Custom tool",
                                  "type": "object"
                                },
                                {
                                  "description": "This tool searches the web for relevant results to use in a response. Learn more about the [web search tool](https://platform.openai.com/docs/guides/tools-web-search).",
                                  "properties": {
                                    "search_context_size": {
                                      "description": "High level guidance for the amount of context window space to use for the search. One of `low`, `medium`, or `high`. `medium` is the default.",
                                      "enum": [
                                        "low",
                                        "medium",
                                        "high"
                                      ],
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "web_search_preview",
                                      "description": "The type of the web search tool. One of `web_search_preview` or `web_search_preview_2025_03_11`.",
                                      "enum": [
                                        "web_search_preview",
                                        "web_search_preview_2025_03_11"
                                      ],
                                      "type": "string"
                                    },
                                    "user_location": {
                                      "anyOf": [
                                        {
                                          "description": "The user's location.",
                                          "properties": {
                                            "city": {
                                              "anyOf": [
                                                {
                                                  "description": "Free text input for the city of the user, e.g. `San Francisco`.",
                                                  "type": "string"
                                                },
                                                {
                                                  "type": "null"
                                                }
                                              ]
                                            },
                                            "country": {
                                              "anyOf": [
                                                {
                                                  "description": "The two-letter [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1) of the user, e.g. `US`.",
                                                  "type": "string"
                                                },
                                                {
                                                  "type": "null"
                                                }
                                              ]
                                            },
                                            "region": {
                                              "anyOf": [
                                                {
                                                  "description": "Free text input for the region of the user, e.g. `California`.",
                                                  "type": "string"
                                                },
                                                {
                                                  "type": "null"
                                                }
                                              ]
                                            },
                                            "timezone": {
                                              "anyOf": [
                                                {
                                                  "description": "The [IANA timezone](https://timeapi.io/documentation/iana-timezones) of the user, e.g. `America/Los_Angeles`.",
                                                  "type": "string"
                                                },
                                                {
                                                  "type": "null"
                                                }
                                              ]
                                            },
                                            "type": {
                                              "default": "approximate",
                                              "description": "The type of location approximation. Always `approximate`.",
                                              "enum": [
                                                "approximate"
                                              ],
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        {
                                          "type": "null"
                                        }
                                      ]
                                    }
                                  },
                                  "required": [
                                    "type"
                                  ],
                                  "title": "Web search preview",
                                  "type": "object"
                                }
                              ],
                              "description": "A tool that can be used to generate a response.\n",
                              "discriminator": {
                                "propertyName": "type"
                              }
                            },
                            "type": "array"
                          },
                          "top_p": {
                            "default": 1,
                            "description": "An alternative to temperature for nucleus sampling; 1.0 includes all tokens.",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "source": {
                        "anyOf": [
                          {
                            "properties": {
                              "content": {
                                "description": "The content of the jsonl file.",
                                "items": {
                                  "properties": {
                                    "item": {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    "sample": {
                                      "additionalProperties": true,
                                      "type": "object"
                                    }
                                  },
                                  "required": [
                                    "item"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "type": {
                                "default": "file_content",
                                "description": "The type of jsonl source. Always `file_content`.",
                                "enum": [
                                  "file_content"
                                ],
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "content"
                            ],
                            "title": "EvalJsonlFileContentSource",
                            "type": "object"
                          },
                          {
                            "properties": {
                              "id": {
                                "description": "The identifier of the file.",
                                "type": "string"
                              },
                              "type": {
                                "default": "file_id",
                                "description": "The type of jsonl source. Always `file_id`.",
                                "enum": [
                                  "file_id"
                                ],
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "id"
                            ],
                            "title": "EvalJsonlFileIdSource",
                            "type": "object"
                          },
                          {
                            "description": "A EvalResponsesSource object describing a run data source configuration.\n",
                            "properties": {
                              "created_after": {
                                "anyOf": [
                                  {
                                    "description": "Only include items created after this timestamp (inclusive). This is a query parameter used to select responses.",
                                    "minimum": 0,
                                    "type": "integer"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "created_before": {
                                "anyOf": [
                                  {
                                    "description": "Only include items created before this timestamp (inclusive). This is a query parameter used to select responses.",
                                    "minimum": 0,
                                    "type": "integer"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "instructions_search": {
                                "anyOf": [
                                  {
                                    "description": "Optional string to search the 'instructions' field. This is a query parameter used to select responses.",
                                    "type": "string"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "metadata": {
                                "anyOf": [
                                  {
                                    "description": "Metadata filter for the responses. This is a query parameter used to select responses.",
                                    "type": "object"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "model": {
                                "anyOf": [
                                  {
                                    "description": "The name of the model to find responses for. This is a query parameter used to select responses.",
                                    "type": "string"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "reasoning_effort": {
                                "anyOf": [
                                  {
                                    "anyOf": [
                                      {
                                        "default": "medium",
                                        "description": "Constrains effort on reasoning for\n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\nCurrently supported values are `minimal`, `low`, `medium`, and `high`. Reducing\nreasoning effort can result in faster responses and fewer tokens used\non reasoning in a response.\n\nNote: The `gpt-5-pro` model defaults to (and only supports) `high` reasoning effort.\n",
                                        "enum": [
                                          "minimal",
                                          "low",
                                          "medium",
                                          "high"
                                        ],
                                        "type": "string"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "description": "Optional reasoning effort parameter. This is a query parameter used to select responses."
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "temperature": {
                                "anyOf": [
                                  {
                                    "description": "Sampling temperature. This is a query parameter used to select responses.",
                                    "type": "number"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "tools": {
                                "anyOf": [
                                  {
                                    "description": "List of tool names. This is a query parameter used to select responses.",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "top_p": {
                                "anyOf": [
                                  {
                                    "description": "Nucleus sampling parameter. This is a query parameter used to select responses.",
                                    "type": "number"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "type": {
                                "description": "The type of run data source. Always `responses`.",
                                "enum": [
                                  "responses"
                                ],
                                "type": "string"
                              },
                              "users": {
                                "anyOf": [
                                  {
                                    "description": "List of user identifiers. This is a query parameter used to select responses.",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "title": "EvalResponsesSource",
                            "type": "object"
                          }
                        ],
                        "description": "Determines what populates the `item` namespace in this run's data source.",
                        "discriminator": {
                          "propertyName": "type"
                        }
                      },
                      "type": {
                        "default": "responses",
                        "description": "The type of run data source. Always `responses`.",
                        "enum": [
                          "responses"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "source"
                    ],
                    "title": "CreateEvalResponsesRunDataSource",
                    "type": "object"
                  }
                ],
                "description": "Information about the run's data source.",
                "discriminator": {
                  "propertyName": "type"
                },
                "type": "object"
              },
              "error": {
                "description": "An object representing an error response from the Eval API.\n",
                "properties": {
                  "code": {
                    "description": "The error code.",
                    "type": "string"
                  },
                  "message": {
                    "description": "The error message.",
                    "type": "string"
                  }
                },
                "required": [
                  "code",
                  "message"
                ],
                "title": "EvalApiError",
                "type": "object"
              },
              "eval_id": {
                "description": "The identifier of the associated evaluation.",
                "type": "string"
              },
              "id": {
                "description": "Unique identifier for the evaluation run.",
                "type": "string"
              },
              "metadata": {
                "anyOf": [
                  {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "model": {
                "description": "The model that is evaluated, if applicable.",
                "type": "string"
              },
              "name": {
                "description": "The name of the evaluation run.",
                "type": "string"
              },
              "object": {
                "default": "eval.run",
                "description": "The type of the object. Always \"eval.run\".",
                "enum": [
                  "eval.run"
                ],
                "type": "string"
              },
              "per_model_usage": {
                "description": "Usage statistics for each model during the evaluation run.",
                "items": {
                  "properties": {
                    "cached_tokens": {
                      "description": "The number of tokens retrieved from cache.",
                      "type": "integer"
                    },
                    "completion_tokens": {
                      "description": "The number of completion tokens generated.",
                      "type": "integer"
                    },
                    "invocation_count": {
                      "description": "The number of invocations.",
                      "type": "integer"
                    },
                    "model_name": {
                      "description": "The name of the model.",
                      "type": "string"
                    },
                    "prompt_tokens": {
                      "description": "The number of prompt tokens used.",
                      "type": "integer"
                    },
                    "total_tokens": {
                      "description": "The total number of tokens used.",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "model_name",
                    "invocation_count",
                    "prompt_tokens",
                    "completion_tokens",
                    "total_tokens",
                    "cached_tokens"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "per_testing_criteria_results": {
                "description": "Results per testing criteria applied during the evaluation run.",
                "items": {
                  "properties": {
                    "failed": {
                      "description": "Number of tests failed for this criteria.",
                      "type": "integer"
                    },
                    "passed": {
                      "description": "Number of tests passed for this criteria.",
                      "type": "integer"
                    },
                    "testing_criteria": {
                      "description": "A description of the testing criteria.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "testing_criteria",
                    "passed",
                    "failed"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "report_url": {
                "description": "The URL to the rendered evaluation run report on the UI dashboard.",
                "type": "string"
              },
              "result_counts": {
                "description": "Counters summarizing the outcomes of the evaluation run.",
                "properties": {
                  "errored": {
                    "description": "Number of output items that resulted in an error.",
                    "type": "integer"
                  },
                  "failed": {
                    "description": "Number of output items that failed to pass the evaluation.",
                    "type": "integer"
                  },
                  "passed": {
                    "description": "Number of output items that passed the evaluation.",
                    "type": "integer"
                  },
                  "total": {
                    "description": "Total number of executed output items.",
                    "type": "integer"
                  }
                },
                "required": [
                  "total",
                  "errored",
                  "failed",
                  "passed"
                ],
                "type": "object"
              },
              "status": {
                "description": "The status of the evaluation run.",
                "type": "string"
              }
            },
            "required": [
              "object",
              "id",
              "eval_id",
              "status",
              "model",
              "name",
              "created_at",
              "report_url",
              "result_counts",
              "per_model_usage",
              "per_testing_criteria_results",
              "data_source",
              "metadata",
              "error"
            ],
            "title": "EvalRun",
            "type": "object"
          }
        }
      },
      "description": "The evaluation run"
    }
  },
  "summary": "Get an eval run",
  "tags": [
    "Evals"
  ]
}
