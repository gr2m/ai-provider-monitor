{
  "description": "Generates audio from the input text.",
  "operationId": "createSpeech",
  "requestBody": {
    "content": {
      "application/json": {
        "schema": {
          "additionalProperties": false,
          "properties": {
            "input": {
              "description": "The text to generate audio for. The maximum length is 4096 characters.",
              "maxLength": 4096,
              "type": "string"
            },
            "instructions": {
              "description": "Control the voice of your generated audio with additional instructions. Does not work with `tts-1` or `tts-1-hd`.",
              "maxLength": 4096,
              "type": "string"
            },
            "model": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "enum": [
                    "tts-1",
                    "tts-1-hd",
                    "gpt-4o-mini-tts"
                  ],
                  "type": "string"
                }
              ],
              "description": "One of the available [TTS models](https://platform.openai.com/docs/models#tts): `tts-1`, `tts-1-hd` or `gpt-4o-mini-tts`.\n"
            },
            "response_format": {
              "default": "mp3",
              "description": "The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.",
              "enum": [
                "mp3",
                "opus",
                "aac",
                "flac",
                "wav",
                "pcm"
              ],
              "type": "string"
            },
            "speed": {
              "default": 1,
              "description": "The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default.",
              "maximum": 4,
              "minimum": 0.25,
              "type": "number"
            },
            "stream_format": {
              "default": "audio",
              "description": "The format to stream the audio in. Supported formats are `sse` and `audio`. `sse` is not supported for `tts-1` or `tts-1-hd`.",
              "enum": [
                "sse",
                "audio"
              ],
              "type": "string"
            },
            "voice": {
              "description": "The voice to use when generating the audio. Supported voices are `alloy`, `ash`, `ballad`, `coral`, `echo`, `fable`, `onyx`, `nova`, `sage`, `shimmer`, and `verse`. Previews of the voices are available in the [Text to speech guide](https://platform.openai.com/docs/guides/text-to-speech#voice-options).",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "enum": [
                    "alloy",
                    "ash",
                    "ballad",
                    "coral",
                    "echo",
                    "sage",
                    "shimmer",
                    "verse",
                    "marin",
                    "cedar"
                  ],
                  "type": "string"
                }
              ],
              "example": "ash"
            }
          },
          "required": [
            "model",
            "input",
            "voice"
          ],
          "type": "object"
        }
      }
    },
    "required": true
  },
  "responses": {
    "200": {
      "content": {
        "application/octet-stream": {
          "schema": {
            "format": "binary",
            "type": "string"
          }
        },
        "text/event-stream": {
          "schema": {
            "anyOf": [
              {
                "description": "Emitted for each chunk of audio data generated during speech synthesis.",
                "properties": {
                  "audio": {
                    "description": "A chunk of Base64-encoded audio data.\n",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of the event. Always `speech.audio.delta`.\n",
                    "enum": [
                      "speech.audio.delta"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "audio"
                ],
                "type": "object"
              },
              {
                "description": "Emitted when the speech synthesis is complete and all audio has been streamed.",
                "properties": {
                  "type": {
                    "description": "The type of the event. Always `speech.audio.done`.\n",
                    "enum": [
                      "speech.audio.done"
                    ],
                    "type": "string"
                  },
                  "usage": {
                    "description": "Token usage statistics for the request.\n",
                    "properties": {
                      "input_tokens": {
                        "description": "Number of input tokens in the prompt.",
                        "type": "integer"
                      },
                      "output_tokens": {
                        "description": "Number of output tokens generated.",
                        "type": "integer"
                      },
                      "total_tokens": {
                        "description": "Total number of tokens used (input + output).",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "input_tokens",
                      "output_tokens",
                      "total_tokens"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "type",
                  "usage"
                ],
                "type": "object"
              }
            ],
            "discriminator": {
              "propertyName": "type"
            }
          }
        }
      },
      "description": "OK",
      "headers": {
        "Transfer-Encoding": {
          "description": "chunked",
          "schema": {
            "type": "string"
          }
        }
      }
    }
  },
  "summary": "Create speech",
  "tags": [
    "Audio"
  ]
}
