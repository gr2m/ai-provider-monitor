{
  "description": "Creates a fine-tuning job which begins the process of creating a new model from a given dataset.\n\nResponse includes details of the enqueued job including job status and the name of the fine-tuned models once complete.\n\n[Learn more about fine-tuning](https://platform.openai.com/docs/guides/model-optimization)\n",
  "operationId": "createFineTuningJob",
  "requestBody": {
    "content": {
      "application/json": {
        "schema": {
          "properties": {
            "hyperparameters": {
              "deprecated": true,
              "description": "The hyperparameters used for the fine-tuning job.\nThis value is now deprecated in favor of `method`, and should be passed in under the `method` parameter.\n",
              "properties": {
                "batch_size": {
                  "anyOf": [
                    {
                      "enum": [
                        "auto"
                      ],
                      "title": "Auto",
                      "type": "string"
                    },
                    {
                      "maximum": 256,
                      "minimum": 1,
                      "type": "integer"
                    }
                  ],
                  "default": "auto",
                  "description": "Number of examples in each batch. A larger batch size means that model parameters\nare updated less frequently, but with lower variance.\n"
                },
                "learning_rate_multiplier": {
                  "anyOf": [
                    {
                      "enum": [
                        "auto"
                      ],
                      "title": "Auto",
                      "type": "string"
                    },
                    {
                      "exclusiveMinimum": true,
                      "minimum": 0,
                      "type": "number"
                    }
                  ],
                  "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid\noverfitting.\n"
                },
                "n_epochs": {
                  "anyOf": [
                    {
                      "enum": [
                        "auto"
                      ],
                      "title": "Auto",
                      "type": "string"
                    },
                    {
                      "maximum": 50,
                      "minimum": 1,
                      "type": "integer"
                    }
                  ],
                  "default": "auto",
                  "description": "The number of epochs to train the model for. An epoch refers to one full cycle\nthrough the training dataset.\n"
                }
              },
              "type": "object"
            },
            "integrations": {
              "description": "A list of integrations to enable for your fine-tuning job.",
              "items": {
                "properties": {
                  "type": {
                    "anyOf": [
                      {
                        "enum": [
                          "wandb"
                        ],
                        "type": "string"
                      }
                    ],
                    "description": "The type of integration to enable. Currently, only \"wandb\" (Weights and Biases) is supported.\n"
                  },
                  "wandb": {
                    "description": "The settings for your integration with Weights and Biases. This payload specifies the project that\nmetrics will be sent to. Optionally, you can set an explicit display name for your run, add tags\nto your run, and set a default entity (team, username, etc) to be associated with your run.\n",
                    "properties": {
                      "entity": {
                        "description": "The entity to use for the run. This allows you to set the team or username of the WandB user that you would\nlike associated with the run. If not set, the default entity for the registered WandB API key is used.\n",
                        "nullable": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "A display name to set for the run. If not set, we will use the Job ID as the name.\n",
                        "nullable": true,
                        "type": "string"
                      },
                      "project": {
                        "description": "The name of the project that the new run will be created under.\n",
                        "example": "my-wandb-project",
                        "type": "string"
                      },
                      "tags": {
                        "description": "A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some\ndefault tags are generated by OpenAI: \"openai/finetune\", \"openai/{base-model}\", \"openai/{ftjob-abcdef}\".\n",
                        "items": {
                          "example": "custom-tag",
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "project"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "type",
                  "wandb"
                ],
                "type": "object"
              },
              "nullable": true,
              "type": "array"
            },
            "metadata": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ]
            },
            "method": {
              "description": "The method used for fine-tuning.",
              "properties": {
                "dpo": {
                  "description": "Configuration for the DPO fine-tuning method.",
                  "properties": {
                    "hyperparameters": {
                      "description": "The hyperparameters used for the DPO fine-tuning job.",
                      "properties": {
                        "batch_size": {
                          "anyOf": [
                            {
                              "enum": [
                                "auto"
                              ],
                              "type": "string"
                            },
                            {
                              "maximum": 256,
                              "minimum": 1,
                              "type": "integer"
                            }
                          ],
                          "default": "auto",
                          "description": "Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.\n"
                        },
                        "beta": {
                          "anyOf": [
                            {
                              "enum": [
                                "auto"
                              ],
                              "type": "string"
                            },
                            {
                              "exclusiveMinimum": true,
                              "maximum": 2,
                              "minimum": 0,
                              "type": "number"
                            }
                          ],
                          "description": "The beta value for the DPO method. A higher beta value will increase the weight of the penalty between the policy and reference model.\n"
                        },
                        "learning_rate_multiplier": {
                          "anyOf": [
                            {
                              "enum": [
                                "auto"
                              ],
                              "type": "string"
                            },
                            {
                              "exclusiveMinimum": true,
                              "minimum": 0,
                              "type": "number"
                            }
                          ],
                          "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.\n"
                        },
                        "n_epochs": {
                          "anyOf": [
                            {
                              "enum": [
                                "auto"
                              ],
                              "type": "string"
                            },
                            {
                              "maximum": 50,
                              "minimum": 1,
                              "type": "integer"
                            }
                          ],
                          "default": "auto",
                          "description": "The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.\n"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "reinforcement": {
                  "description": "Configuration for the reinforcement fine-tuning method.",
                  "properties": {
                    "grader": {
                      "anyOf": [
                        {
                          "description": "A StringCheckGrader object that performs a string comparison between input and reference using a specified operation.\n",
                          "properties": {
                            "input": {
                              "description": "The input text. This may include template strings.",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the grader.",
                              "type": "string"
                            },
                            "operation": {
                              "description": "The string check operation to perform. One of `eq`, `ne`, `like`, or `ilike`.",
                              "enum": [
                                "eq",
                                "ne",
                                "like",
                                "ilike"
                              ],
                              "type": "string"
                            },
                            "reference": {
                              "description": "The reference text. This may include template strings.",
                              "type": "string"
                            },
                            "type": {
                              "description": "The object type, which is always `string_check`.",
                              "enum": [
                                "string_check"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "name",
                            "input",
                            "reference",
                            "operation"
                          ],
                          "title": "StringCheckGrader",
                          "type": "object"
                        },
                        {
                          "description": "A TextSimilarityGrader object which grades text based on similarity metrics.\n",
                          "properties": {
                            "evaluation_metric": {
                              "description": "The evaluation metric to use. One of `cosine`, `fuzzy_match`, `bleu`, \n`gleu`, `meteor`, `rouge_1`, `rouge_2`, `rouge_3`, `rouge_4`, `rouge_5`, \nor `rouge_l`.\n",
                              "enum": [
                                "cosine",
                                "fuzzy_match",
                                "bleu",
                                "gleu",
                                "meteor",
                                "rouge_1",
                                "rouge_2",
                                "rouge_3",
                                "rouge_4",
                                "rouge_5",
                                "rouge_l"
                              ],
                              "type": "string"
                            },
                            "input": {
                              "description": "The text being graded.",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the grader.",
                              "type": "string"
                            },
                            "reference": {
                              "description": "The text being graded against.",
                              "type": "string"
                            },
                            "type": {
                              "default": "text_similarity",
                              "description": "The type of grader.",
                              "enum": [
                                "text_similarity"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "name",
                            "input",
                            "reference",
                            "evaluation_metric"
                          ],
                          "title": "TextSimilarityGrader",
                          "type": "object"
                        },
                        {
                          "description": "A PythonGrader object that runs a python script on the input.\n",
                          "properties": {
                            "image_tag": {
                              "description": "The image tag to use for the python script.",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the grader.",
                              "type": "string"
                            },
                            "source": {
                              "description": "The source code of the python script.",
                              "type": "string"
                            },
                            "type": {
                              "description": "The object type, which is always `python`.",
                              "enum": [
                                "python"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "name",
                            "source"
                          ],
                          "title": "PythonGrader",
                          "type": "object"
                        },
                        {
                          "description": "A ScoreModelGrader object that uses a model to assign a score to the input.\n",
                          "properties": {
                            "input": {
                              "description": "The input text. This may include template strings.",
                              "items": {
                                "description": "A message input to the model with a role indicating instruction following\nhierarchy. Instructions given with the `developer` or `system` role take\nprecedence over instructions given with the `user` role. Messages with the\n`assistant` role are presumed to have been generated by the model in previous\ninteractions.\n",
                                "properties": {
                                  "content": {
                                    "anyOf": [
                                      {
                                        "description": "A text input to the model.\n",
                                        "title": "Text input",
                                        "type": "string"
                                      },
                                      {
                                        "description": "A text input to the model.",
                                        "properties": {
                                          "text": {
                                            "description": "The text input to the model.",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "input_text",
                                            "description": "The type of the input item. Always `input_text`.",
                                            "enum": [
                                              "input_text"
                                            ],
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "type",
                                          "text"
                                        ],
                                        "title": "Input text",
                                        "type": "object"
                                      },
                                      {
                                        "description": "A text output from the model.\n",
                                        "properties": {
                                          "text": {
                                            "description": "The text output from the model.\n",
                                            "type": "string"
                                          },
                                          "type": {
                                            "description": "The type of the output text. Always `output_text`.\n",
                                            "enum": [
                                              "output_text"
                                            ],
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "type",
                                          "text"
                                        ],
                                        "title": "Output text",
                                        "type": "object"
                                      },
                                      {
                                        "description": "An image input to the model.\n",
                                        "properties": {
                                          "detail": {
                                            "description": "The detail level of the image to be sent to the model. One of `high`, `low`, or `auto`. Defaults to `auto`.\n",
                                            "type": "string"
                                          },
                                          "image_url": {
                                            "description": "The URL of the image input.\n",
                                            "type": "string"
                                          },
                                          "type": {
                                            "description": "The type of the image input. Always `input_image`.\n",
                                            "enum": [
                                              "input_image"
                                            ],
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "type",
                                          "image_url"
                                        ],
                                        "title": "Input image",
                                        "type": "object"
                                      },
                                      {
                                        "description": "An audio input to the model.\n",
                                        "properties": {
                                          "input_audio": {
                                            "properties": {
                                              "data": {
                                                "description": "Base64-encoded audio data.\n",
                                                "type": "string"
                                              },
                                              "format": {
                                                "description": "The format of the audio data. Currently supported formats are `mp3` and\n`wav`.\n",
                                                "enum": [
                                                  "mp3",
                                                  "wav"
                                                ],
                                                "type": "string"
                                              }
                                            },
                                            "required": [
                                              "data",
                                              "format"
                                            ],
                                            "type": "object"
                                          },
                                          "type": {
                                            "description": "The type of the input item. Always `input_audio`.\n",
                                            "enum": [
                                              "input_audio"
                                            ],
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "type",
                                          "input_audio"
                                        ],
                                        "title": "Input audio",
                                        "type": "object"
                                      },
                                      {
                                        "description": "A list of inputs, each of which may be either an input text, input image, or input audio object.\n",
                                        "title": "An array of Input text, Input image, and Input audio",
                                        "type": "array"
                                      }
                                    ],
                                    "description": "Inputs to the model - can contain template strings.\n"
                                  },
                                  "role": {
                                    "description": "The role of the message input. One of `user`, `assistant`, `system`, or\n`developer`.\n",
                                    "enum": [
                                      "user",
                                      "assistant",
                                      "system",
                                      "developer"
                                    ],
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "The type of the message input. Always `message`.\n",
                                    "enum": [
                                      "message"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "role",
                                  "content"
                                ],
                                "title": "Eval message object",
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "model": {
                              "description": "The model to use for the evaluation.",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the grader.",
                              "type": "string"
                            },
                            "range": {
                              "description": "The range of the score. Defaults to `[0, 1]`.",
                              "items": {
                                "max_items": 2,
                                "min_items": 2,
                                "type": "number"
                              },
                              "type": "array"
                            },
                            "sampling_params": {
                              "description": "The sampling parameters for the model.",
                              "properties": {
                                "max_completions_tokens": {
                                  "anyOf": [
                                    {
                                      "description": "The maximum number of tokens the grader model may generate in its response.\n",
                                      "minimum": 1,
                                      "type": "integer"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                },
                                "reasoning_effort": {
                                  "anyOf": [
                                    {
                                      "default": "medium",
                                      "description": "Constrains effort on reasoning for\n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\nCurrently supported values are `minimal`, `low`, `medium`, and `high`. Reducing\nreasoning effort can result in faster responses and fewer tokens used\non reasoning in a response.\n",
                                      "enum": [
                                        "minimal",
                                        "low",
                                        "medium",
                                        "high"
                                      ],
                                      "type": "string"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                },
                                "seed": {
                                  "anyOf": [
                                    {
                                      "description": "A seed value to initialize the randomness, during sampling.\n",
                                      "type": "integer"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                },
                                "temperature": {
                                  "anyOf": [
                                    {
                                      "description": "A higher temperature increases randomness in the outputs.\n",
                                      "type": "number"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                },
                                "top_p": {
                                  "anyOf": [
                                    {
                                      "default": 1,
                                      "description": "An alternative to temperature for nucleus sampling; 1.0 includes all tokens.\n",
                                      "example": 1,
                                      "type": "number"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                }
                              },
                              "type": "object"
                            },
                            "type": {
                              "description": "The object type, which is always `score_model`.",
                              "enum": [
                                "score_model"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "name",
                            "input",
                            "model"
                          ],
                          "title": "ScoreModelGrader",
                          "type": "object"
                        },
                        {
                          "description": "A MultiGrader object combines the output of multiple graders to produce a single score.",
                          "properties": {
                            "calculate_output": {
                              "description": "A formula to calculate the output based on grader results.",
                              "type": "string"
                            },
                            "graders": {
                              "anyOf": [
                                {
                                  "description": "A StringCheckGrader object that performs a string comparison between input and reference using a specified operation.\n",
                                  "properties": {
                                    "input": {
                                      "description": "The input text. This may include template strings.",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "The name of the grader.",
                                      "type": "string"
                                    },
                                    "operation": {
                                      "description": "The string check operation to perform. One of `eq`, `ne`, `like`, or `ilike`.",
                                      "enum": [
                                        "eq",
                                        "ne",
                                        "like",
                                        "ilike"
                                      ],
                                      "type": "string"
                                    },
                                    "reference": {
                                      "description": "The reference text. This may include template strings.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "The object type, which is always `string_check`.",
                                      "enum": [
                                        "string_check"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "name",
                                    "input",
                                    "reference",
                                    "operation"
                                  ],
                                  "title": "StringCheckGrader",
                                  "type": "object"
                                },
                                {
                                  "description": "A TextSimilarityGrader object which grades text based on similarity metrics.\n",
                                  "properties": {
                                    "evaluation_metric": {
                                      "description": "The evaluation metric to use. One of `cosine`, `fuzzy_match`, `bleu`, \n`gleu`, `meteor`, `rouge_1`, `rouge_2`, `rouge_3`, `rouge_4`, `rouge_5`, \nor `rouge_l`.\n",
                                      "enum": [
                                        "cosine",
                                        "fuzzy_match",
                                        "bleu",
                                        "gleu",
                                        "meteor",
                                        "rouge_1",
                                        "rouge_2",
                                        "rouge_3",
                                        "rouge_4",
                                        "rouge_5",
                                        "rouge_l"
                                      ],
                                      "type": "string"
                                    },
                                    "input": {
                                      "description": "The text being graded.",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "The name of the grader.",
                                      "type": "string"
                                    },
                                    "reference": {
                                      "description": "The text being graded against.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "text_similarity",
                                      "description": "The type of grader.",
                                      "enum": [
                                        "text_similarity"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "name",
                                    "input",
                                    "reference",
                                    "evaluation_metric"
                                  ],
                                  "title": "TextSimilarityGrader",
                                  "type": "object"
                                },
                                {
                                  "description": "A PythonGrader object that runs a python script on the input.\n",
                                  "properties": {
                                    "image_tag": {
                                      "description": "The image tag to use for the python script.",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "The name of the grader.",
                                      "type": "string"
                                    },
                                    "source": {
                                      "description": "The source code of the python script.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "The object type, which is always `python`.",
                                      "enum": [
                                        "python"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "name",
                                    "source"
                                  ],
                                  "title": "PythonGrader",
                                  "type": "object"
                                },
                                {
                                  "description": "A ScoreModelGrader object that uses a model to assign a score to the input.\n",
                                  "properties": {
                                    "input": {
                                      "description": "The input text. This may include template strings.",
                                      "items": {
                                        "description": "A message input to the model with a role indicating instruction following\nhierarchy. Instructions given with the `developer` or `system` role take\nprecedence over instructions given with the `user` role. Messages with the\n`assistant` role are presumed to have been generated by the model in previous\ninteractions.\n",
                                        "properties": {
                                          "content": {
                                            "anyOf": [
                                              {
                                                "description": "A text input to the model.\n",
                                                "title": "Text input",
                                                "type": "string"
                                              },
                                              {
                                                "description": "A text input to the model.",
                                                "properties": {
                                                  "text": {
                                                    "description": "The text input to the model.",
                                                    "type": "string"
                                                  },
                                                  "type": {
                                                    "default": "input_text",
                                                    "description": "The type of the input item. Always `input_text`.",
                                                    "enum": [
                                                      "input_text"
                                                    ],
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "type",
                                                  "text"
                                                ],
                                                "title": "Input text",
                                                "type": "object"
                                              },
                                              {
                                                "description": "A text output from the model.\n",
                                                "properties": {
                                                  "text": {
                                                    "description": "The text output from the model.\n",
                                                    "type": "string"
                                                  },
                                                  "type": {
                                                    "description": "The type of the output text. Always `output_text`.\n",
                                                    "enum": [
                                                      "output_text"
                                                    ],
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "type",
                                                  "text"
                                                ],
                                                "title": "Output text",
                                                "type": "object"
                                              },
                                              {
                                                "description": "An image input to the model.\n",
                                                "properties": {
                                                  "detail": {
                                                    "description": "The detail level of the image to be sent to the model. One of `high`, `low`, or `auto`. Defaults to `auto`.\n",
                                                    "type": "string"
                                                  },
                                                  "image_url": {
                                                    "description": "The URL of the image input.\n",
                                                    "type": "string"
                                                  },
                                                  "type": {
                                                    "description": "The type of the image input. Always `input_image`.\n",
                                                    "enum": [
                                                      "input_image"
                                                    ],
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "type",
                                                  "image_url"
                                                ],
                                                "title": "Input image",
                                                "type": "object"
                                              },
                                              {
                                                "description": "An audio input to the model.\n",
                                                "properties": {
                                                  "input_audio": {
                                                    "properties": {
                                                      "data": {
                                                        "description": "Base64-encoded audio data.\n",
                                                        "type": "string"
                                                      },
                                                      "format": {
                                                        "description": "The format of the audio data. Currently supported formats are `mp3` and\n`wav`.\n",
                                                        "enum": [
                                                          "mp3",
                                                          "wav"
                                                        ],
                                                        "type": "string"
                                                      }
                                                    },
                                                    "required": [
                                                      "data",
                                                      "format"
                                                    ],
                                                    "type": "object"
                                                  },
                                                  "type": {
                                                    "description": "The type of the input item. Always `input_audio`.\n",
                                                    "enum": [
                                                      "input_audio"
                                                    ],
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "type",
                                                  "input_audio"
                                                ],
                                                "title": "Input audio",
                                                "type": "object"
                                              },
                                              {
                                                "description": "A list of inputs, each of which may be either an input text, input image, or input audio object.\n",
                                                "title": "An array of Input text, Input image, and Input audio",
                                                "type": "array"
                                              }
                                            ],
                                            "description": "Inputs to the model - can contain template strings.\n"
                                          },
                                          "role": {
                                            "description": "The role of the message input. One of `user`, `assistant`, `system`, or\n`developer`.\n",
                                            "enum": [
                                              "user",
                                              "assistant",
                                              "system",
                                              "developer"
                                            ],
                                            "type": "string"
                                          },
                                          "type": {
                                            "description": "The type of the message input. Always `message`.\n",
                                            "enum": [
                                              "message"
                                            ],
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "role",
                                          "content"
                                        ],
                                        "title": "Eval message object",
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "model": {
                                      "description": "The model to use for the evaluation.",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "The name of the grader.",
                                      "type": "string"
                                    },
                                    "range": {
                                      "description": "The range of the score. Defaults to `[0, 1]`.",
                                      "items": {
                                        "max_items": 2,
                                        "min_items": 2,
                                        "type": "number"
                                      },
                                      "type": "array"
                                    },
                                    "sampling_params": {
                                      "description": "The sampling parameters for the model.",
                                      "properties": {
                                        "max_completions_tokens": {
                                          "anyOf": [
                                            {
                                              "description": "The maximum number of tokens the grader model may generate in its response.\n",
                                              "minimum": 1,
                                              "type": "integer"
                                            },
                                            {
                                              "type": "null"
                                            }
                                          ]
                                        },
                                        "reasoning_effort": {
                                          "anyOf": [
                                            {
                                              "default": "medium",
                                              "description": "Constrains effort on reasoning for\n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\nCurrently supported values are `minimal`, `low`, `medium`, and `high`. Reducing\nreasoning effort can result in faster responses and fewer tokens used\non reasoning in a response.\n",
                                              "enum": [
                                                "minimal",
                                                "low",
                                                "medium",
                                                "high"
                                              ],
                                              "type": "string"
                                            },
                                            {
                                              "type": "null"
                                            }
                                          ]
                                        },
                                        "seed": {
                                          "anyOf": [
                                            {
                                              "description": "A seed value to initialize the randomness, during sampling.\n",
                                              "type": "integer"
                                            },
                                            {
                                              "type": "null"
                                            }
                                          ]
                                        },
                                        "temperature": {
                                          "anyOf": [
                                            {
                                              "description": "A higher temperature increases randomness in the outputs.\n",
                                              "type": "number"
                                            },
                                            {
                                              "type": "null"
                                            }
                                          ]
                                        },
                                        "top_p": {
                                          "anyOf": [
                                            {
                                              "default": 1,
                                              "description": "An alternative to temperature for nucleus sampling; 1.0 includes all tokens.\n",
                                              "example": 1,
                                              "type": "number"
                                            },
                                            {
                                              "type": "null"
                                            }
                                          ]
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": {
                                      "description": "The object type, which is always `score_model`.",
                                      "enum": [
                                        "score_model"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "name",
                                    "input",
                                    "model"
                                  ],
                                  "title": "ScoreModelGrader",
                                  "type": "object"
                                },
                                {
                                  "description": "A LabelModelGrader object which uses a model to assign labels to each item\nin the evaluation.\n",
                                  "properties": {
                                    "input": {
                                      "items": {
                                        "description": "A message input to the model with a role indicating instruction following\nhierarchy. Instructions given with the `developer` or `system` role take\nprecedence over instructions given with the `user` role. Messages with the\n`assistant` role are presumed to have been generated by the model in previous\ninteractions.\n",
                                        "properties": {
                                          "content": {
                                            "anyOf": [
                                              {
                                                "description": "A text input to the model.\n",
                                                "title": "Text input",
                                                "type": "string"
                                              },
                                              {
                                                "description": "A text input to the model.",
                                                "properties": {
                                                  "text": {
                                                    "description": "The text input to the model.",
                                                    "type": "string"
                                                  },
                                                  "type": {
                                                    "default": "input_text",
                                                    "description": "The type of the input item. Always `input_text`.",
                                                    "enum": [
                                                      "input_text"
                                                    ],
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "type",
                                                  "text"
                                                ],
                                                "title": "Input text",
                                                "type": "object"
                                              },
                                              {
                                                "description": "A text output from the model.\n",
                                                "properties": {
                                                  "text": {
                                                    "description": "The text output from the model.\n",
                                                    "type": "string"
                                                  },
                                                  "type": {
                                                    "description": "The type of the output text. Always `output_text`.\n",
                                                    "enum": [
                                                      "output_text"
                                                    ],
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "type",
                                                  "text"
                                                ],
                                                "title": "Output text",
                                                "type": "object"
                                              },
                                              {
                                                "description": "An image input to the model.\n",
                                                "properties": {
                                                  "detail": {
                                                    "description": "The detail level of the image to be sent to the model. One of `high`, `low`, or `auto`. Defaults to `auto`.\n",
                                                    "type": "string"
                                                  },
                                                  "image_url": {
                                                    "description": "The URL of the image input.\n",
                                                    "type": "string"
                                                  },
                                                  "type": {
                                                    "description": "The type of the image input. Always `input_image`.\n",
                                                    "enum": [
                                                      "input_image"
                                                    ],
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "type",
                                                  "image_url"
                                                ],
                                                "title": "Input image",
                                                "type": "object"
                                              },
                                              {
                                                "description": "An audio input to the model.\n",
                                                "properties": {
                                                  "input_audio": {
                                                    "properties": {
                                                      "data": {
                                                        "description": "Base64-encoded audio data.\n",
                                                        "type": "string"
                                                      },
                                                      "format": {
                                                        "description": "The format of the audio data. Currently supported formats are `mp3` and\n`wav`.\n",
                                                        "enum": [
                                                          "mp3",
                                                          "wav"
                                                        ],
                                                        "type": "string"
                                                      }
                                                    },
                                                    "required": [
                                                      "data",
                                                      "format"
                                                    ],
                                                    "type": "object"
                                                  },
                                                  "type": {
                                                    "description": "The type of the input item. Always `input_audio`.\n",
                                                    "enum": [
                                                      "input_audio"
                                                    ],
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "type",
                                                  "input_audio"
                                                ],
                                                "title": "Input audio",
                                                "type": "object"
                                              },
                                              {
                                                "description": "A list of inputs, each of which may be either an input text, input image, or input audio object.\n",
                                                "title": "An array of Input text, Input image, and Input audio",
                                                "type": "array"
                                              }
                                            ],
                                            "description": "Inputs to the model - can contain template strings.\n"
                                          },
                                          "role": {
                                            "description": "The role of the message input. One of `user`, `assistant`, `system`, or\n`developer`.\n",
                                            "enum": [
                                              "user",
                                              "assistant",
                                              "system",
                                              "developer"
                                            ],
                                            "type": "string"
                                          },
                                          "type": {
                                            "description": "The type of the message input. Always `message`.\n",
                                            "enum": [
                                              "message"
                                            ],
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "role",
                                          "content"
                                        ],
                                        "title": "Eval message object",
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "labels": {
                                      "description": "The labels to assign to each item in the evaluation.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "model": {
                                      "description": "The model to use for the evaluation. Must support structured outputs.",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "The name of the grader.",
                                      "type": "string"
                                    },
                                    "passing_labels": {
                                      "description": "The labels that indicate a passing result. Must be a subset of labels.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "type": {
                                      "description": "The object type, which is always `label_model`.",
                                      "enum": [
                                        "label_model"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "model",
                                    "input",
                                    "passing_labels",
                                    "labels",
                                    "name"
                                  ],
                                  "title": "LabelModelGrader",
                                  "type": "object"
                                }
                              ]
                            },
                            "name": {
                              "description": "The name of the grader.",
                              "type": "string"
                            },
                            "type": {
                              "default": "multi",
                              "description": "The object type, which is always `multi`.",
                              "enum": [
                                "multi"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "name",
                            "type",
                            "graders",
                            "calculate_output"
                          ],
                          "title": "MultiGrader",
                          "type": "object"
                        }
                      ],
                      "description": "The grader used for the fine-tuning job.",
                      "type": "object"
                    },
                    "hyperparameters": {
                      "description": "The hyperparameters used for the reinforcement fine-tuning job.",
                      "properties": {
                        "batch_size": {
                          "anyOf": [
                            {
                              "enum": [
                                "auto"
                              ],
                              "type": "string"
                            },
                            {
                              "maximum": 256,
                              "minimum": 1,
                              "type": "integer"
                            }
                          ],
                          "default": "auto",
                          "description": "Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.\n"
                        },
                        "compute_multiplier": {
                          "anyOf": [
                            {
                              "enum": [
                                "auto"
                              ],
                              "type": "string"
                            },
                            {
                              "exclusiveMinimum": true,
                              "maximum": 10,
                              "minimum": 0.00001,
                              "type": "number"
                            }
                          ],
                          "description": "Multiplier on amount of compute used for exploring search space during training.\n"
                        },
                        "eval_interval": {
                          "anyOf": [
                            {
                              "enum": [
                                "auto"
                              ],
                              "type": "string"
                            },
                            {
                              "minimum": 1,
                              "type": "integer"
                            }
                          ],
                          "default": "auto",
                          "description": "The number of training steps between evaluation runs.\n"
                        },
                        "eval_samples": {
                          "anyOf": [
                            {
                              "enum": [
                                "auto"
                              ],
                              "type": "string"
                            },
                            {
                              "minimum": 1,
                              "type": "integer"
                            }
                          ],
                          "default": "auto",
                          "description": "Number of evaluation samples to generate per training step.\n"
                        },
                        "learning_rate_multiplier": {
                          "anyOf": [
                            {
                              "enum": [
                                "auto"
                              ],
                              "type": "string"
                            },
                            {
                              "exclusiveMinimum": true,
                              "minimum": 0,
                              "type": "number"
                            }
                          ],
                          "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.\n"
                        },
                        "n_epochs": {
                          "anyOf": [
                            {
                              "enum": [
                                "auto"
                              ],
                              "type": "string"
                            },
                            {
                              "maximum": 50,
                              "minimum": 1,
                              "type": "integer"
                            }
                          ],
                          "default": "auto",
                          "description": "The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.\n"
                        },
                        "reasoning_effort": {
                          "default": "default",
                          "description": "Level of reasoning effort.\n",
                          "enum": [
                            "default",
                            "low",
                            "medium",
                            "high"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "required": [
                    "grader"
                  ],
                  "type": "object"
                },
                "supervised": {
                  "description": "Configuration for the supervised fine-tuning method.",
                  "properties": {
                    "hyperparameters": {
                      "description": "The hyperparameters used for the fine-tuning job.",
                      "properties": {
                        "batch_size": {
                          "anyOf": [
                            {
                              "enum": [
                                "auto"
                              ],
                              "type": "string"
                            },
                            {
                              "maximum": 256,
                              "minimum": 1,
                              "type": "integer"
                            }
                          ],
                          "default": "auto",
                          "description": "Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.\n"
                        },
                        "learning_rate_multiplier": {
                          "anyOf": [
                            {
                              "enum": [
                                "auto"
                              ],
                              "type": "string"
                            },
                            {
                              "exclusiveMinimum": true,
                              "minimum": 0,
                              "type": "number"
                            }
                          ],
                          "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.\n"
                        },
                        "n_epochs": {
                          "anyOf": [
                            {
                              "enum": [
                                "auto"
                              ],
                              "type": "string"
                            },
                            {
                              "maximum": 50,
                              "minimum": 1,
                              "type": "integer"
                            }
                          ],
                          "default": "auto",
                          "description": "The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.\n"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "description": "The type of method. Is either `supervised`, `dpo`, or `reinforcement`.",
                  "enum": [
                    "supervised",
                    "dpo",
                    "reinforcement"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "type"
              ],
              "type": "object"
            },
            "model": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "enum": [
                    "babbage-002",
                    "davinci-002",
                    "gpt-3.5-turbo",
                    "gpt-4o-mini"
                  ],
                  "title": "Preset",
                  "type": "string"
                }
              ],
              "description": "The name of the model to fine-tune. You can select one of the\n[supported models](https://platform.openai.com/docs/guides/fine-tuning#which-models-can-be-fine-tuned).\n",
              "example": "gpt-4o-mini"
            },
            "seed": {
              "description": "The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases.\nIf a seed is not specified, one will be generated for you.\n",
              "example": 42,
              "maximum": 2147483647,
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            },
            "suffix": {
              "default": null,
              "description": "A string of up to 64 characters that will be added to your fine-tuned model name.\n\nFor example, a `suffix` of \"custom-model-name\" would produce a model name like `ft:gpt-4o-mini:openai:custom-model-name:7p4lURel`.\n",
              "maxLength": 64,
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "training_file": {
              "description": "The ID of an uploaded file that contains training data.\n\nSee [upload file](https://platform.openai.com/docs/api-reference/files/create) for how to upload a file.\n\nYour dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.\n\nThe contents of the file should differ depending on if the model uses the [chat](https://platform.openai.com/docs/api-reference/fine-tuning/chat-input), [completions](https://platform.openai.com/docs/api-reference/fine-tuning/completions-input) format, or if the fine-tuning method uses the [preference](https://platform.openai.com/docs/api-reference/fine-tuning/preference-input) format.\n\nSee the [fine-tuning guide](https://platform.openai.com/docs/guides/model-optimization) for more details.\n",
              "example": "file-abc123",
              "type": "string"
            },
            "validation_file": {
              "description": "The ID of an uploaded file that contains validation data.\n\nIf you provide this file, the data is used to generate validation\nmetrics periodically during fine-tuning. These metrics can be viewed in\nthe fine-tuning results file.\nThe same data should not be present in both train and validation files.\n\nYour dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.\n\nSee the [fine-tuning guide](https://platform.openai.com/docs/guides/model-optimization) for more details.\n",
              "example": "file-abc123",
              "nullable": true,
              "type": "string"
            }
          },
          "required": [
            "model",
            "training_file"
          ],
          "type": "object"
        }
      }
    },
    "required": true
  },
  "responses": {
    "200": {
      "content": {
        "application/json": {
          "schema": {
            "description": "The `fine_tuning.job` object represents a fine-tuning job that has been created through the API.\n",
            "properties": {
              "created_at": {
                "description": "The Unix timestamp (in seconds) for when the fine-tuning job was created.",
                "type": "integer"
              },
              "error": {
                "anyOf": [
                  {
                    "description": "For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.",
                    "properties": {
                      "code": {
                        "description": "A machine-readable error code.",
                        "type": "string"
                      },
                      "message": {
                        "description": "A human-readable error message.",
                        "type": "string"
                      },
                      "param": {
                        "anyOf": [
                          {
                            "description": "The parameter that was invalid, usually `training_file` or `validation_file`. This field will be null if the failure was not parameter-specific.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      }
                    },
                    "required": [
                      "code",
                      "message",
                      "param"
                    ],
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "estimated_finish": {
                "anyOf": [
                  {
                    "description": "The Unix timestamp (in seconds) for when the fine-tuning job is estimated to finish. The value will be null if the fine-tuning job is not running.",
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "fine_tuned_model": {
                "anyOf": [
                  {
                    "description": "The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.",
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "finished_at": {
                "anyOf": [
                  {
                    "description": "The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.",
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "hyperparameters": {
                "description": "The hyperparameters used for the fine-tuning job. This value will only be returned when running `supervised` jobs.",
                "properties": {
                  "batch_size": {
                    "anyOf": [
                      {
                        "anyOf": [
                          {
                            "enum": [
                              "auto"
                            ],
                            "type": "string"
                          },
                          {
                            "maximum": 256,
                            "minimum": 1,
                            "type": "integer"
                          }
                        ],
                        "default": "auto",
                        "description": "Number of examples in each batch. A larger batch size means that model parameters\nare updated less frequently, but with lower variance.\n",
                        "title": "Auto"
                      },
                      {
                        "title": "Manual",
                        "type": "null"
                      }
                    ]
                  },
                  "learning_rate_multiplier": {
                    "anyOf": [
                      {
                        "enum": [
                          "auto"
                        ],
                        "title": "Auto",
                        "type": "string"
                      },
                      {
                        "exclusiveMinimum": true,
                        "minimum": 0,
                        "type": "number"
                      }
                    ],
                    "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid\noverfitting.\n"
                  },
                  "n_epochs": {
                    "anyOf": [
                      {
                        "enum": [
                          "auto"
                        ],
                        "title": "Auto",
                        "type": "string"
                      },
                      {
                        "maximum": 50,
                        "minimum": 1,
                        "type": "integer"
                      }
                    ],
                    "default": "auto",
                    "description": "The number of epochs to train the model for. An epoch refers to one full cycle\nthrough the training dataset.\n"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "The object identifier, which can be referenced in the API endpoints.",
                "type": "string"
              },
              "integrations": {
                "anyOf": [
                  {
                    "description": "A list of integrations to enable for this fine-tuning job.",
                    "items": {
                      "anyOf": [
                        {
                          "properties": {
                            "type": {
                              "description": "The type of the integration being enabled for the fine-tuning job",
                              "enum": [
                                "wandb"
                              ],
                              "type": "string"
                            },
                            "wandb": {
                              "description": "The settings for your integration with Weights and Biases. This payload specifies the project that\nmetrics will be sent to. Optionally, you can set an explicit display name for your run, add tags\nto your run, and set a default entity (team, username, etc) to be associated with your run.\n",
                              "properties": {
                                "entity": {
                                  "anyOf": [
                                    {
                                      "description": "The entity to use for the run. This allows you to set the team or username of the WandB user that you would\nlike associated with the run. If not set, the default entity for the registered WandB API key is used.\n",
                                      "type": "string"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                },
                                "name": {
                                  "anyOf": [
                                    {
                                      "description": "A display name to set for the run. If not set, we will use the Job ID as the name.\n",
                                      "type": "string"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                },
                                "project": {
                                  "description": "The name of the project that the new run will be created under.\n",
                                  "example": "my-wandb-project",
                                  "type": "string"
                                },
                                "tags": {
                                  "description": "A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some\ndefault tags are generated by OpenAI: \"openai/finetune\", \"openai/{base-model}\", \"openai/{ftjob-abcdef}\".\n",
                                  "items": {
                                    "example": "custom-tag",
                                    "type": "string"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "project"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "type",
                            "wandb"
                          ],
                          "title": "Fine-Tuning Job Integration",
                          "type": "object"
                        }
                      ],
                      "discriminator": {
                        "propertyName": "type"
                      }
                    },
                    "maxItems": 5,
                    "type": "array"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "metadata": {
                "anyOf": [
                  {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "method": {
                "description": "The method used for fine-tuning.",
                "properties": {
                  "dpo": {
                    "description": "Configuration for the DPO fine-tuning method.",
                    "properties": {
                      "hyperparameters": {
                        "description": "The hyperparameters used for the DPO fine-tuning job.",
                        "properties": {
                          "batch_size": {
                            "anyOf": [
                              {
                                "enum": [
                                  "auto"
                                ],
                                "type": "string"
                              },
                              {
                                "maximum": 256,
                                "minimum": 1,
                                "type": "integer"
                              }
                            ],
                            "default": "auto",
                            "description": "Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.\n"
                          },
                          "beta": {
                            "anyOf": [
                              {
                                "enum": [
                                  "auto"
                                ],
                                "type": "string"
                              },
                              {
                                "exclusiveMinimum": true,
                                "maximum": 2,
                                "minimum": 0,
                                "type": "number"
                              }
                            ],
                            "description": "The beta value for the DPO method. A higher beta value will increase the weight of the penalty between the policy and reference model.\n"
                          },
                          "learning_rate_multiplier": {
                            "anyOf": [
                              {
                                "enum": [
                                  "auto"
                                ],
                                "type": "string"
                              },
                              {
                                "exclusiveMinimum": true,
                                "minimum": 0,
                                "type": "number"
                              }
                            ],
                            "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.\n"
                          },
                          "n_epochs": {
                            "anyOf": [
                              {
                                "enum": [
                                  "auto"
                                ],
                                "type": "string"
                              },
                              {
                                "maximum": 50,
                                "minimum": 1,
                                "type": "integer"
                              }
                            ],
                            "default": "auto",
                            "description": "The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.\n"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "reinforcement": {
                    "description": "Configuration for the reinforcement fine-tuning method.",
                    "properties": {
                      "grader": {
                        "anyOf": [
                          {
                            "description": "A StringCheckGrader object that performs a string comparison between input and reference using a specified operation.\n",
                            "properties": {
                              "input": {
                                "description": "The input text. This may include template strings.",
                                "type": "string"
                              },
                              "name": {
                                "description": "The name of the grader.",
                                "type": "string"
                              },
                              "operation": {
                                "description": "The string check operation to perform. One of `eq`, `ne`, `like`, or `ilike`.",
                                "enum": [
                                  "eq",
                                  "ne",
                                  "like",
                                  "ilike"
                                ],
                                "type": "string"
                              },
                              "reference": {
                                "description": "The reference text. This may include template strings.",
                                "type": "string"
                              },
                              "type": {
                                "description": "The object type, which is always `string_check`.",
                                "enum": [
                                  "string_check"
                                ],
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "name",
                              "input",
                              "reference",
                              "operation"
                            ],
                            "title": "StringCheckGrader",
                            "type": "object"
                          },
                          {
                            "description": "A TextSimilarityGrader object which grades text based on similarity metrics.\n",
                            "properties": {
                              "evaluation_metric": {
                                "description": "The evaluation metric to use. One of `cosine`, `fuzzy_match`, `bleu`, \n`gleu`, `meteor`, `rouge_1`, `rouge_2`, `rouge_3`, `rouge_4`, `rouge_5`, \nor `rouge_l`.\n",
                                "enum": [
                                  "cosine",
                                  "fuzzy_match",
                                  "bleu",
                                  "gleu",
                                  "meteor",
                                  "rouge_1",
                                  "rouge_2",
                                  "rouge_3",
                                  "rouge_4",
                                  "rouge_5",
                                  "rouge_l"
                                ],
                                "type": "string"
                              },
                              "input": {
                                "description": "The text being graded.",
                                "type": "string"
                              },
                              "name": {
                                "description": "The name of the grader.",
                                "type": "string"
                              },
                              "reference": {
                                "description": "The text being graded against.",
                                "type": "string"
                              },
                              "type": {
                                "default": "text_similarity",
                                "description": "The type of grader.",
                                "enum": [
                                  "text_similarity"
                                ],
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "name",
                              "input",
                              "reference",
                              "evaluation_metric"
                            ],
                            "title": "TextSimilarityGrader",
                            "type": "object"
                          },
                          {
                            "description": "A PythonGrader object that runs a python script on the input.\n",
                            "properties": {
                              "image_tag": {
                                "description": "The image tag to use for the python script.",
                                "type": "string"
                              },
                              "name": {
                                "description": "The name of the grader.",
                                "type": "string"
                              },
                              "source": {
                                "description": "The source code of the python script.",
                                "type": "string"
                              },
                              "type": {
                                "description": "The object type, which is always `python`.",
                                "enum": [
                                  "python"
                                ],
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "name",
                              "source"
                            ],
                            "title": "PythonGrader",
                            "type": "object"
                          },
                          {
                            "description": "A ScoreModelGrader object that uses a model to assign a score to the input.\n",
                            "properties": {
                              "input": {
                                "description": "The input text. This may include template strings.",
                                "items": {
                                  "description": "A message input to the model with a role indicating instruction following\nhierarchy. Instructions given with the `developer` or `system` role take\nprecedence over instructions given with the `user` role. Messages with the\n`assistant` role are presumed to have been generated by the model in previous\ninteractions.\n",
                                  "properties": {
                                    "content": {
                                      "anyOf": [
                                        {
                                          "description": "A text input to the model.\n",
                                          "title": "Text input",
                                          "type": "string"
                                        },
                                        {
                                          "description": "A text input to the model.",
                                          "properties": {
                                            "text": {
                                              "description": "The text input to the model.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "input_text",
                                              "description": "The type of the input item. Always `input_text`.",
                                              "enum": [
                                                "input_text"
                                              ],
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "text"
                                          ],
                                          "title": "Input text",
                                          "type": "object"
                                        },
                                        {
                                          "description": "A text output from the model.\n",
                                          "properties": {
                                            "text": {
                                              "description": "The text output from the model.\n",
                                              "type": "string"
                                            },
                                            "type": {
                                              "description": "The type of the output text. Always `output_text`.\n",
                                              "enum": [
                                                "output_text"
                                              ],
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "text"
                                          ],
                                          "title": "Output text",
                                          "type": "object"
                                        },
                                        {
                                          "description": "An image input to the model.\n",
                                          "properties": {
                                            "detail": {
                                              "description": "The detail level of the image to be sent to the model. One of `high`, `low`, or `auto`. Defaults to `auto`.\n",
                                              "type": "string"
                                            },
                                            "image_url": {
                                              "description": "The URL of the image input.\n",
                                              "type": "string"
                                            },
                                            "type": {
                                              "description": "The type of the image input. Always `input_image`.\n",
                                              "enum": [
                                                "input_image"
                                              ],
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "image_url"
                                          ],
                                          "title": "Input image",
                                          "type": "object"
                                        },
                                        {
                                          "description": "An audio input to the model.\n",
                                          "properties": {
                                            "input_audio": {
                                              "properties": {
                                                "data": {
                                                  "description": "Base64-encoded audio data.\n",
                                                  "type": "string"
                                                },
                                                "format": {
                                                  "description": "The format of the audio data. Currently supported formats are `mp3` and\n`wav`.\n",
                                                  "enum": [
                                                    "mp3",
                                                    "wav"
                                                  ],
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "data",
                                                "format"
                                              ],
                                              "type": "object"
                                            },
                                            "type": {
                                              "description": "The type of the input item. Always `input_audio`.\n",
                                              "enum": [
                                                "input_audio"
                                              ],
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "input_audio"
                                          ],
                                          "title": "Input audio",
                                          "type": "object"
                                        },
                                        {
                                          "description": "A list of inputs, each of which may be either an input text, input image, or input audio object.\n",
                                          "title": "An array of Input text, Input image, and Input audio",
                                          "type": "array"
                                        }
                                      ],
                                      "description": "Inputs to the model - can contain template strings.\n"
                                    },
                                    "role": {
                                      "description": "The role of the message input. One of `user`, `assistant`, `system`, or\n`developer`.\n",
                                      "enum": [
                                        "user",
                                        "assistant",
                                        "system",
                                        "developer"
                                      ],
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "The type of the message input. Always `message`.\n",
                                      "enum": [
                                        "message"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "role",
                                    "content"
                                  ],
                                  "title": "Eval message object",
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "model": {
                                "description": "The model to use for the evaluation.",
                                "type": "string"
                              },
                              "name": {
                                "description": "The name of the grader.",
                                "type": "string"
                              },
                              "range": {
                                "description": "The range of the score. Defaults to `[0, 1]`.",
                                "items": {
                                  "max_items": 2,
                                  "min_items": 2,
                                  "type": "number"
                                },
                                "type": "array"
                              },
                              "sampling_params": {
                                "description": "The sampling parameters for the model.",
                                "properties": {
                                  "max_completions_tokens": {
                                    "anyOf": [
                                      {
                                        "description": "The maximum number of tokens the grader model may generate in its response.\n",
                                        "minimum": 1,
                                        "type": "integer"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ]
                                  },
                                  "reasoning_effort": {
                                    "anyOf": [
                                      {
                                        "default": "medium",
                                        "description": "Constrains effort on reasoning for\n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\nCurrently supported values are `minimal`, `low`, `medium`, and `high`. Reducing\nreasoning effort can result in faster responses and fewer tokens used\non reasoning in a response.\n",
                                        "enum": [
                                          "minimal",
                                          "low",
                                          "medium",
                                          "high"
                                        ],
                                        "type": "string"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ]
                                  },
                                  "seed": {
                                    "anyOf": [
                                      {
                                        "description": "A seed value to initialize the randomness, during sampling.\n",
                                        "type": "integer"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ]
                                  },
                                  "temperature": {
                                    "anyOf": [
                                      {
                                        "description": "A higher temperature increases randomness in the outputs.\n",
                                        "type": "number"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ]
                                  },
                                  "top_p": {
                                    "anyOf": [
                                      {
                                        "default": 1,
                                        "description": "An alternative to temperature for nucleus sampling; 1.0 includes all tokens.\n",
                                        "example": 1,
                                        "type": "number"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ]
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "description": "The object type, which is always `score_model`.",
                                "enum": [
                                  "score_model"
                                ],
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "name",
                              "input",
                              "model"
                            ],
                            "title": "ScoreModelGrader",
                            "type": "object"
                          },
                          {
                            "description": "A MultiGrader object combines the output of multiple graders to produce a single score.",
                            "properties": {
                              "calculate_output": {
                                "description": "A formula to calculate the output based on grader results.",
                                "type": "string"
                              },
                              "graders": {
                                "anyOf": [
                                  {
                                    "description": "A StringCheckGrader object that performs a string comparison between input and reference using a specified operation.\n",
                                    "properties": {
                                      "input": {
                                        "description": "The input text. This may include template strings.",
                                        "type": "string"
                                      },
                                      "name": {
                                        "description": "The name of the grader.",
                                        "type": "string"
                                      },
                                      "operation": {
                                        "description": "The string check operation to perform. One of `eq`, `ne`, `like`, or `ilike`.",
                                        "enum": [
                                          "eq",
                                          "ne",
                                          "like",
                                          "ilike"
                                        ],
                                        "type": "string"
                                      },
                                      "reference": {
                                        "description": "The reference text. This may include template strings.",
                                        "type": "string"
                                      },
                                      "type": {
                                        "description": "The object type, which is always `string_check`.",
                                        "enum": [
                                          "string_check"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "name",
                                      "input",
                                      "reference",
                                      "operation"
                                    ],
                                    "title": "StringCheckGrader",
                                    "type": "object"
                                  },
                                  {
                                    "description": "A TextSimilarityGrader object which grades text based on similarity metrics.\n",
                                    "properties": {
                                      "evaluation_metric": {
                                        "description": "The evaluation metric to use. One of `cosine`, `fuzzy_match`, `bleu`, \n`gleu`, `meteor`, `rouge_1`, `rouge_2`, `rouge_3`, `rouge_4`, `rouge_5`, \nor `rouge_l`.\n",
                                        "enum": [
                                          "cosine",
                                          "fuzzy_match",
                                          "bleu",
                                          "gleu",
                                          "meteor",
                                          "rouge_1",
                                          "rouge_2",
                                          "rouge_3",
                                          "rouge_4",
                                          "rouge_5",
                                          "rouge_l"
                                        ],
                                        "type": "string"
                                      },
                                      "input": {
                                        "description": "The text being graded.",
                                        "type": "string"
                                      },
                                      "name": {
                                        "description": "The name of the grader.",
                                        "type": "string"
                                      },
                                      "reference": {
                                        "description": "The text being graded against.",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "text_similarity",
                                        "description": "The type of grader.",
                                        "enum": [
                                          "text_similarity"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "name",
                                      "input",
                                      "reference",
                                      "evaluation_metric"
                                    ],
                                    "title": "TextSimilarityGrader",
                                    "type": "object"
                                  },
                                  {
                                    "description": "A PythonGrader object that runs a python script on the input.\n",
                                    "properties": {
                                      "image_tag": {
                                        "description": "The image tag to use for the python script.",
                                        "type": "string"
                                      },
                                      "name": {
                                        "description": "The name of the grader.",
                                        "type": "string"
                                      },
                                      "source": {
                                        "description": "The source code of the python script.",
                                        "type": "string"
                                      },
                                      "type": {
                                        "description": "The object type, which is always `python`.",
                                        "enum": [
                                          "python"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "name",
                                      "source"
                                    ],
                                    "title": "PythonGrader",
                                    "type": "object"
                                  },
                                  {
                                    "description": "A ScoreModelGrader object that uses a model to assign a score to the input.\n",
                                    "properties": {
                                      "input": {
                                        "description": "The input text. This may include template strings.",
                                        "items": {
                                          "description": "A message input to the model with a role indicating instruction following\nhierarchy. Instructions given with the `developer` or `system` role take\nprecedence over instructions given with the `user` role. Messages with the\n`assistant` role are presumed to have been generated by the model in previous\ninteractions.\n",
                                          "properties": {
                                            "content": {
                                              "anyOf": [
                                                {
                                                  "description": "A text input to the model.\n",
                                                  "title": "Text input",
                                                  "type": "string"
                                                },
                                                {
                                                  "description": "A text input to the model.",
                                                  "properties": {
                                                    "text": {
                                                      "description": "The text input to the model.",
                                                      "type": "string"
                                                    },
                                                    "type": {
                                                      "default": "input_text",
                                                      "description": "The type of the input item. Always `input_text`.",
                                                      "enum": [
                                                        "input_text"
                                                      ],
                                                      "type": "string"
                                                    }
                                                  },
                                                  "required": [
                                                    "type",
                                                    "text"
                                                  ],
                                                  "title": "Input text",
                                                  "type": "object"
                                                },
                                                {
                                                  "description": "A text output from the model.\n",
                                                  "properties": {
                                                    "text": {
                                                      "description": "The text output from the model.\n",
                                                      "type": "string"
                                                    },
                                                    "type": {
                                                      "description": "The type of the output text. Always `output_text`.\n",
                                                      "enum": [
                                                        "output_text"
                                                      ],
                                                      "type": "string"
                                                    }
                                                  },
                                                  "required": [
                                                    "type",
                                                    "text"
                                                  ],
                                                  "title": "Output text",
                                                  "type": "object"
                                                },
                                                {
                                                  "description": "An image input to the model.\n",
                                                  "properties": {
                                                    "detail": {
                                                      "description": "The detail level of the image to be sent to the model. One of `high`, `low`, or `auto`. Defaults to `auto`.\n",
                                                      "type": "string"
                                                    },
                                                    "image_url": {
                                                      "description": "The URL of the image input.\n",
                                                      "type": "string"
                                                    },
                                                    "type": {
                                                      "description": "The type of the image input. Always `input_image`.\n",
                                                      "enum": [
                                                        "input_image"
                                                      ],
                                                      "type": "string"
                                                    }
                                                  },
                                                  "required": [
                                                    "type",
                                                    "image_url"
                                                  ],
                                                  "title": "Input image",
                                                  "type": "object"
                                                },
                                                {
                                                  "description": "An audio input to the model.\n",
                                                  "properties": {
                                                    "input_audio": {
                                                      "properties": {
                                                        "data": {
                                                          "description": "Base64-encoded audio data.\n",
                                                          "type": "string"
                                                        },
                                                        "format": {
                                                          "description": "The format of the audio data. Currently supported formats are `mp3` and\n`wav`.\n",
                                                          "enum": [
                                                            "mp3",
                                                            "wav"
                                                          ],
                                                          "type": "string"
                                                        }
                                                      },
                                                      "required": [
                                                        "data",
                                                        "format"
                                                      ],
                                                      "type": "object"
                                                    },
                                                    "type": {
                                                      "description": "The type of the input item. Always `input_audio`.\n",
                                                      "enum": [
                                                        "input_audio"
                                                      ],
                                                      "type": "string"
                                                    }
                                                  },
                                                  "required": [
                                                    "type",
                                                    "input_audio"
                                                  ],
                                                  "title": "Input audio",
                                                  "type": "object"
                                                },
                                                {
                                                  "description": "A list of inputs, each of which may be either an input text, input image, or input audio object.\n",
                                                  "title": "An array of Input text, Input image, and Input audio",
                                                  "type": "array"
                                                }
                                              ],
                                              "description": "Inputs to the model - can contain template strings.\n"
                                            },
                                            "role": {
                                              "description": "The role of the message input. One of `user`, `assistant`, `system`, or\n`developer`.\n",
                                              "enum": [
                                                "user",
                                                "assistant",
                                                "system",
                                                "developer"
                                              ],
                                              "type": "string"
                                            },
                                            "type": {
                                              "description": "The type of the message input. Always `message`.\n",
                                              "enum": [
                                                "message"
                                              ],
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "role",
                                            "content"
                                          ],
                                          "title": "Eval message object",
                                          "type": "object"
                                        },
                                        "type": "array"
                                      },
                                      "model": {
                                        "description": "The model to use for the evaluation.",
                                        "type": "string"
                                      },
                                      "name": {
                                        "description": "The name of the grader.",
                                        "type": "string"
                                      },
                                      "range": {
                                        "description": "The range of the score. Defaults to `[0, 1]`.",
                                        "items": {
                                          "max_items": 2,
                                          "min_items": 2,
                                          "type": "number"
                                        },
                                        "type": "array"
                                      },
                                      "sampling_params": {
                                        "description": "The sampling parameters for the model.",
                                        "properties": {
                                          "max_completions_tokens": {
                                            "anyOf": [
                                              {
                                                "description": "The maximum number of tokens the grader model may generate in its response.\n",
                                                "minimum": 1,
                                                "type": "integer"
                                              },
                                              {
                                                "type": "null"
                                              }
                                            ]
                                          },
                                          "reasoning_effort": {
                                            "anyOf": [
                                              {
                                                "default": "medium",
                                                "description": "Constrains effort on reasoning for\n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\nCurrently supported values are `minimal`, `low`, `medium`, and `high`. Reducing\nreasoning effort can result in faster responses and fewer tokens used\non reasoning in a response.\n",
                                                "enum": [
                                                  "minimal",
                                                  "low",
                                                  "medium",
                                                  "high"
                                                ],
                                                "type": "string"
                                              },
                                              {
                                                "type": "null"
                                              }
                                            ]
                                          },
                                          "seed": {
                                            "anyOf": [
                                              {
                                                "description": "A seed value to initialize the randomness, during sampling.\n",
                                                "type": "integer"
                                              },
                                              {
                                                "type": "null"
                                              }
                                            ]
                                          },
                                          "temperature": {
                                            "anyOf": [
                                              {
                                                "description": "A higher temperature increases randomness in the outputs.\n",
                                                "type": "number"
                                              },
                                              {
                                                "type": "null"
                                              }
                                            ]
                                          },
                                          "top_p": {
                                            "anyOf": [
                                              {
                                                "default": 1,
                                                "description": "An alternative to temperature for nucleus sampling; 1.0 includes all tokens.\n",
                                                "example": 1,
                                                "type": "number"
                                              },
                                              {
                                                "type": "null"
                                              }
                                            ]
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": {
                                        "description": "The object type, which is always `score_model`.",
                                        "enum": [
                                          "score_model"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "name",
                                      "input",
                                      "model"
                                    ],
                                    "title": "ScoreModelGrader",
                                    "type": "object"
                                  },
                                  {
                                    "description": "A LabelModelGrader object which uses a model to assign labels to each item\nin the evaluation.\n",
                                    "properties": {
                                      "input": {
                                        "items": {
                                          "description": "A message input to the model with a role indicating instruction following\nhierarchy. Instructions given with the `developer` or `system` role take\nprecedence over instructions given with the `user` role. Messages with the\n`assistant` role are presumed to have been generated by the model in previous\ninteractions.\n",
                                          "properties": {
                                            "content": {
                                              "anyOf": [
                                                {
                                                  "description": "A text input to the model.\n",
                                                  "title": "Text input",
                                                  "type": "string"
                                                },
                                                {
                                                  "description": "A text input to the model.",
                                                  "properties": {
                                                    "text": {
                                                      "description": "The text input to the model.",
                                                      "type": "string"
                                                    },
                                                    "type": {
                                                      "default": "input_text",
                                                      "description": "The type of the input item. Always `input_text`.",
                                                      "enum": [
                                                        "input_text"
                                                      ],
                                                      "type": "string"
                                                    }
                                                  },
                                                  "required": [
                                                    "type",
                                                    "text"
                                                  ],
                                                  "title": "Input text",
                                                  "type": "object"
                                                },
                                                {
                                                  "description": "A text output from the model.\n",
                                                  "properties": {
                                                    "text": {
                                                      "description": "The text output from the model.\n",
                                                      "type": "string"
                                                    },
                                                    "type": {
                                                      "description": "The type of the output text. Always `output_text`.\n",
                                                      "enum": [
                                                        "output_text"
                                                      ],
                                                      "type": "string"
                                                    }
                                                  },
                                                  "required": [
                                                    "type",
                                                    "text"
                                                  ],
                                                  "title": "Output text",
                                                  "type": "object"
                                                },
                                                {
                                                  "description": "An image input to the model.\n",
                                                  "properties": {
                                                    "detail": {
                                                      "description": "The detail level of the image to be sent to the model. One of `high`, `low`, or `auto`. Defaults to `auto`.\n",
                                                      "type": "string"
                                                    },
                                                    "image_url": {
                                                      "description": "The URL of the image input.\n",
                                                      "type": "string"
                                                    },
                                                    "type": {
                                                      "description": "The type of the image input. Always `input_image`.\n",
                                                      "enum": [
                                                        "input_image"
                                                      ],
                                                      "type": "string"
                                                    }
                                                  },
                                                  "required": [
                                                    "type",
                                                    "image_url"
                                                  ],
                                                  "title": "Input image",
                                                  "type": "object"
                                                },
                                                {
                                                  "description": "An audio input to the model.\n",
                                                  "properties": {
                                                    "input_audio": {
                                                      "properties": {
                                                        "data": {
                                                          "description": "Base64-encoded audio data.\n",
                                                          "type": "string"
                                                        },
                                                        "format": {
                                                          "description": "The format of the audio data. Currently supported formats are `mp3` and\n`wav`.\n",
                                                          "enum": [
                                                            "mp3",
                                                            "wav"
                                                          ],
                                                          "type": "string"
                                                        }
                                                      },
                                                      "required": [
                                                        "data",
                                                        "format"
                                                      ],
                                                      "type": "object"
                                                    },
                                                    "type": {
                                                      "description": "The type of the input item. Always `input_audio`.\n",
                                                      "enum": [
                                                        "input_audio"
                                                      ],
                                                      "type": "string"
                                                    }
                                                  },
                                                  "required": [
                                                    "type",
                                                    "input_audio"
                                                  ],
                                                  "title": "Input audio",
                                                  "type": "object"
                                                },
                                                {
                                                  "description": "A list of inputs, each of which may be either an input text, input image, or input audio object.\n",
                                                  "title": "An array of Input text, Input image, and Input audio",
                                                  "type": "array"
                                                }
                                              ],
                                              "description": "Inputs to the model - can contain template strings.\n"
                                            },
                                            "role": {
                                              "description": "The role of the message input. One of `user`, `assistant`, `system`, or\n`developer`.\n",
                                              "enum": [
                                                "user",
                                                "assistant",
                                                "system",
                                                "developer"
                                              ],
                                              "type": "string"
                                            },
                                            "type": {
                                              "description": "The type of the message input. Always `message`.\n",
                                              "enum": [
                                                "message"
                                              ],
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "role",
                                            "content"
                                          ],
                                          "title": "Eval message object",
                                          "type": "object"
                                        },
                                        "type": "array"
                                      },
                                      "labels": {
                                        "description": "The labels to assign to each item in the evaluation.",
                                        "items": {
                                          "type": "string"
                                        },
                                        "type": "array"
                                      },
                                      "model": {
                                        "description": "The model to use for the evaluation. Must support structured outputs.",
                                        "type": "string"
                                      },
                                      "name": {
                                        "description": "The name of the grader.",
                                        "type": "string"
                                      },
                                      "passing_labels": {
                                        "description": "The labels that indicate a passing result. Must be a subset of labels.",
                                        "items": {
                                          "type": "string"
                                        },
                                        "type": "array"
                                      },
                                      "type": {
                                        "description": "The object type, which is always `label_model`.",
                                        "enum": [
                                          "label_model"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "model",
                                      "input",
                                      "passing_labels",
                                      "labels",
                                      "name"
                                    ],
                                    "title": "LabelModelGrader",
                                    "type": "object"
                                  }
                                ]
                              },
                              "name": {
                                "description": "The name of the grader.",
                                "type": "string"
                              },
                              "type": {
                                "default": "multi",
                                "description": "The object type, which is always `multi`.",
                                "enum": [
                                  "multi"
                                ],
                                "type": "string"
                              }
                            },
                            "required": [
                              "name",
                              "type",
                              "graders",
                              "calculate_output"
                            ],
                            "title": "MultiGrader",
                            "type": "object"
                          }
                        ],
                        "description": "The grader used for the fine-tuning job.",
                        "type": "object"
                      },
                      "hyperparameters": {
                        "description": "The hyperparameters used for the reinforcement fine-tuning job.",
                        "properties": {
                          "batch_size": {
                            "anyOf": [
                              {
                                "enum": [
                                  "auto"
                                ],
                                "type": "string"
                              },
                              {
                                "maximum": 256,
                                "minimum": 1,
                                "type": "integer"
                              }
                            ],
                            "default": "auto",
                            "description": "Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.\n"
                          },
                          "compute_multiplier": {
                            "anyOf": [
                              {
                                "enum": [
                                  "auto"
                                ],
                                "type": "string"
                              },
                              {
                                "exclusiveMinimum": true,
                                "maximum": 10,
                                "minimum": 0.00001,
                                "type": "number"
                              }
                            ],
                            "description": "Multiplier on amount of compute used for exploring search space during training.\n"
                          },
                          "eval_interval": {
                            "anyOf": [
                              {
                                "enum": [
                                  "auto"
                                ],
                                "type": "string"
                              },
                              {
                                "minimum": 1,
                                "type": "integer"
                              }
                            ],
                            "default": "auto",
                            "description": "The number of training steps between evaluation runs.\n"
                          },
                          "eval_samples": {
                            "anyOf": [
                              {
                                "enum": [
                                  "auto"
                                ],
                                "type": "string"
                              },
                              {
                                "minimum": 1,
                                "type": "integer"
                              }
                            ],
                            "default": "auto",
                            "description": "Number of evaluation samples to generate per training step.\n"
                          },
                          "learning_rate_multiplier": {
                            "anyOf": [
                              {
                                "enum": [
                                  "auto"
                                ],
                                "type": "string"
                              },
                              {
                                "exclusiveMinimum": true,
                                "minimum": 0,
                                "type": "number"
                              }
                            ],
                            "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.\n"
                          },
                          "n_epochs": {
                            "anyOf": [
                              {
                                "enum": [
                                  "auto"
                                ],
                                "type": "string"
                              },
                              {
                                "maximum": 50,
                                "minimum": 1,
                                "type": "integer"
                              }
                            ],
                            "default": "auto",
                            "description": "The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.\n"
                          },
                          "reasoning_effort": {
                            "default": "default",
                            "description": "Level of reasoning effort.\n",
                            "enum": [
                              "default",
                              "low",
                              "medium",
                              "high"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "required": [
                      "grader"
                    ],
                    "type": "object"
                  },
                  "supervised": {
                    "description": "Configuration for the supervised fine-tuning method.",
                    "properties": {
                      "hyperparameters": {
                        "description": "The hyperparameters used for the fine-tuning job.",
                        "properties": {
                          "batch_size": {
                            "anyOf": [
                              {
                                "enum": [
                                  "auto"
                                ],
                                "type": "string"
                              },
                              {
                                "maximum": 256,
                                "minimum": 1,
                                "type": "integer"
                              }
                            ],
                            "default": "auto",
                            "description": "Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.\n"
                          },
                          "learning_rate_multiplier": {
                            "anyOf": [
                              {
                                "enum": [
                                  "auto"
                                ],
                                "type": "string"
                              },
                              {
                                "exclusiveMinimum": true,
                                "minimum": 0,
                                "type": "number"
                              }
                            ],
                            "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.\n"
                          },
                          "n_epochs": {
                            "anyOf": [
                              {
                                "enum": [
                                  "auto"
                                ],
                                "type": "string"
                              },
                              {
                                "maximum": 50,
                                "minimum": 1,
                                "type": "integer"
                              }
                            ],
                            "default": "auto",
                            "description": "The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.\n"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "description": "The type of method. Is either `supervised`, `dpo`, or `reinforcement`.",
                    "enum": [
                      "supervised",
                      "dpo",
                      "reinforcement"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ],
                "type": "object"
              },
              "model": {
                "description": "The base model that is being fine-tuned.",
                "type": "string"
              },
              "object": {
                "description": "The object type, which is always \"fine_tuning.job\".",
                "enum": [
                  "fine_tuning.job"
                ],
                "type": "string"
              },
              "organization_id": {
                "description": "The organization that owns the fine-tuning job.",
                "type": "string"
              },
              "result_files": {
                "description": "The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](https://platform.openai.com/docs/api-reference/files/retrieve-contents).",
                "items": {
                  "example": "file-abc123",
                  "type": "string"
                },
                "type": "array"
              },
              "seed": {
                "description": "The seed used for the fine-tuning job.",
                "type": "integer"
              },
              "status": {
                "description": "The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.",
                "enum": [
                  "validating_files",
                  "queued",
                  "running",
                  "succeeded",
                  "failed",
                  "cancelled"
                ],
                "type": "string"
              },
              "trained_tokens": {
                "anyOf": [
                  {
                    "description": "The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.",
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "training_file": {
                "description": "The file ID used for training. You can retrieve the training data with the [Files API](https://platform.openai.com/docs/api-reference/files/retrieve-contents).",
                "type": "string"
              },
              "validation_file": {
                "anyOf": [
                  {
                    "description": "The file ID used for validation. You can retrieve the validation results with the [Files API](https://platform.openai.com/docs/api-reference/files/retrieve-contents).",
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "created_at",
              "error",
              "finished_at",
              "fine_tuned_model",
              "hyperparameters",
              "id",
              "model",
              "object",
              "organization_id",
              "result_files",
              "status",
              "trained_tokens",
              "training_file",
              "validation_file",
              "seed"
            ],
            "title": "FineTuningJob",
            "type": "object"
          }
        }
      },
      "description": "OK"
    }
  },
  "summary": "Create fine-tuning job",
  "tags": [
    "Fine-tuning"
  ]
}
