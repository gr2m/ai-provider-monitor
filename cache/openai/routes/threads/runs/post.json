{
  "description": "Create a thread and run it in one request.",
  "operationId": "createThreadAndRun",
  "requestBody": {
    "content": {
      "application/json": {
        "schema": {
          "additionalProperties": false,
          "properties": {
            "assistant_id": {
              "description": "The ID of the [assistant](https://platform.openai.com/docs/api-reference/assistants) to use to execute this run.",
              "type": "string"
            },
            "instructions": {
              "description": "Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.",
              "nullable": true,
              "type": "string"
            },
            "max_completion_tokens": {
              "description": "The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n",
              "minimum": 256,
              "nullable": true,
              "type": "integer"
            },
            "max_prompt_tokens": {
              "description": "The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n",
              "minimum": 256,
              "nullable": true,
              "type": "integer"
            },
            "metadata": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ]
            },
            "model": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "enum": [
                    "gpt-5",
                    "gpt-5-mini",
                    "gpt-5-nano",
                    "gpt-5-2025-08-07",
                    "gpt-5-mini-2025-08-07",
                    "gpt-5-nano-2025-08-07",
                    "gpt-4.1",
                    "gpt-4.1-mini",
                    "gpt-4.1-nano",
                    "gpt-4.1-2025-04-14",
                    "gpt-4.1-mini-2025-04-14",
                    "gpt-4.1-nano-2025-04-14",
                    "gpt-4o",
                    "gpt-4o-2024-11-20",
                    "gpt-4o-2024-08-06",
                    "gpt-4o-2024-05-13",
                    "gpt-4o-mini",
                    "gpt-4o-mini-2024-07-18",
                    "gpt-4.5-preview",
                    "gpt-4.5-preview-2025-02-27",
                    "gpt-4-turbo",
                    "gpt-4-turbo-2024-04-09",
                    "gpt-4-0125-preview",
                    "gpt-4-turbo-preview",
                    "gpt-4-1106-preview",
                    "gpt-4-vision-preview",
                    "gpt-4",
                    "gpt-4-0314",
                    "gpt-4-0613",
                    "gpt-4-32k",
                    "gpt-4-32k-0314",
                    "gpt-4-32k-0613",
                    "gpt-3.5-turbo",
                    "gpt-3.5-turbo-16k",
                    "gpt-3.5-turbo-0613",
                    "gpt-3.5-turbo-1106",
                    "gpt-3.5-turbo-0125",
                    "gpt-3.5-turbo-16k-0613"
                  ],
                  "type": "string"
                }
              ],
              "description": "The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.",
              "nullable": true
            },
            "parallel_tool_calls": {
              "default": true,
              "description": "Whether to enable [parallel function calling](https://platform.openai.com/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.",
              "type": "boolean"
            },
            "response_format": {
              "anyOf": [
                {
                  "description": "`auto` is the default value\n",
                  "enum": [
                    "auto"
                  ],
                  "type": "string"
                },
                {
                  "description": "Default response format. Used to generate text responses.\n",
                  "properties": {
                    "type": {
                      "description": "The type of response format being defined. Always `text`.",
                      "enum": [
                        "text"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "title": "Text",
                  "type": "object"
                },
                {
                  "description": "JSON object response format. An older method of generating JSON responses.\nUsing `json_schema` is recommended for models that support it. Note that the\nmodel will not generate JSON without a system or user message instructing it\nto do so.\n",
                  "properties": {
                    "type": {
                      "description": "The type of response format being defined. Always `json_object`.",
                      "enum": [
                        "json_object"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "title": "JSON object",
                  "type": "object"
                },
                {
                  "description": "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs).\n",
                  "properties": {
                    "json_schema": {
                      "description": "Structured Outputs configuration options, including a JSON Schema.\n",
                      "properties": {
                        "description": {
                          "description": "A description of what the response format is for, used by the model to\ndetermine how to respond in the format.\n",
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64.\n",
                          "type": "string"
                        },
                        "schema": {
                          "additionalProperties": true,
                          "description": "The schema for the response format, described as a JSON Schema object.\nLearn how to build JSON schemas [here](https://json-schema.org/).\n",
                          "title": "JSON schema",
                          "type": "object"
                        },
                        "strict": {
                          "anyOf": [
                            {
                              "default": false,
                              "description": "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](https://platform.openai.com/docs/guides/structured-outputs).\n",
                              "type": "boolean"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "title": "JSON schema",
                      "type": "object"
                    },
                    "type": {
                      "description": "The type of response format being defined. Always `json_schema`.",
                      "enum": [
                        "json_schema"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "type",
                    "json_schema"
                  ],
                  "title": "JSON schema",
                  "type": "object"
                }
              ],
              "description": "Specifies the format that the model must output. Compatible with [GPT-4o](https://platform.openai.com/docs/models#gpt-4o), [GPT-4 Turbo](https://platform.openai.com/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n",
              "nullable": true
            },
            "stream": {
              "description": "If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.\n",
              "nullable": true,
              "type": "boolean"
            },
            "temperature": {
              "default": 1,
              "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n",
              "example": 1,
              "maximum": 2,
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "thread": {
              "additionalProperties": false,
              "description": "Options to create a new thread. If no thread is provided when running a\nrequest, an empty thread will be created.\n",
              "properties": {
                "messages": {
                  "description": "A list of [messages](https://platform.openai.com/docs/api-reference/messages) to start the thread with.",
                  "items": {
                    "additionalProperties": false,
                    "properties": {
                      "attachments": {
                        "anyOf": [
                          {
                            "description": "A list of files attached to the message, and the tools they should be added to.",
                            "items": {
                              "properties": {
                                "file_id": {
                                  "description": "The ID of the file to attach to the message.",
                                  "type": "string"
                                },
                                "tools": {
                                  "description": "The tools to add this file to.",
                                  "items": {
                                    "anyOf": [
                                      {
                                        "properties": {
                                          "type": {
                                            "description": "The type of tool being defined: `code_interpreter`",
                                            "enum": [
                                              "code_interpreter"
                                            ],
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "type"
                                        ],
                                        "title": "Code interpreter tool",
                                        "type": "object"
                                      },
                                      {
                                        "properties": {
                                          "type": {
                                            "description": "The type of tool being defined: `file_search`",
                                            "enum": [
                                              "file_search"
                                            ],
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "type"
                                        ],
                                        "title": "AssistantToolsFileSearchTypeOnly",
                                        "type": "object"
                                      }
                                    ],
                                    "discriminator": {
                                      "propertyName": "type"
                                    }
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            },
                            "required": [
                              "file_id",
                              "tools"
                            ],
                            "type": "array"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "content": {
                        "anyOf": [
                          {
                            "description": "The text contents of the message.",
                            "title": "Text content",
                            "type": "string"
                          },
                          {
                            "description": "An array of content parts with a defined type, each can be of type `text` or images can be passed with `image_url` or `image_file`. Image types are only supported on [Vision-compatible models](https://platform.openai.com/docs/models).",
                            "items": {
                              "anyOf": [
                                {
                                  "description": "References an image [File](https://platform.openai.com/docs/api-reference/files) in the content of a message.",
                                  "properties": {
                                    "image_file": {
                                      "properties": {
                                        "detail": {
                                          "default": "auto",
                                          "description": "Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.",
                                          "enum": [
                                            "auto",
                                            "low",
                                            "high"
                                          ],
                                          "type": "string"
                                        },
                                        "file_id": {
                                          "description": "The [File](https://platform.openai.com/docs/api-reference/files) ID of the image in the message content. Set `purpose=\"vision\"` when uploading the File if you need to later display the file content.",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "file_id"
                                      ],
                                      "type": "object"
                                    },
                                    "type": {
                                      "description": "Always `image_file`.",
                                      "enum": [
                                        "image_file"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "image_file"
                                  ],
                                  "title": "Image file",
                                  "type": "object"
                                },
                                {
                                  "description": "References an image URL in the content of a message.",
                                  "properties": {
                                    "image_url": {
                                      "properties": {
                                        "detail": {
                                          "default": "auto",
                                          "description": "Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`. Default value is `auto`",
                                          "enum": [
                                            "auto",
                                            "low",
                                            "high"
                                          ],
                                          "type": "string"
                                        },
                                        "url": {
                                          "description": "The external URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp.",
                                          "format": "uri",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "url"
                                      ],
                                      "type": "object"
                                    },
                                    "type": {
                                      "description": "The type of the content part.",
                                      "enum": [
                                        "image_url"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "image_url"
                                  ],
                                  "title": "Image URL",
                                  "type": "object"
                                },
                                {
                                  "description": "The text content that is part of a message.",
                                  "properties": {
                                    "text": {
                                      "description": "Text content to be sent to the model",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "Always `text`.",
                                      "enum": [
                                        "text"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "text"
                                  ],
                                  "title": "Text",
                                  "type": "object"
                                }
                              ],
                              "discriminator": {
                                "propertyName": "type"
                              }
                            },
                            "minItems": 1,
                            "title": "Array of content parts",
                            "type": "array"
                          }
                        ]
                      },
                      "metadata": {
                        "anyOf": [
                          {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                            "type": "object"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "role": {
                        "description": "The role of the entity that is creating the message. Allowed values include:\n- `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.\n- `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.\n",
                        "enum": [
                          "user",
                          "assistant"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "role",
                      "content"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "metadata": {
                  "anyOf": [
                    {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                      "type": "object"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "tool_resources": {
                  "anyOf": [
                    {
                      "description": "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
                      "properties": {
                        "code_interpreter": {
                          "properties": {
                            "file_ids": {
                              "default": [],
                              "description": "A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n",
                              "items": {
                                "type": "string"
                              },
                              "maxItems": 20,
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "file_search": {
                          "anyOf": [
                            {
                              "required": [
                                "vector_store_ids"
                              ]
                            },
                            {
                              "required": [
                                "vector_stores"
                              ]
                            }
                          ],
                          "properties": {
                            "vector_store_ids": {
                              "description": "The [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.\n",
                              "items": {
                                "type": "string"
                              },
                              "maxItems": 1,
                              "type": "array"
                            },
                            "vector_stores": {
                              "description": "A helper to create a [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) with file_ids and attach it to this thread. There can be a maximum of 1 vector store attached to the thread.\n",
                              "items": {
                                "properties": {
                                  "chunking_strategy": {
                                    "anyOf": [
                                      {
                                        "additionalProperties": false,
                                        "description": "The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.",
                                        "properties": {
                                          "type": {
                                            "description": "Always `auto`.",
                                            "enum": [
                                              "auto"
                                            ],
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "type"
                                        ],
                                        "title": "Auto Chunking Strategy",
                                        "type": "object"
                                      },
                                      {
                                        "additionalProperties": false,
                                        "properties": {
                                          "static": {
                                            "additionalProperties": false,
                                            "properties": {
                                              "chunk_overlap_tokens": {
                                                "description": "The number of tokens that overlap between chunks. The default value is `400`.\n\nNote that the overlap must not exceed half of `max_chunk_size_tokens`.\n",
                                                "type": "integer"
                                              },
                                              "max_chunk_size_tokens": {
                                                "description": "The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`.",
                                                "maximum": 4096,
                                                "minimum": 100,
                                                "type": "integer"
                                              }
                                            },
                                            "required": [
                                              "max_chunk_size_tokens",
                                              "chunk_overlap_tokens"
                                            ],
                                            "type": "object"
                                          },
                                          "type": {
                                            "description": "Always `static`.",
                                            "enum": [
                                              "static"
                                            ],
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "type",
                                          "static"
                                        ],
                                        "title": "Static Chunking Strategy",
                                        "type": "object"
                                      }
                                    ],
                                    "description": "The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.",
                                    "discriminator": {
                                      "propertyName": "type"
                                    },
                                    "type": "object"
                                  },
                                  "file_ids": {
                                    "description": "A list of [file](https://platform.openai.com/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.\n",
                                    "items": {
                                      "type": "string"
                                    },
                                    "maxItems": 10000,
                                    "type": "array"
                                  },
                                  "metadata": {
                                    "anyOf": [
                                      {
                                        "additionalProperties": {
                                          "type": "string"
                                        },
                                        "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                                        "type": "object"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ]
                                  }
                                },
                                "type": "object"
                              },
                              "maxItems": 1,
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "type": "object"
            },
            "tool_choice": {
              "allOf": [
                {
                  "anyOf": [
                    {
                      "description": "`none` means the model will not call any tools and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools before responding to the user.\n",
                      "enum": [
                        "none",
                        "auto",
                        "required"
                      ],
                      "title": "Auto",
                      "type": "string"
                    },
                    {
                      "description": "Specifies a tool the model should use. Use to force the model to call a specific tool.",
                      "properties": {
                        "function": {
                          "properties": {
                            "name": {
                              "description": "The name of the function to call.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "name"
                          ],
                          "type": "object"
                        },
                        "type": {
                          "description": "The type of the tool. If type is `function`, the function name must be set",
                          "enum": [
                            "function",
                            "code_interpreter",
                            "file_search"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    }
                  ],
                  "description": "Controls which (if any) tool is called by the model.\n`none` means the model will not call any tools and instead generates a message.\n`auto` is the default value and means the model can pick between generating a message or calling one or more tools.\n`required` means the model must call one or more tools before responding to the user.\nSpecifying a particular tool like `{\"type\": \"file_search\"}` or `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.\n"
                },
                {
                  "nullable": true
                }
              ]
            },
            "tool_resources": {
              "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
              "nullable": true,
              "properties": {
                "code_interpreter": {
                  "properties": {
                    "file_ids": {
                      "default": [],
                      "description": "A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n",
                      "items": {
                        "type": "string"
                      },
                      "maxItems": 20,
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "file_search": {
                  "properties": {
                    "vector_store_ids": {
                      "description": "The ID of the [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n",
                      "items": {
                        "type": "string"
                      },
                      "maxItems": 1,
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "tools": {
              "description": "Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.",
              "items": {
                "anyOf": [
                  {
                    "properties": {
                      "type": {
                        "description": "The type of tool being defined: `code_interpreter`",
                        "enum": [
                          "code_interpreter"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "title": "Code interpreter tool",
                    "type": "object"
                  },
                  {
                    "properties": {
                      "file_search": {
                        "description": "Overrides for the file search tool.",
                        "properties": {
                          "max_num_results": {
                            "description": "The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.\n\nNote that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n",
                            "maximum": 50,
                            "minimum": 1,
                            "type": "integer"
                          },
                          "ranking_options": {
                            "description": "The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.\n\nSee the [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n",
                            "properties": {
                              "ranker": {
                                "description": "The ranker to use for the file search. If not specified will use the `auto` ranker.",
                                "enum": [
                                  "auto",
                                  "default_2024_08_21"
                                ],
                                "type": "string"
                              },
                              "score_threshold": {
                                "description": "The score threshold for the file search. All values must be a floating point number between 0 and 1.",
                                "maximum": 1,
                                "minimum": 0,
                                "type": "number"
                              }
                            },
                            "required": [
                              "score_threshold"
                            ],
                            "title": "File search tool call ranking options",
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of tool being defined: `file_search`",
                        "enum": [
                          "file_search"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "title": "FileSearch tool",
                    "type": "object"
                  },
                  {
                    "properties": {
                      "function": {
                        "properties": {
                          "description": {
                            "description": "A description of what the function does, used by the model to choose when and how to call the function.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.",
                            "type": "string"
                          },
                          "parameters": {
                            "additionalProperties": true,
                            "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list.",
                            "type": "object"
                          },
                          "strict": {
                            "anyOf": [
                              {
                                "default": false,
                                "description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](https://platform.openai.com/docs/guides/function-calling).",
                                "type": "boolean"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of tool being defined: `function`",
                        "enum": [
                          "function"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "function"
                    ],
                    "title": "Function tool",
                    "type": "object"
                  }
                ],
                "discriminator": {
                  "propertyName": "type"
                }
              },
              "maxItems": 20,
              "nullable": true,
              "type": "array"
            },
            "top_p": {
              "default": 1,
              "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n",
              "example": 1,
              "maximum": 1,
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "truncation_strategy": {
              "allOf": [
                {
                  "description": "Controls for how a thread will be truncated prior to the run. Use this to control the initial context window of the run.",
                  "properties": {
                    "last_messages": {
                      "anyOf": [
                        {
                          "description": "The number of most recent messages from the thread when constructing the context for the run.",
                          "minimum": 1,
                          "type": "integer"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    },
                    "type": {
                      "description": "The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.",
                      "enum": [
                        "auto",
                        "last_messages"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "title": "Thread Truncation Controls",
                  "type": "object"
                },
                {
                  "nullable": true
                }
              ]
            }
          },
          "required": [
            "assistant_id"
          ],
          "type": "object"
        }
      }
    },
    "required": true
  },
  "responses": {
    "200": {
      "content": {
        "application/json": {
          "schema": {
            "description": "Represents an execution run on a [thread](https://platform.openai.com/docs/api-reference/threads).",
            "properties": {
              "assistant_id": {
                "description": "The ID of the [assistant](https://platform.openai.com/docs/api-reference/assistants) used for execution of this run.",
                "type": "string"
              },
              "cancelled_at": {
                "description": "The Unix timestamp (in seconds) for when the run was cancelled.",
                "nullable": true,
                "type": "integer"
              },
              "completed_at": {
                "description": "The Unix timestamp (in seconds) for when the run was completed.",
                "nullable": true,
                "type": "integer"
              },
              "created_at": {
                "description": "The Unix timestamp (in seconds) for when the run was created.",
                "type": "integer"
              },
              "expires_at": {
                "description": "The Unix timestamp (in seconds) for when the run will expire.",
                "nullable": true,
                "type": "integer"
              },
              "failed_at": {
                "description": "The Unix timestamp (in seconds) for when the run failed.",
                "nullable": true,
                "type": "integer"
              },
              "id": {
                "description": "The identifier, which can be referenced in API endpoints.",
                "type": "string"
              },
              "incomplete_details": {
                "description": "Details on why the run is incomplete. Will be `null` if the run is not incomplete.",
                "nullable": true,
                "properties": {
                  "reason": {
                    "description": "The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.",
                    "enum": [
                      "max_completion_tokens",
                      "max_prompt_tokens"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "instructions": {
                "description": "The instructions that the [assistant](https://platform.openai.com/docs/api-reference/assistants) used for this run.",
                "type": "string"
              },
              "last_error": {
                "description": "The last error associated with this run. Will be `null` if there are no errors.",
                "nullable": true,
                "properties": {
                  "code": {
                    "description": "One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.",
                    "enum": [
                      "server_error",
                      "rate_limit_exceeded",
                      "invalid_prompt"
                    ],
                    "type": "string"
                  },
                  "message": {
                    "description": "A human-readable description of the error.",
                    "type": "string"
                  }
                },
                "required": [
                  "code",
                  "message"
                ],
                "type": "object"
              },
              "max_completion_tokens": {
                "description": "The maximum number of completion tokens specified to have been used over the course of the run.\n",
                "minimum": 256,
                "nullable": true,
                "type": "integer"
              },
              "max_prompt_tokens": {
                "description": "The maximum number of prompt tokens specified to have been used over the course of the run.\n",
                "minimum": 256,
                "nullable": true,
                "type": "integer"
              },
              "metadata": {
                "anyOf": [
                  {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "model": {
                "description": "The model that the [assistant](https://platform.openai.com/docs/api-reference/assistants) used for this run.",
                "type": "string"
              },
              "object": {
                "description": "The object type, which is always `thread.run`.",
                "enum": [
                  "thread.run"
                ],
                "type": "string"
              },
              "parallel_tool_calls": {
                "default": true,
                "description": "Whether to enable [parallel function calling](https://platform.openai.com/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.",
                "type": "boolean"
              },
              "required_action": {
                "description": "Details on the action required to continue the run. Will be `null` if no action is required.",
                "nullable": true,
                "properties": {
                  "submit_tool_outputs": {
                    "description": "Details on the tool outputs needed for this run to continue.",
                    "properties": {
                      "tool_calls": {
                        "description": "A list of the relevant tool calls.",
                        "items": {
                          "description": "Tool call objects",
                          "properties": {
                            "function": {
                              "description": "The function definition.",
                              "properties": {
                                "arguments": {
                                  "description": "The arguments that the model expects you to pass to the function.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "The name of the function.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "name",
                                "arguments"
                              ],
                              "type": "object"
                            },
                            "id": {
                              "description": "The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](https://platform.openai.com/docs/api-reference/runs/submitToolOutputs) endpoint.",
                              "type": "string"
                            },
                            "type": {
                              "description": "The type of tool call the output is required for. For now, this is always `function`.",
                              "enum": [
                                "function"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "type",
                            "function"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "tool_calls"
                    ],
                    "type": "object"
                  },
                  "type": {
                    "description": "For now, this is always `submit_tool_outputs`.",
                    "enum": [
                      "submit_tool_outputs"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "submit_tool_outputs"
                ],
                "type": "object"
              },
              "response_format": {
                "anyOf": [
                  {
                    "description": "`auto` is the default value\n",
                    "enum": [
                      "auto"
                    ],
                    "type": "string"
                  },
                  {
                    "description": "Default response format. Used to generate text responses.\n",
                    "properties": {
                      "type": {
                        "description": "The type of response format being defined. Always `text`.",
                        "enum": [
                          "text"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "title": "Text",
                    "type": "object"
                  },
                  {
                    "description": "JSON object response format. An older method of generating JSON responses.\nUsing `json_schema` is recommended for models that support it. Note that the\nmodel will not generate JSON without a system or user message instructing it\nto do so.\n",
                    "properties": {
                      "type": {
                        "description": "The type of response format being defined. Always `json_object`.",
                        "enum": [
                          "json_object"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "title": "JSON object",
                    "type": "object"
                  },
                  {
                    "description": "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs).\n",
                    "properties": {
                      "json_schema": {
                        "description": "Structured Outputs configuration options, including a JSON Schema.\n",
                        "properties": {
                          "description": {
                            "description": "A description of what the response format is for, used by the model to\ndetermine how to respond in the format.\n",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64.\n",
                            "type": "string"
                          },
                          "schema": {
                            "additionalProperties": true,
                            "description": "The schema for the response format, described as a JSON Schema object.\nLearn how to build JSON schemas [here](https://json-schema.org/).\n",
                            "title": "JSON schema",
                            "type": "object"
                          },
                          "strict": {
                            "anyOf": [
                              {
                                "default": false,
                                "description": "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](https://platform.openai.com/docs/guides/structured-outputs).\n",
                                "type": "boolean"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "title": "JSON schema",
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of response format being defined. Always `json_schema`.",
                        "enum": [
                          "json_schema"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "json_schema"
                    ],
                    "title": "JSON schema",
                    "type": "object"
                  }
                ],
                "description": "Specifies the format that the model must output. Compatible with [GPT-4o](https://platform.openai.com/docs/models#gpt-4o), [GPT-4 Turbo](https://platform.openai.com/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n",
                "nullable": true
              },
              "started_at": {
                "description": "The Unix timestamp (in seconds) for when the run was started.",
                "nullable": true,
                "type": "integer"
              },
              "status": {
                "description": "The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`, or `expired`.",
                "enum": [
                  "queued",
                  "in_progress",
                  "requires_action",
                  "cancelling",
                  "cancelled",
                  "failed",
                  "completed",
                  "incomplete",
                  "expired"
                ],
                "type": "string"
              },
              "temperature": {
                "description": "The sampling temperature used for this run. If not set, defaults to 1.",
                "nullable": true,
                "type": "number"
              },
              "thread_id": {
                "description": "The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) that was executed on as a part of this run.",
                "type": "string"
              },
              "tool_choice": {
                "allOf": [
                  {
                    "anyOf": [
                      {
                        "description": "`none` means the model will not call any tools and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools before responding to the user.\n",
                        "enum": [
                          "none",
                          "auto",
                          "required"
                        ],
                        "title": "Auto",
                        "type": "string"
                      },
                      {
                        "description": "Specifies a tool the model should use. Use to force the model to call a specific tool.",
                        "properties": {
                          "function": {
                            "properties": {
                              "name": {
                                "description": "The name of the function to call.",
                                "type": "string"
                              }
                            },
                            "required": [
                              "name"
                            ],
                            "type": "object"
                          },
                          "type": {
                            "description": "The type of the tool. If type is `function`, the function name must be set",
                            "enum": [
                              "function",
                              "code_interpreter",
                              "file_search"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "type": "object"
                      }
                    ],
                    "description": "Controls which (if any) tool is called by the model.\n`none` means the model will not call any tools and instead generates a message.\n`auto` is the default value and means the model can pick between generating a message or calling one or more tools.\n`required` means the model must call one or more tools before responding to the user.\nSpecifying a particular tool like `{\"type\": \"file_search\"}` or `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.\n"
                  },
                  {
                    "nullable": true
                  }
                ]
              },
              "tools": {
                "default": [],
                "description": "The list of tools that the [assistant](https://platform.openai.com/docs/api-reference/assistants) used for this run.",
                "items": {
                  "anyOf": [
                    {
                      "properties": {
                        "type": {
                          "description": "The type of tool being defined: `code_interpreter`",
                          "enum": [
                            "code_interpreter"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "title": "Code interpreter tool",
                      "type": "object"
                    },
                    {
                      "properties": {
                        "file_search": {
                          "description": "Overrides for the file search tool.",
                          "properties": {
                            "max_num_results": {
                              "description": "The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.\n\nNote that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n",
                              "maximum": 50,
                              "minimum": 1,
                              "type": "integer"
                            },
                            "ranking_options": {
                              "description": "The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.\n\nSee the [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n",
                              "properties": {
                                "ranker": {
                                  "description": "The ranker to use for the file search. If not specified will use the `auto` ranker.",
                                  "enum": [
                                    "auto",
                                    "default_2024_08_21"
                                  ],
                                  "type": "string"
                                },
                                "score_threshold": {
                                  "description": "The score threshold for the file search. All values must be a floating point number between 0 and 1.",
                                  "maximum": 1,
                                  "minimum": 0,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "score_threshold"
                              ],
                              "title": "File search tool call ranking options",
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "description": "The type of tool being defined: `file_search`",
                          "enum": [
                            "file_search"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "title": "FileSearch tool",
                      "type": "object"
                    },
                    {
                      "properties": {
                        "function": {
                          "properties": {
                            "description": {
                              "description": "A description of what the function does, used by the model to choose when and how to call the function.",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.",
                              "type": "string"
                            },
                            "parameters": {
                              "additionalProperties": true,
                              "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list.",
                              "type": "object"
                            },
                            "strict": {
                              "anyOf": [
                                {
                                  "default": false,
                                  "description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](https://platform.openai.com/docs/guides/function-calling).",
                                  "type": "boolean"
                                },
                                {
                                  "type": "null"
                                }
                              ]
                            }
                          },
                          "required": [
                            "name"
                          ],
                          "type": "object"
                        },
                        "type": {
                          "description": "The type of tool being defined: `function`",
                          "enum": [
                            "function"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "function"
                      ],
                      "title": "Function tool",
                      "type": "object"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type"
                  }
                },
                "maxItems": 20,
                "type": "array"
              },
              "top_p": {
                "description": "The nucleus sampling value used for this run. If not set, defaults to 1.",
                "nullable": true,
                "type": "number"
              },
              "truncation_strategy": {
                "allOf": [
                  {
                    "description": "Controls for how a thread will be truncated prior to the run. Use this to control the initial context window of the run.",
                    "properties": {
                      "last_messages": {
                        "anyOf": [
                          {
                            "description": "The number of most recent messages from the thread when constructing the context for the run.",
                            "minimum": 1,
                            "type": "integer"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "type": {
                        "description": "The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.",
                        "enum": [
                          "auto",
                          "last_messages"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "title": "Thread Truncation Controls",
                    "type": "object"
                  },
                  {
                    "nullable": true
                  }
                ]
              },
              "usage": {
                "anyOf": [
                  {
                    "description": "Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).",
                    "properties": {
                      "completion_tokens": {
                        "description": "Number of completion tokens used over the course of the run.",
                        "type": "integer"
                      },
                      "prompt_tokens": {
                        "description": "Number of prompt tokens used over the course of the run.",
                        "type": "integer"
                      },
                      "total_tokens": {
                        "description": "Total number of tokens used (prompt + completion).",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "prompt_tokens",
                      "completion_tokens",
                      "total_tokens"
                    ],
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "id",
              "object",
              "created_at",
              "thread_id",
              "assistant_id",
              "status",
              "required_action",
              "last_error",
              "expires_at",
              "started_at",
              "cancelled_at",
              "failed_at",
              "completed_at",
              "model",
              "instructions",
              "tools",
              "metadata",
              "usage",
              "incomplete_details",
              "max_prompt_tokens",
              "max_completion_tokens",
              "truncation_strategy",
              "tool_choice",
              "parallel_tool_calls",
              "response_format"
            ],
            "title": "A run on a thread",
            "type": "object"
          }
        }
      },
      "description": "OK"
    }
  },
  "summary": "Create thread and run",
  "tags": [
    "Assistants"
  ]
}
