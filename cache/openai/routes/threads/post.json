{
  "description": "Create a thread.",
  "operationId": "createThread",
  "requestBody": {
    "content": {
      "application/json": {
        "schema": {
          "additionalProperties": false,
          "description": "Options to create a new thread. If no thread is provided when running a\nrequest, an empty thread will be created.\n",
          "properties": {
            "messages": {
              "description": "A list of [messages](https://platform.openai.com/docs/api-reference/messages) to start the thread with.",
              "items": {
                "additionalProperties": false,
                "properties": {
                  "attachments": {
                    "anyOf": [
                      {
                        "description": "A list of files attached to the message, and the tools they should be added to.",
                        "items": {
                          "properties": {
                            "file_id": {
                              "description": "The ID of the file to attach to the message.",
                              "type": "string"
                            },
                            "tools": {
                              "description": "The tools to add this file to.",
                              "items": {
                                "anyOf": [
                                  {
                                    "properties": {
                                      "type": {
                                        "description": "The type of tool being defined: `code_interpreter`",
                                        "enum": [
                                          "code_interpreter"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type"
                                    ],
                                    "title": "Code interpreter tool",
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "description": "The type of tool being defined: `file_search`",
                                        "enum": [
                                          "file_search"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type"
                                    ],
                                    "title": "FileSearch tool",
                                    "type": "object"
                                  }
                                ],
                                "discriminator": {
                                  "propertyName": "type"
                                }
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "required": [
                          "file_id",
                          "tools"
                        ],
                        "type": "array"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "content": {
                    "anyOf": [
                      {
                        "description": "The text contents of the message.",
                        "title": "Text content",
                        "type": "string"
                      },
                      {
                        "description": "An array of content parts with a defined type, each can be of type `text` or images can be passed with `image_url` or `image_file`. Image types are only supported on [Vision-compatible models](https://platform.openai.com/docs/models).",
                        "items": {
                          "anyOf": [
                            {
                              "description": "References an image [File](https://platform.openai.com/docs/api-reference/files) in the content of a message.",
                              "properties": {
                                "image_file": {
                                  "properties": {
                                    "detail": {
                                      "default": "auto",
                                      "description": "Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.",
                                      "enum": [
                                        "auto",
                                        "low",
                                        "high"
                                      ],
                                      "type": "string"
                                    },
                                    "file_id": {
                                      "description": "The [File](https://platform.openai.com/docs/api-reference/files) ID of the image in the message content. Set `purpose=\"vision\"` when uploading the File if you need to later display the file content.",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "file_id"
                                  ],
                                  "type": "object"
                                },
                                "type": {
                                  "description": "Always `image_file`.",
                                  "enum": [
                                    "image_file"
                                  ],
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "image_file"
                              ],
                              "title": "Image file",
                              "type": "object"
                            },
                            {
                              "description": "References an image URL in the content of a message.",
                              "properties": {
                                "image_url": {
                                  "properties": {
                                    "detail": {
                                      "default": "auto",
                                      "description": "Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`. Default value is `auto`",
                                      "enum": [
                                        "auto",
                                        "low",
                                        "high"
                                      ],
                                      "type": "string"
                                    },
                                    "url": {
                                      "description": "The external URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp.",
                                      "format": "uri",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "url"
                                  ],
                                  "type": "object"
                                },
                                "type": {
                                  "description": "The type of the content part.",
                                  "enum": [
                                    "image_url"
                                  ],
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "image_url"
                              ],
                              "title": "Image URL",
                              "type": "object"
                            },
                            {
                              "description": "The text content that is part of a message.",
                              "properties": {
                                "text": {
                                  "description": "Text content to be sent to the model",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "Always `text`.",
                                  "enum": [
                                    "text"
                                  ],
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "text"
                              ],
                              "title": "Text",
                              "type": "object"
                            }
                          ],
                          "discriminator": {
                            "propertyName": "type"
                          }
                        },
                        "minItems": 1,
                        "title": "Array of content parts",
                        "type": "array"
                      }
                    ]
                  },
                  "metadata": {
                    "anyOf": [
                      {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                        "type": "object"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "role": {
                    "description": "The role of the entity that is creating the message. Allowed values include:\n- `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.\n- `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.\n",
                    "enum": [
                      "user",
                      "assistant"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "role",
                  "content"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "metadata": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ]
            },
            "tool_resources": {
              "anyOf": [
                {
                  "description": "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
                  "properties": {
                    "code_interpreter": {
                      "properties": {
                        "file_ids": {
                          "default": [],
                          "description": "A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n",
                          "items": {
                            "type": "string"
                          },
                          "maxItems": 20,
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "file_search": {
                      "anyOf": [
                        {
                          "required": [
                            "vector_store_ids"
                          ]
                        },
                        {
                          "required": [
                            "vector_stores"
                          ]
                        }
                      ],
                      "properties": {
                        "vector_store_ids": {
                          "description": "The [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.\n",
                          "items": {
                            "type": "string"
                          },
                          "maxItems": 1,
                          "type": "array"
                        },
                        "vector_stores": {
                          "description": "A helper to create a [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) with file_ids and attach it to this thread. There can be a maximum of 1 vector store attached to the thread.\n",
                          "items": {
                            "properties": {
                              "chunking_strategy": {
                                "anyOf": [
                                  {
                                    "additionalProperties": false,
                                    "description": "The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.",
                                    "properties": {
                                      "type": {
                                        "description": "Always `auto`.",
                                        "enum": [
                                          "auto"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type"
                                    ],
                                    "title": "Auto Chunking Strategy",
                                    "type": "object"
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "static": {
                                        "additionalProperties": false,
                                        "properties": {
                                          "chunk_overlap_tokens": {
                                            "description": "The number of tokens that overlap between chunks. The default value is `400`.\n\nNote that the overlap must not exceed half of `max_chunk_size_tokens`.\n",
                                            "type": "integer"
                                          },
                                          "max_chunk_size_tokens": {
                                            "description": "The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`.",
                                            "maximum": 4096,
                                            "minimum": 100,
                                            "type": "integer"
                                          }
                                        },
                                        "required": [
                                          "max_chunk_size_tokens",
                                          "chunk_overlap_tokens"
                                        ],
                                        "type": "object"
                                      },
                                      "type": {
                                        "description": "Always `static`.",
                                        "enum": [
                                          "static"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "static"
                                    ],
                                    "title": "Static Chunking Strategy",
                                    "type": "object"
                                  }
                                ],
                                "description": "The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.",
                                "discriminator": {
                                  "propertyName": "type"
                                },
                                "type": "object"
                              },
                              "file_ids": {
                                "description": "A list of [file](https://platform.openai.com/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.\n",
                                "items": {
                                  "type": "string"
                                },
                                "maxItems": 10000,
                                "type": "array"
                              },
                              "metadata": {
                                "anyOf": [
                                  {
                                    "additionalProperties": {
                                      "type": "string"
                                    },
                                    "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                                    "type": "object"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              }
                            },
                            "type": "object"
                          },
                          "maxItems": 1,
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "type": "object"
        }
      }
    }
  },
  "responses": {
    "200": {
      "content": {
        "application/json": {
          "schema": {
            "description": "Represents a thread that contains [messages](https://platform.openai.com/docs/api-reference/messages).",
            "properties": {
              "created_at": {
                "description": "The Unix timestamp (in seconds) for when the thread was created.",
                "type": "integer"
              },
              "id": {
                "description": "The identifier, which can be referenced in API endpoints.",
                "type": "string"
              },
              "metadata": {
                "anyOf": [
                  {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "object": {
                "description": "The object type, which is always `thread`.",
                "enum": [
                  "thread"
                ],
                "type": "string"
              },
              "tool_resources": {
                "anyOf": [
                  {
                    "description": "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
                    "properties": {
                      "code_interpreter": {
                        "properties": {
                          "file_ids": {
                            "default": [],
                            "description": "A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n",
                            "items": {
                              "type": "string"
                            },
                            "maxItems": 20,
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "file_search": {
                        "properties": {
                          "vector_store_ids": {
                            "description": "The [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.\n",
                            "items": {
                              "type": "string"
                            },
                            "maxItems": 1,
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "id",
              "object",
              "created_at",
              "tool_resources",
              "metadata"
            ],
            "title": "Thread",
            "type": "object"
          }
        }
      },
      "description": "OK"
    }
  },
  "summary": "Create thread",
  "tags": [
    "Assistants"
  ]
}
