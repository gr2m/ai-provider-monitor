{
  "description": "Create an assistant with a model and instructions.",
  "operationId": "createAssistant",
  "requestBody": {
    "content": {
      "application/json": {
        "schema": {
          "additionalProperties": false,
          "properties": {
            "description": {
              "anyOf": [
                {
                  "description": "The description of the assistant. The maximum length is 512 characters.\n",
                  "maxLength": 512,
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ]
            },
            "instructions": {
              "anyOf": [
                {
                  "description": "The system instructions that the assistant uses. The maximum length is 256,000 characters.\n",
                  "maxLength": 256000,
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ]
            },
            "metadata": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ]
            },
            "model": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "enum": [
                    "gpt-5",
                    "gpt-5-mini",
                    "gpt-5-nano",
                    "gpt-5-2025-08-07",
                    "gpt-5-mini-2025-08-07",
                    "gpt-5-nano-2025-08-07",
                    "gpt-4.1",
                    "gpt-4.1-mini",
                    "gpt-4.1-nano",
                    "gpt-4.1-2025-04-14",
                    "gpt-4.1-mini-2025-04-14",
                    "gpt-4.1-nano-2025-04-14",
                    "o3-mini",
                    "o3-mini-2025-01-31",
                    "o1",
                    "o1-2024-12-17",
                    "gpt-4o",
                    "gpt-4o-2024-11-20",
                    "gpt-4o-2024-08-06",
                    "gpt-4o-2024-05-13",
                    "gpt-4o-mini",
                    "gpt-4o-mini-2024-07-18",
                    "gpt-4.5-preview",
                    "gpt-4.5-preview-2025-02-27",
                    "gpt-4-turbo",
                    "gpt-4-turbo-2024-04-09",
                    "gpt-4-0125-preview",
                    "gpt-4-turbo-preview",
                    "gpt-4-1106-preview",
                    "gpt-4-vision-preview",
                    "gpt-4",
                    "gpt-4-0314",
                    "gpt-4-0613",
                    "gpt-4-32k",
                    "gpt-4-32k-0314",
                    "gpt-4-32k-0613",
                    "gpt-3.5-turbo",
                    "gpt-3.5-turbo-16k",
                    "gpt-3.5-turbo-0613",
                    "gpt-3.5-turbo-1106",
                    "gpt-3.5-turbo-0125",
                    "gpt-3.5-turbo-16k-0613"
                  ],
                  "type": "string"
                }
              ],
              "description": "ID of the model to use. You can use the [List models](https://platform.openai.com/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](https://platform.openai.com/docs/models) for descriptions of them.\n",
              "example": "gpt-4o"
            },
            "name": {
              "anyOf": [
                {
                  "description": "The name of the assistant. The maximum length is 256 characters.\n",
                  "maxLength": 256,
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ]
            },
            "reasoning_effort": {
              "anyOf": [
                {
                  "default": "medium",
                  "description": "Constrains effort on reasoning for\n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\nCurrently supported values are `minimal`, `low`, `medium`, and `high`. Reducing\nreasoning effort can result in faster responses and fewer tokens used\non reasoning in a response.\n",
                  "enum": [
                    "minimal",
                    "low",
                    "medium",
                    "high"
                  ],
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ]
            },
            "response_format": {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "description": "`auto` is the default value\n",
                      "enum": [
                        "auto"
                      ],
                      "type": "string"
                    },
                    {
                      "description": "Default response format. Used to generate text responses.\n",
                      "properties": {
                        "type": {
                          "description": "The type of response format being defined. Always `text`.",
                          "enum": [
                            "text"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "title": "Text",
                      "type": "object"
                    },
                    {
                      "description": "JSON object response format. An older method of generating JSON responses.\nUsing `json_schema` is recommended for models that support it. Note that the\nmodel will not generate JSON without a system or user message instructing it\nto do so.\n",
                      "properties": {
                        "type": {
                          "description": "The type of response format being defined. Always `json_object`.",
                          "enum": [
                            "json_object"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "title": "JSON object",
                      "type": "object"
                    },
                    {
                      "description": "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs).\n",
                      "properties": {
                        "json_schema": {
                          "description": "Structured Outputs configuration options, including a JSON Schema.\n",
                          "properties": {
                            "description": {
                              "description": "A description of what the response format is for, used by the model to\ndetermine how to respond in the format.\n",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64.\n",
                              "type": "string"
                            },
                            "schema": {
                              "additionalProperties": true,
                              "description": "The schema for the response format, described as a JSON Schema object.\nLearn how to build JSON schemas [here](https://json-schema.org/).\n",
                              "title": "JSON schema",
                              "type": "object"
                            },
                            "strict": {
                              "anyOf": [
                                {
                                  "default": false,
                                  "description": "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](https://platform.openai.com/docs/guides/structured-outputs).\n",
                                  "type": "boolean"
                                },
                                {
                                  "type": "null"
                                }
                              ]
                            }
                          },
                          "required": [
                            "name"
                          ],
                          "title": "JSON schema",
                          "type": "object"
                        },
                        "type": {
                          "description": "The type of response format being defined. Always `json_schema`.",
                          "enum": [
                            "json_schema"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "json_schema"
                      ],
                      "title": "JSON schema",
                      "type": "object"
                    }
                  ],
                  "description": "Specifies the format that the model must output. Compatible with [GPT-4o](https://platform.openai.com/docs/models#gpt-4o), [GPT-4 Turbo](https://platform.openai.com/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n"
                },
                {
                  "type": "null"
                }
              ]
            },
            "temperature": {
              "anyOf": [
                {
                  "default": 1,
                  "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n",
                  "example": 1,
                  "maximum": 2,
                  "minimum": 0,
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ]
            },
            "tool_resources": {
              "anyOf": [
                {
                  "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
                  "properties": {
                    "code_interpreter": {
                      "properties": {
                        "file_ids": {
                          "default": [],
                          "description": "A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n",
                          "items": {
                            "type": "string"
                          },
                          "maxItems": 20,
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "file_search": {
                      "anyOf": [
                        {
                          "required": [
                            "vector_store_ids"
                          ]
                        },
                        {
                          "required": [
                            "vector_stores"
                          ]
                        }
                      ],
                      "properties": {
                        "vector_store_ids": {
                          "description": "The [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n",
                          "items": {
                            "type": "string"
                          },
                          "maxItems": 1,
                          "type": "array"
                        },
                        "vector_stores": {
                          "description": "A helper to create a [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) with file_ids and attach it to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n",
                          "items": {
                            "properties": {
                              "chunking_strategy": {
                                "anyOf": [
                                  {
                                    "additionalProperties": false,
                                    "description": "The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.",
                                    "properties": {
                                      "type": {
                                        "description": "Always `auto`.",
                                        "enum": [
                                          "auto"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type"
                                    ],
                                    "title": "Auto Chunking Strategy",
                                    "type": "object"
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "static": {
                                        "additionalProperties": false,
                                        "properties": {
                                          "chunk_overlap_tokens": {
                                            "description": "The number of tokens that overlap between chunks. The default value is `400`.\n\nNote that the overlap must not exceed half of `max_chunk_size_tokens`.\n",
                                            "type": "integer"
                                          },
                                          "max_chunk_size_tokens": {
                                            "description": "The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`.",
                                            "maximum": 4096,
                                            "minimum": 100,
                                            "type": "integer"
                                          }
                                        },
                                        "required": [
                                          "max_chunk_size_tokens",
                                          "chunk_overlap_tokens"
                                        ],
                                        "type": "object"
                                      },
                                      "type": {
                                        "description": "Always `static`.",
                                        "enum": [
                                          "static"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "static"
                                    ],
                                    "title": "Static Chunking Strategy",
                                    "type": "object"
                                  }
                                ],
                                "description": "The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.",
                                "discriminator": {
                                  "propertyName": "type"
                                },
                                "type": "object"
                              },
                              "file_ids": {
                                "description": "A list of [file](https://platform.openai.com/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.\n",
                                "items": {
                                  "type": "string"
                                },
                                "maxItems": 10000,
                                "type": "array"
                              },
                              "metadata": {
                                "anyOf": [
                                  {
                                    "additionalProperties": {
                                      "type": "string"
                                    },
                                    "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                                    "type": "object"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              }
                            },
                            "type": "object"
                          },
                          "maxItems": 1,
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ]
            },
            "tools": {
              "default": [],
              "description": "A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.\n",
              "items": {
                "anyOf": [
                  {
                    "properties": {
                      "type": {
                        "description": "The type of tool being defined: `code_interpreter`",
                        "enum": [
                          "code_interpreter"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "title": "Code interpreter tool",
                    "type": "object"
                  },
                  {
                    "properties": {
                      "file_search": {
                        "description": "Overrides for the file search tool.",
                        "properties": {
                          "max_num_results": {
                            "description": "The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.\n\nNote that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n",
                            "maximum": 50,
                            "minimum": 1,
                            "type": "integer"
                          },
                          "ranking_options": {
                            "description": "The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.\n\nSee the [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n",
                            "properties": {
                              "ranker": {
                                "description": "The ranker to use for the file search. If not specified will use the `auto` ranker.",
                                "enum": [
                                  "auto",
                                  "default_2024_08_21"
                                ],
                                "type": "string"
                              },
                              "score_threshold": {
                                "description": "The score threshold for the file search. All values must be a floating point number between 0 and 1.",
                                "maximum": 1,
                                "minimum": 0,
                                "type": "number"
                              }
                            },
                            "required": [
                              "score_threshold"
                            ],
                            "title": "File search tool call ranking options",
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of tool being defined: `file_search`",
                        "enum": [
                          "file_search"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "title": "FileSearch tool",
                    "type": "object"
                  },
                  {
                    "properties": {
                      "function": {
                        "properties": {
                          "description": {
                            "description": "A description of what the function does, used by the model to choose when and how to call the function.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.",
                            "type": "string"
                          },
                          "parameters": {
                            "additionalProperties": true,
                            "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list.",
                            "type": "object"
                          },
                          "strict": {
                            "anyOf": [
                              {
                                "default": false,
                                "description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](https://platform.openai.com/docs/guides/function-calling).",
                                "type": "boolean"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of tool being defined: `function`",
                        "enum": [
                          "function"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "function"
                    ],
                    "title": "Function tool",
                    "type": "object"
                  }
                ],
                "discriminator": {
                  "propertyName": "type"
                }
              },
              "maxItems": 128,
              "type": "array"
            },
            "top_p": {
              "anyOf": [
                {
                  "default": 1,
                  "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n",
                  "example": 1,
                  "maximum": 1,
                  "minimum": 0,
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "required": [
            "model"
          ],
          "type": "object"
        }
      }
    },
    "required": true
  },
  "responses": {
    "200": {
      "content": {
        "application/json": {
          "schema": {
            "description": "Represents an `assistant` that can call the model and use tools.",
            "properties": {
              "created_at": {
                "description": "The Unix timestamp (in seconds) for when the assistant was created.",
                "type": "integer"
              },
              "description": {
                "anyOf": [
                  {
                    "description": "The description of the assistant. The maximum length is 512 characters.\n",
                    "maxLength": 512,
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "id": {
                "description": "The identifier, which can be referenced in API endpoints.",
                "type": "string"
              },
              "instructions": {
                "anyOf": [
                  {
                    "description": "The system instructions that the assistant uses. The maximum length is 256,000 characters.\n",
                    "maxLength": 256000,
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "metadata": {
                "anyOf": [
                  {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "model": {
                "description": "ID of the model to use. You can use the [List models](https://platform.openai.com/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](https://platform.openai.com/docs/models) for descriptions of them.\n",
                "type": "string"
              },
              "name": {
                "anyOf": [
                  {
                    "description": "The name of the assistant. The maximum length is 256 characters.\n",
                    "maxLength": 256,
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "object": {
                "description": "The object type, which is always `assistant`.",
                "enum": [
                  "assistant"
                ],
                "type": "string"
              },
              "response_format": {
                "anyOf": [
                  {
                    "anyOf": [
                      {
                        "description": "`auto` is the default value\n",
                        "enum": [
                          "auto"
                        ],
                        "type": "string"
                      },
                      {
                        "description": "Default response format. Used to generate text responses.\n",
                        "properties": {
                          "type": {
                            "description": "The type of response format being defined. Always `text`.",
                            "enum": [
                              "text"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "title": "Text",
                        "type": "object"
                      },
                      {
                        "description": "JSON object response format. An older method of generating JSON responses.\nUsing `json_schema` is recommended for models that support it. Note that the\nmodel will not generate JSON without a system or user message instructing it\nto do so.\n",
                        "properties": {
                          "type": {
                            "description": "The type of response format being defined. Always `json_object`.",
                            "enum": [
                              "json_object"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "title": "JSON object",
                        "type": "object"
                      },
                      {
                        "description": "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs).\n",
                        "properties": {
                          "json_schema": {
                            "description": "Structured Outputs configuration options, including a JSON Schema.\n",
                            "properties": {
                              "description": {
                                "description": "A description of what the response format is for, used by the model to\ndetermine how to respond in the format.\n",
                                "type": "string"
                              },
                              "name": {
                                "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64.\n",
                                "type": "string"
                              },
                              "schema": {
                                "additionalProperties": true,
                                "description": "The schema for the response format, described as a JSON Schema object.\nLearn how to build JSON schemas [here](https://json-schema.org/).\n",
                                "title": "JSON schema",
                                "type": "object"
                              },
                              "strict": {
                                "anyOf": [
                                  {
                                    "default": false,
                                    "description": "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](https://platform.openai.com/docs/guides/structured-outputs).\n",
                                    "type": "boolean"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              }
                            },
                            "required": [
                              "name"
                            ],
                            "title": "JSON schema",
                            "type": "object"
                          },
                          "type": {
                            "description": "The type of response format being defined. Always `json_schema`.",
                            "enum": [
                              "json_schema"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "type",
                          "json_schema"
                        ],
                        "title": "JSON schema",
                        "type": "object"
                      }
                    ],
                    "description": "Specifies the format that the model must output. Compatible with [GPT-4o](https://platform.openai.com/docs/models#gpt-4o), [GPT-4 Turbo](https://platform.openai.com/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "temperature": {
                "anyOf": [
                  {
                    "default": 1,
                    "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n",
                    "example": 1,
                    "maximum": 2,
                    "minimum": 0,
                    "type": "number"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "tool_resources": {
                "anyOf": [
                  {
                    "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
                    "properties": {
                      "code_interpreter": {
                        "properties": {
                          "file_ids": {
                            "default": [],
                            "description": "A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made available to the `code_interpreter`` tool. There can be a maximum of 20 files associated with the tool.\n",
                            "items": {
                              "type": "string"
                            },
                            "maxItems": 20,
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "file_search": {
                        "properties": {
                          "vector_store_ids": {
                            "description": "The ID of the [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n",
                            "items": {
                              "type": "string"
                            },
                            "maxItems": 1,
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "tools": {
                "default": [],
                "description": "A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.\n",
                "items": {
                  "anyOf": [
                    {
                      "properties": {
                        "type": {
                          "description": "The type of tool being defined: `code_interpreter`",
                          "enum": [
                            "code_interpreter"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "title": "Code interpreter tool",
                      "type": "object"
                    },
                    {
                      "properties": {
                        "file_search": {
                          "description": "Overrides for the file search tool.",
                          "properties": {
                            "max_num_results": {
                              "description": "The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.\n\nNote that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n",
                              "maximum": 50,
                              "minimum": 1,
                              "type": "integer"
                            },
                            "ranking_options": {
                              "description": "The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.\n\nSee the [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n",
                              "properties": {
                                "ranker": {
                                  "description": "The ranker to use for the file search. If not specified will use the `auto` ranker.",
                                  "enum": [
                                    "auto",
                                    "default_2024_08_21"
                                  ],
                                  "type": "string"
                                },
                                "score_threshold": {
                                  "description": "The score threshold for the file search. All values must be a floating point number between 0 and 1.",
                                  "maximum": 1,
                                  "minimum": 0,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "score_threshold"
                              ],
                              "title": "File search tool call ranking options",
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "description": "The type of tool being defined: `file_search`",
                          "enum": [
                            "file_search"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "title": "FileSearch tool",
                      "type": "object"
                    },
                    {
                      "properties": {
                        "function": {
                          "properties": {
                            "description": {
                              "description": "A description of what the function does, used by the model to choose when and how to call the function.",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.",
                              "type": "string"
                            },
                            "parameters": {
                              "additionalProperties": true,
                              "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list.",
                              "type": "object"
                            },
                            "strict": {
                              "anyOf": [
                                {
                                  "default": false,
                                  "description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](https://platform.openai.com/docs/guides/function-calling).",
                                  "type": "boolean"
                                },
                                {
                                  "type": "null"
                                }
                              ]
                            }
                          },
                          "required": [
                            "name"
                          ],
                          "type": "object"
                        },
                        "type": {
                          "description": "The type of tool being defined: `function`",
                          "enum": [
                            "function"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "function"
                      ],
                      "title": "Function tool",
                      "type": "object"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type"
                  }
                },
                "maxItems": 128,
                "type": "array"
              },
              "top_p": {
                "anyOf": [
                  {
                    "default": 1,
                    "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n",
                    "example": 1,
                    "maximum": 1,
                    "minimum": 0,
                    "type": "number"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "id",
              "object",
              "created_at",
              "name",
              "description",
              "model",
              "instructions",
              "tools",
              "metadata"
            ],
            "title": "Assistant",
            "type": "object"
          }
        }
      },
      "description": "OK"
    }
  },
  "summary": "Create assistant",
  "tags": [
    "Assistants"
  ]
}
