{
  "description": "Returns the details of a model, provided its name.",
  "operationId": "get-model",
  "parameters": [
    {
      "in": "path",
      "name": "model",
      "required": true,
      "schema": {
        "example": "command-a-03-2025",
        "type": "string"
      }
    },
    {
      "description": "The name of the project that is making the request.\n",
      "example": "my-cool-project",
      "in": "header",
      "name": "X-Client-Name",
      "required": false,
      "schema": {
        "type": "string"
      }
    }
  ],
  "responses": {
    "200": {
      "content": {
        "application/json": {
          "schema": {
            "description": "Contains information about the model and which API endpoints it can be used with.",
            "properties": {
              "context_length": {
                "description": "The maximum number of tokens that the model can process in a single request. Note that not all of these tokens are always available due to special tokens and preambles that Cohere has added by default.",
                "type": "number"
              },
              "default_endpoints": {
                "description": "The API endpoints that the model is default to.",
                "items": {
                  "description": "One of the Cohere API endpoints that the model can be used with.",
                  "enum": [
                    "chat",
                    "embed",
                    "classify",
                    "summarize",
                    "rerank",
                    "rate",
                    "generate"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "endpoints": {
                "description": "The API endpoints that the model is compatible with.",
                "items": {
                  "description": "One of the Cohere API endpoints that the model can be used with.",
                  "enum": [
                    "chat",
                    "embed",
                    "classify",
                    "summarize",
                    "rerank",
                    "rate",
                    "generate"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "features": {
                "description": "The features that the model supports.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "finetuned": {
                "description": "Whether the model has been fine-tuned or not.",
                "type": "boolean"
              },
              "is_deprecated": {
                "description": "Whether the model is deprecated or not.",
                "type": "boolean"
              },
              "name": {
                "description": "Specify this name in the `model` parameter of API requests to use your chosen model.",
                "type": "string"
              },
              "supports_vision": {
                "description": "Whether the model supports image inputs or not.",
                "type": "boolean"
              },
              "tokenizer_url": {
                "description": "Public URL to the tokenizer's configuration file.",
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "OK",
      "headers": {
        "X-API-Warning": {
          "description": "The name of the project that is making the request.",
          "example": "Parameter xyz is deprecated, for more information please refer to https://docs.cohere.com/versioning-reference",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      }
    },
    "400": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when the request is not well formed. This could be because:\n  - JSON is invalid\n  - The request is missing required fields\n  - The request contains an invalid combination of fields\n"
    },
    "401": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error indicates that the operation attempted to be performed is not allowed. This could be because:\n  - The api token is invalid\n  - The user does not have the necessary permissions\n"
    },
    "403": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error indicates that the operation attempted to be performed is not allowed. This could be because:\n  - The api token is invalid\n  - The user does not have the necessary permissions\n"
    },
    "404": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when a resource is not found. This could be because:\n  - The endpoint does not exist\n  - The resource does not exist eg model id, dataset id\n"
    },
    "422": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when the request is not well formed. This could be because:\n  - JSON is invalid\n  - The request is missing required fields\n  - The request contains an invalid combination of fields\n"
    },
    "429": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "Too many requests"
    },
    "498": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when a request or response contains a deny-listed token.\n"
    },
    "499": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when a request is cancelled by the user.\n"
    },
    "500": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when an uncategorised internal server error occurs.\n"
    },
    "501": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when the requested feature is not implemented.\n"
    },
    "503": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when the service is unavailable. This could be due to:\n  - Too many users trying to access the service at the same time\n"
    },
    "504": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when a request to the server times out. This could be due to:\n  - An internal services taking too long to respond\n"
    }
  },
  "summary": "Get a Model",
  "tags": [
    "/models"
  ]
}
