{
  "deprecated": true,
  "description": "Update a connector by ID. Omitted fields will not be updated. See ['Managing your Connector'](https://docs.cohere.com/docs/managing-your-connector) for more information.",
  "operationId": "update-connector",
  "parameters": [
    {
      "description": "The ID of the connector to update.",
      "in": "path",
      "name": "id",
      "required": true,
      "schema": {
        "type": "string"
      }
    },
    {
      "description": "The name of the project that is making the request.\n",
      "example": "my-cool-project",
      "in": "header",
      "name": "X-Client-Name",
      "required": false,
      "schema": {
        "type": "string"
      }
    }
  ],
  "requestBody": {
    "content": {
      "application/json": {
        "schema": {
          "properties": {
            "active": {
              "default": true,
              "type": "boolean"
            },
            "continue_on_failure": {
              "default": false,
              "type": "boolean"
            },
            "excludes": {
              "description": "A list of fields to exclude from the prompt (fields remain in the document).",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "name": {
              "description": "A human-readable name for the connector.",
              "type": "string"
            },
            "oauth": {
              "description": "The OAuth 2.0 configuration for the connector. Cannot be specified if service_auth is specified.",
              "properties": {
                "authorize_url": {
                  "description": "The OAuth 2.0 /authorize endpoint to use when users authorize the connector.",
                  "type": "string"
                },
                "client_id": {
                  "description": "The OAuth 2.0 client ID. This fields is encrypted at rest.",
                  "type": "string"
                },
                "client_secret": {
                  "description": "The OAuth 2.0 client Secret. This field is encrypted at rest and never returned in a response.",
                  "type": "string"
                },
                "scope": {
                  "description": "The OAuth scopes to request when users authorize the connector.",
                  "type": "string"
                },
                "token_url": {
                  "description": "The OAuth 2.0 /token endpoint to use when users authorize the connector.",
                  "type": "string"
                }
              },
              "required": [
                "clientId",
                "clientSecret",
                "authorizeUrl",
                "tokenUrl"
              ],
              "type": "object"
            },
            "service_auth": {
              "description": "The service to service authentication configuration for the connector. Cannot be specified if oauth is specified.",
              "properties": {
                "token": {
                  "description": "The token that will be used in the HTTP Authorization header when making requests to the connector. This field is encrypted at rest and never returned in a response.",
                  "type": "string"
                },
                "type": {
                  "default": "noscheme",
                  "description": "The token_type specifies the way the token is passed in the Authorization header. Valid values are \"bearer\", \"basic\", and \"noscheme\".",
                  "enum": [
                    "bearer",
                    "basic",
                    "noscheme"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "type",
                "token"
              ],
              "type": "object"
            },
            "url": {
              "description": "The URL of the connector that will be used to search for documents.",
              "type": "string"
            }
          },
          "type": "object"
        }
      }
    },
    "required": true
  },
  "responses": {
    "200": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "connector": {
                "description": "A connector allows you to integrate data sources with the '/chat' endpoint to create grounded generations with citations to the data source.\ndocuments to help answer users.",
                "properties": {
                  "active": {
                    "description": "Whether the connector is active or not.",
                    "type": "boolean"
                  },
                  "auth_status": {
                    "description": "The OAuth status for the user making the request. One of [\"valid\", \"expired\", \"\"]. Empty string (field is omitted) means the user has not authorized the connector yet.",
                    "enum": [
                      "valid",
                      "expired"
                    ],
                    "type": "string"
                  },
                  "auth_type": {
                    "description": "The type of authentication/authorization used by the connector. Possible values: [oauth, service_auth]",
                    "format": "enum",
                    "type": "string"
                  },
                  "continue_on_failure": {
                    "description": "Whether a chat request should continue or not if the request to this connector fails.",
                    "type": "boolean"
                  },
                  "created_at": {
                    "description": "The UTC time at which the connector was created.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "description": {
                    "description": "A description of the connector.",
                    "type": "string"
                  },
                  "excludes": {
                    "description": "A list of fields to exclude from the prompt (fields remain in the document).",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "id": {
                    "description": "The unique identifier of the connector (used in both `/connectors` & `/chat` endpoints).\nThis is automatically created from the name of the connector upon registration.",
                    "type": "string"
                  },
                  "name": {
                    "description": "A human-readable name for the connector.",
                    "type": "string"
                  },
                  "oauth": {
                    "description": "The OAuth 2.0 configuration for the connector.",
                    "properties": {
                      "authorize_url": {
                        "description": "The OAuth 2.0 /authorize endpoint to use when users authorize the connector.",
                        "type": "string"
                      },
                      "client_id": {
                        "description": "The OAuth 2.0 client ID. This field is encrypted at rest.",
                        "type": "string"
                      },
                      "client_secret": {
                        "description": "The OAuth 2.0 client Secret. This field is encrypted at rest and never returned in a response.",
                        "type": "string"
                      },
                      "scope": {
                        "description": "The OAuth scopes to request when users authorize the connector.",
                        "type": "string"
                      },
                      "token_url": {
                        "description": "The OAuth 2.0 /token endpoint to use when users authorize the connector.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "authorize_url",
                      "token_url"
                    ],
                    "type": "object"
                  },
                  "organization_id": {
                    "description": "The organization to which this connector belongs. This is automatically set to\nthe organization of the user who created the connector.",
                    "type": "string"
                  },
                  "updated_at": {
                    "description": "The UTC time at which the connector was last updated.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "url": {
                    "description": "The URL of the connector that will be used to search for documents.",
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "name",
                  "created_at",
                  "updated_at"
                ],
                "type": "object"
              }
            },
            "required": [
              "connector"
            ],
            "type": "object"
          }
        }
      },
      "description": "OK"
    },
    "400": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when the request is not well formed. This could be because:\n  - JSON is invalid\n  - The request is missing required fields\n  - The request contains an invalid combination of fields\n"
    },
    "401": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error indicates that the operation attempted to be performed is not allowed. This could be because:\n  - The api token is invalid\n  - The user does not have the necessary permissions\n"
    },
    "403": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error indicates that the operation attempted to be performed is not allowed. This could be because:\n  - The api token is invalid\n  - The user does not have the necessary permissions\n"
    },
    "404": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when a resource is not found. This could be because:\n  - The endpoint does not exist\n  - The resource does not exist eg model id, dataset id\n"
    },
    "422": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when the request is not well formed. This could be because:\n  - JSON is invalid\n  - The request is missing required fields\n  - The request contains an invalid combination of fields\n"
    },
    "429": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "Too many requests"
    },
    "498": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when a request or response contains a deny-listed token.\n"
    },
    "499": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when a request is cancelled by the user.\n"
    },
    "500": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when an uncategorised internal server error occurs.\n"
    },
    "501": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when the requested feature is not implemented.\n"
    },
    "503": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when the service is unavailable. This could be due to:\n  - Too many users trying to access the service at the same time\n"
    },
    "504": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when a request to the server times out. This could be due to:\n  - An internal services taking too long to respond\n"
    }
  },
  "summary": "Update a Connector",
  "tags": [
    "/connectors"
  ]
}
