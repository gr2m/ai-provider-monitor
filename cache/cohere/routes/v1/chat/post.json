{
  "description": "Generates a text response to a user message.\nTo learn how to use the Chat API and RAG follow our [Text Generation guides](https://docs.cohere.com/docs/chat-api).\n",
  "operationId": "chat",
  "parameters": [
    {
      "description": "The name of the project that is making the request.\n",
      "example": "my-cool-project",
      "in": "header",
      "name": "X-Client-Name",
      "required": false,
      "schema": {
        "type": "string"
      }
    },
    {
      "description": "Pass text/event-stream to receive the streamed response as server-sent events. The default is `\\n` delimited events.\n",
      "example": "text/event-stream",
      "in": "header",
      "name": "Accepts",
      "required": false,
      "schema": {
        "enum": [
          "text/event-stream"
        ],
        "type": "string"
      }
    }
  ],
  "requestBody": {
    "content": {
      "application/json": {
        "schema": {
          "properties": {
            "chat_history": {
              "description": "A list of previous messages between the user and the model, giving the model conversational context for responding to the user's `message`.\n\nEach item represents a single message in the chat history, excluding the current user turn. It has two properties: `role` and `message`. The `role` identifies the sender (`CHATBOT`, `SYSTEM`, or `USER`), while the `message` contains the text content.\n\nThe chat_history parameter should not be used for `SYSTEM` messages in most cases. Instead, to add a `SYSTEM` role message at the beginning of a conversation, the `preamble` parameter should be used.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n",
              "items": {
                "discriminator": {
                  "mapping": {
                    "CHATBOT": "#/components/schemas/ChatMessage",
                    "SYSTEM": "#/components/schemas/ChatMessage",
                    "TOOL": "#/components/schemas/ChatToolMessage",
                    "USER": "#/components/schemas/ChatMessage"
                  },
                  "propertyName": "role"
                },
                "oneOf": [
                  {
                    "description": "Represents a single message in the chat history, excluding the current user turn. It has two properties: `role` and `message`. The `role` identifies the sender (`CHATBOT`, `SYSTEM`, or `USER`), while the `message` contains the text content.\n\nThe chat_history parameter should not be used for `SYSTEM` messages in most cases. Instead, to add a `SYSTEM` role message at the beginning of a conversation, the `preamble` parameter should be used.\n",
                    "properties": {
                      "message": {
                        "description": "Contents of the chat message.\n",
                        "minLength": 1,
                        "type": "string"
                      },
                      "role": {
                        "description": "One of `CHATBOT`, `SYSTEM`, `TOOL` or `USER` to identify who the message is coming from.\n",
                        "enum": [
                          "CHATBOT",
                          "SYSTEM",
                          "USER",
                          "TOOL"
                        ],
                        "type": "string"
                      },
                      "tool_calls": {
                        "items": {
                          "description": "Contains the tool calls generated by the model. Use it to invoke your tools.\n",
                          "properties": {
                            "name": {
                              "description": "Name of the tool to call.",
                              "type": "string"
                            },
                            "parameters": {
                              "additionalProperties": true,
                              "description": "The name and value of the parameters to use when invoking a tool.",
                              "type": "object"
                            }
                          },
                          "required": [
                            "name",
                            "parameters"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "role",
                      "message"
                    ]
                  },
                  {
                    "description": "Represents tool result in the chat history.\n",
                    "properties": {
                      "role": {
                        "description": "One of `CHATBOT`, `SYSTEM`, `TOOL` or `USER` to identify who the message is coming from.\n",
                        "enum": [
                          "CHATBOT",
                          "SYSTEM",
                          "USER",
                          "TOOL"
                        ],
                        "type": "string"
                      },
                      "tool_results": {
                        "items": {
                          "properties": {
                            "call": {
                              "description": "Contains the tool calls generated by the model. Use it to invoke your tools.\n",
                              "properties": {
                                "name": {
                                  "description": "Name of the tool to call.",
                                  "type": "string"
                                },
                                "parameters": {
                                  "additionalProperties": true,
                                  "description": "The name and value of the parameters to use when invoking a tool.",
                                  "type": "object"
                                }
                              },
                              "required": [
                                "name",
                                "parameters"
                              ],
                              "type": "object"
                            },
                            "outputs": {
                              "items": {
                                "additionalProperties": true,
                                "type": "object"
                              },
                              "minItems": 0,
                              "type": "array"
                            }
                          },
                          "required": [
                            "call",
                            "outputs"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "role"
                    ]
                  }
                ]
              },
              "minItems": 0,
              "type": "array"
            },
            "citation_quality": {
              "description": "Defaults to `\"accurate\"`.\n\nDictates the approach taken to generating citations as part of the RAG flow by allowing the user to specify whether they want `\"accurate\"` results, `\"fast\"` results or no results.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n",
              "enum": [
                "fast",
                "accurate",
                "off"
              ],
              "type": "string"
            },
            "connectors": {
              "deprecated": true,
              "description": "Accepts `{\"id\": \"web-search\"}`, and/or the `\"id\"` for a custom [connector](https://docs.cohere.com/docs/connectors), if you've [created](https://docs.cohere.com/v1/docs/creating-and-deploying-a-connector) one.\n\nWhen specified, the model's reply will be enriched with information found by querying each of the connectors (RAG).\n\nCompatible Deployments: Cohere Platform\n",
              "items": {
                "description": "The connector used for fetching documents.\n",
                "properties": {
                  "continue_on_failure": {
                    "description": "Defaults to `false`.\n\nWhen `true`, the request will continue if this connector returned an error.\n",
                    "type": "boolean"
                  },
                  "id": {
                    "description": "The identifier of the connector.\n",
                    "minLength": 1,
                    "type": "string"
                  },
                  "options": {
                    "description": "Provides the connector with different settings at request time. The key/value pairs of this object are specific to each connector.\n\nFor example, the connector `web-search` supports the `site` option, which limits search results to the specified domain.\n",
                    "type": "object"
                  },
                  "user_access_token": {
                    "description": "When specified, this user access token will be passed to the connector in the Authorization header instead of the Cohere generated one.\n",
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              },
              "minItems": 0,
              "type": "array"
            },
            "conversation_id": {
              "description": "An alternative to `chat_history`.\n\nProviding a `conversation_id` creates or resumes a persisted conversation with the specified ID. The ID can be any non empty string.\n\nCompatible Deployments: Cohere Platform\n",
              "type": "string"
            },
            "documents": {
              "description": "A list of relevant documents that the model can cite to generate a more accurate reply. Each document is a string-string dictionary.\n\nExample:\n```\n[\n  { \"title\": \"Tall penguins\", \"text\": \"Emperor penguins are the tallest.\" },\n  { \"title\": \"Penguin habitats\", \"text\": \"Emperor penguins only live in Antarctica.\" },\n]\n```\n\nKeys and values from each document will be serialized to a string and passed to the model. The resulting generation will include citations that reference some of these documents.\n\nSome suggested keys are \"text\", \"author\", and \"date\". For better generation quality, it is recommended to keep the total word count of the strings in the dictionary to under 300 words.\n\nAn `id` field (string) can be optionally supplied to identify the document in the citations. This field will not be passed to the model.\n\nAn `_excludes` field (array of strings) can be optionally supplied to omit some key-value pairs from being shown to the model. The omitted fields will still show up in the citation object. The \"_excludes\" field will not be passed to the model.\n\nSee ['Document Mode'](https://docs.cohere.com/docs/retrieval-augmented-generation-rag#document-mode) in the guide for more information.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n",
              "items": {
                "additionalProperties": {
                  "type": "string"
                },
                "description": "Relevant information that could be used by the model to generate a more accurate reply.\nThe contents of each document are generally short (under 300 words), and are passed in the form of a\ndictionary of strings. Some suggested keys are \"text\", \"author\", \"date\". Both the key name and the value will be\npassed to the model.\n",
                "properties": {
                  "id": {
                    "description": "Unique identifier for this document.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "force_single_step": {
              "description": "Forces the chat to be single step. Defaults to `false`.",
              "type": "boolean"
            },
            "frequency_penalty": {
              "description": "Defaults to `0.0`, min value of `0.0`, max value of `1.0`.\n\nUsed to reduce repetitiveness of generated tokens. The higher the value, the stronger a penalty is applied to previously present tokens, proportional to how many times they have already appeared in the prompt or prior generation.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n",
              "type": "number",
              "writeOnly": true
            },
            "k": {
              "default": 0,
              "description": "Ensures only the top `k` most likely tokens are considered for generation at each step.\nDefaults to `0`, min value of `0`, max value of `500`.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n",
              "maximum": 500,
              "minimum": 0,
              "type": "integer",
              "writeOnly": true
            },
            "max_input_tokens": {
              "description": "The maximum number of input tokens to send to the model. If not specified, `max_input_tokens` is the model's context length limit minus a small buffer.\n\nInput will be truncated according to the `prompt_truncation` parameter.\n\nCompatible Deployments: Cohere Platform\n",
              "type": "integer",
              "writeOnly": true
            },
            "max_tokens": {
              "description": "The maximum number of tokens the model will generate as part of the response. Note: Setting a low value may result in incomplete generations.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n",
              "type": "integer",
              "writeOnly": true
            },
            "message": {
              "description": "Text input for the model to respond to.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n",
              "type": "string"
            },
            "model": {
              "description": "The name of a compatible [Cohere model](https://docs.cohere.com/docs/models) or the ID of a [fine-tuned](https://docs.cohere.com/docs/chat-fine-tuning) model.\n\nCompatible Deployments: Cohere Platform, Private Deployments\n",
              "type": "string"
            },
            "p": {
              "default": 0.75,
              "description": "Ensures that only the most likely tokens, with total probability mass of `p`, are considered for generation at each step. If both `k` and `p` are enabled, `p` acts after `k`.\nDefaults to `0.75`. min value of `0.01`, max value of `0.99`.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n",
              "maximum": 0.99,
              "minimum": 0.01,
              "type": "number",
              "writeOnly": true
            },
            "preamble": {
              "description": "When specified, the default Cohere preamble will be replaced with the provided one. Preambles are a part of the prompt used to adjust the model's overall behavior and conversation style, and use the `SYSTEM` role.\n\nThe `SYSTEM` role is also used for the contents of the optional `chat_history=` parameter. When used with the `chat_history=` parameter it adds content throughout a conversation. Conversely, when used with the `preamble=` parameter it adds content at the start of the conversation only.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n",
              "type": "string"
            },
            "presence_penalty": {
              "description": "Defaults to `0.0`, min value of `0.0`, max value of `1.0`.\n\nUsed to reduce repetitiveness of generated tokens. Similar to `frequency_penalty`, except that this penalty is applied equally to all tokens that have already appeared, regardless of their exact frequencies.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n",
              "type": "number",
              "writeOnly": true
            },
            "prompt_truncation": {
              "description": "Defaults to `AUTO` when `connectors` are specified and `OFF` in all other cases.\n\nDictates how the prompt will be constructed.\n\nWith `prompt_truncation` set to \"AUTO\", some elements from `chat_history` and `documents` will be dropped in an attempt to construct a prompt that fits within the model's context length limit. During this process the order of the documents and chat history will be changed and ranked by relevance.\n\nWith `prompt_truncation` set to \"AUTO_PRESERVE_ORDER\", some elements from `chat_history` and `documents` will be dropped in an attempt to construct a prompt that fits within the model's context length limit. During this process the order of the documents and chat history will be preserved as they are inputted into the API.\n\nWith `prompt_truncation` set to \"OFF\", no elements will be dropped. If the sum of the inputs exceeds the model's context length limit, a `TooManyTokens` error will be returned.\n\nCompatible Deployments:\n - AUTO: Cohere Platform Only\n - AUTO_PRESERVE_ORDER: Azure, AWS Sagemaker/Bedrock, Private Deployments\n",
              "enum": [
                "OFF",
                "AUTO",
                "AUTO_PRESERVE_ORDER"
              ],
              "type": "string"
            },
            "raw_prompting": {
              "description": "When enabled, the user's prompt will be sent to the model without\nany pre-processing.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n",
              "type": "boolean"
            },
            "response_format": {
              "description": "Configuration for forcing the model output to adhere to the specified format. Supported on [Command R 03-2024](https://docs.cohere.com/docs/command-r), [Command R+ 04-2024](https://docs.cohere.com/docs/command-r-plus) and newer models.\n\nThe model can be forced into outputting JSON objects (with up to 5 levels of nesting) by setting `{ \"type\": \"json_object\" }`.\n\nA [JSON Schema](https://json-schema.org/) can optionally be provided, to ensure a specific structure.\n\n**Note**: When using  `{ \"type\": \"json_object\" }` your `message` should always explicitly instruct the model to generate a JSON (eg: _\"Generate a JSON ...\"_) . Otherwise the model may end up getting stuck generating an infinite stream of characters and eventually run out of context length.\n**Limitation**: The parameter is not supported in RAG mode (when any of `connectors`, `documents`, `tools`, `tool_results` are provided).\n",
              "discriminator": {
                "mapping": {
                  "json_object": "#/components/schemas/JSONResponseFormat",
                  "text": "#/components/schemas/ChatTextResponseFormat"
                },
                "propertyName": "type"
              },
              "oneOf": [
                {
                  "properties": {
                    "type": {
                      "description": "Defaults to `\"text\"`.\n\nWhen set to `\"json_object\"`, the model's output will be a valid JSON Object.\n",
                      "enum": [
                        "text",
                        "json_object"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "title": "Text Response",
                  "type": "object"
                },
                {
                  "properties": {
                    "schema": {
                      "description": "A JSON schema object that the output will adhere to. There are some restrictions we have on the schema, refer to [our guide](https://docs.cohere.com/docs/structured-outputs-json#schema-constraints) for more information.\nExample (required name and age object):\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\"type\": \"string\"},\n    \"age\": {\"type\": \"integer\"}\n  },\n  \"required\": [\"name\", \"age\"]\n}\n```\n\n**Note**: This field must not be specified when the `type` is set to `\"text\"`.\n",
                      "type": "object"
                    },
                    "type": {
                      "description": "Defaults to `\"text\"`.\n\nWhen set to `\"json_object\"`, the model's output will be a valid JSON Object.\n",
                      "enum": [
                        "text",
                        "json_object"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "title": "JSON Object Response",
                  "type": "object"
                }
              ]
            },
            "safety_mode": {
              "description": "Used to select the [safety instruction](https://docs.cohere.com/docs/safety-modes) inserted into the prompt. Defaults to `CONTEXTUAL`.\nWhen `NONE` is specified, the safety instruction will be omitted.\n\nSafety modes are not yet configurable in combination with `tools`, `tool_results` and `documents` parameters.\n\n**Note**: This parameter is only compatible newer Cohere models, starting with [Command R 08-2024](https://docs.cohere.com/docs/command-r#august-2024-release) and [Command R+ 08-2024](https://docs.cohere.com/docs/command-r-plus#august-2024-release).\n\n**Note**: `command-r7b-12-2024` and newer models only support `\"CONTEXTUAL\"` and `\"STRICT\"` modes.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n",
              "enum": [
                "CONTEXTUAL",
                "STRICT",
                "NONE"
              ]
            },
            "search_queries_only": {
              "deprecated": true,
              "description": "Defaults to `false`.\n\nWhen `true`, the response will only contain a list of generated search queries, but no search will take place, and no reply from the model to the user's `message` will be generated.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n",
              "type": "boolean"
            },
            "seed": {
              "description": "If specified, the backend will make a best effort to sample tokens\ndeterministically, such that repeated requests with the same\nseed and parameters should return the same result. However,\ndeterminism cannot be totally guaranteed.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n",
              "maximum": 18446744073709552000,
              "minimum": 0,
              "type": "integer"
            },
            "stop_sequences": {
              "description": "A list of up to 5 strings that the model will use to stop generation. If the model generates a string that matches any of the strings in the list, it will stop generating tokens and return the generated text up to that point not including the stop sequence.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n",
              "items": {
                "type": "string"
              },
              "type": "array",
              "writeOnly": true
            },
            "stream": {
              "description": "Defaults to `false`.\n\nWhen `true`, the response will be a JSON stream of events. The final event will contain the complete response, and will have an `event_type` of `\"stream-end\"`.\n\nStreaming is beneficial for user interfaces that render the contents of the response piece by piece, as it gets generated.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n",
              "type": "boolean"
            },
            "temperature": {
              "description": "Defaults to `0.3`.\n\nA non-negative float that tunes the degree of randomness in generation. Lower temperatures mean less random generations, and higher temperatures mean more random generations.\n\nRandomness can be further maximized by increasing the  value of the `p` parameter.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n",
              "format": "float",
              "maximum": 1,
              "minimum": 0,
              "type": "number"
            },
            "tool_results": {
              "description": "A list of results from invoking tools recommended by the model in the previous chat turn. Results are used to produce a text response and will be referenced in citations. When using `tool_results`, `tools` must be passed as well.\nEach tool_result contains information about how it was invoked, as well as a list of outputs in the form of dictionaries.\n\n**Note**: `outputs` must be a list of objects. If your tool returns a single object (eg `{\"status\": 200}`), make sure to wrap it in a list.\n```\ntool_results = [\n  {\n    \"call\": {\n      \"name\": <tool name>,\n      \"parameters\": {\n        <param name>: <param value>\n      }\n    },\n    \"outputs\": [{\n      <key>: <value>\n    }]\n  },\n  ...\n]\n```\n**Note**: Chat calls with `tool_results` should not be included in the Chat history to avoid duplication of the message text.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n",
              "items": {
                "properties": {
                  "call": {
                    "description": "Contains the tool calls generated by the model. Use it to invoke your tools.\n",
                    "properties": {
                      "name": {
                        "description": "Name of the tool to call.",
                        "type": "string"
                      },
                      "parameters": {
                        "additionalProperties": true,
                        "description": "The name and value of the parameters to use when invoking a tool.",
                        "type": "object"
                      }
                    },
                    "required": [
                      "name",
                      "parameters"
                    ],
                    "type": "object"
                  },
                  "outputs": {
                    "items": {
                      "additionalProperties": true,
                      "type": "object"
                    },
                    "minItems": 0,
                    "type": "array"
                  }
                },
                "required": [
                  "call",
                  "outputs"
                ],
                "type": "object"
              },
              "minItems": 0,
              "type": "array"
            },
            "tools": {
              "description": "A list of available tools (functions) that the model may suggest invoking before producing a text response.\n\nWhen `tools` is passed (without `tool_results`), the `text` field in the response will be `\"\"` and the `tool_calls` field in the response will be populated with a list of tool calls that need to be made. If no calls need to be made, the `tool_calls` array will be empty.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n",
              "items": {
                "properties": {
                  "description": {
                    "description": "The description of what the tool does, the model uses the description to choose when and how to call the function.\n",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the tool to be called. Valid names contain only the characters `a-z`, `A-Z`, `0-9`, `_` and must not begin with a digit.\n",
                    "type": "string"
                  },
                  "parameter_definitions": {
                    "additionalProperties": {
                      "properties": {
                        "description": {
                          "description": "The description of the parameter.\n",
                          "type": "string"
                        },
                        "required": {
                          "default": false,
                          "description": "Denotes whether the parameter is always present (required) or not. Defaults to not required.\n",
                          "type": "boolean"
                        },
                        "type": {
                          "description": "The type of the parameter. Must be a valid Python type.\n",
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    "description": "The input parameters of the tool. Accepts a dictionary where the key is the name of the parameter and the value is the parameter spec. Valid parameter names contain only the characters `a-z`, `A-Z`, `0-9`, `_` and must not begin with a digit.\n```\n{\n  \"my_param\": {\n    \"description\": <string>,\n    \"type\": <string>, // any python data type, such as 'str', 'bool'\n    \"required\": <boolean>\n  }\n}\n```\n",
                    "type": "object"
                  }
                },
                "required": [
                  "name",
                  "description"
                ],
                "type": "object"
              },
              "minItems": 0,
              "type": "array"
            }
          },
          "required": [
            "message"
          ],
          "type": "object"
        }
      }
    }
  },
  "responses": {
    "200": {
      "content": {
        "application/json": {
          "schema": {
            "oneOf": [
              {
                "properties": {
                  "chat_history": {
                    "description": "A list of previous messages between the user and the model, meant to give the model conversational context for responding to the user's `message`.\n",
                    "items": {
                      "discriminator": {
                        "mapping": {
                          "CHATBOT": "#/components/schemas/ChatMessage",
                          "SYSTEM": "#/components/schemas/ChatMessage",
                          "TOOL": "#/components/schemas/ChatToolMessage",
                          "USER": "#/components/schemas/ChatMessage"
                        },
                        "propertyName": "role"
                      },
                      "oneOf": [
                        {
                          "description": "Represents a single message in the chat history, excluding the current user turn. It has two properties: `role` and `message`. The `role` identifies the sender (`CHATBOT`, `SYSTEM`, or `USER`), while the `message` contains the text content.\n\nThe chat_history parameter should not be used for `SYSTEM` messages in most cases. Instead, to add a `SYSTEM` role message at the beginning of a conversation, the `preamble` parameter should be used.\n",
                          "properties": {
                            "message": {
                              "description": "Contents of the chat message.\n",
                              "minLength": 1,
                              "type": "string"
                            },
                            "role": {
                              "description": "One of `CHATBOT`, `SYSTEM`, `TOOL` or `USER` to identify who the message is coming from.\n",
                              "enum": [
                                "CHATBOT",
                                "SYSTEM",
                                "USER",
                                "TOOL"
                              ],
                              "type": "string"
                            },
                            "tool_calls": {
                              "items": {
                                "description": "Contains the tool calls generated by the model. Use it to invoke your tools.\n",
                                "properties": {
                                  "name": {
                                    "description": "Name of the tool to call.",
                                    "type": "string"
                                  },
                                  "parameters": {
                                    "additionalProperties": true,
                                    "description": "The name and value of the parameters to use when invoking a tool.",
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "name",
                                  "parameters"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "role",
                            "message"
                          ]
                        },
                        {
                          "description": "Represents tool result in the chat history.\n",
                          "properties": {
                            "role": {
                              "description": "One of `CHATBOT`, `SYSTEM`, `TOOL` or `USER` to identify who the message is coming from.\n",
                              "enum": [
                                "CHATBOT",
                                "SYSTEM",
                                "USER",
                                "TOOL"
                              ],
                              "type": "string"
                            },
                            "tool_results": {
                              "items": {
                                "properties": {
                                  "call": {
                                    "description": "Contains the tool calls generated by the model. Use it to invoke your tools.\n",
                                    "properties": {
                                      "name": {
                                        "description": "Name of the tool to call.",
                                        "type": "string"
                                      },
                                      "parameters": {
                                        "additionalProperties": true,
                                        "description": "The name and value of the parameters to use when invoking a tool.",
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "name",
                                      "parameters"
                                    ],
                                    "type": "object"
                                  },
                                  "outputs": {
                                    "items": {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    "minItems": 0,
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "call",
                                  "outputs"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "role"
                          ]
                        }
                      ]
                    },
                    "minItems": 0,
                    "type": "array"
                  },
                  "citations": {
                    "description": "Inline citations for the generated reply.",
                    "items": {
                      "description": "A section of the generated reply which cites external knowledge.\n",
                      "properties": {
                        "document_ids": {
                          "description": "Identifiers of documents cited by this section of the generated reply.\n",
                          "items": {
                            "type": "string"
                          },
                          "minItems": 1,
                          "type": "array"
                        },
                        "end": {
                          "description": "The index of text that the citation ends after, counting from zero. For example, a generation of `Hello, world!` with a citation on `world` would have an end value of `11`. This is because the citation ends after `d`, which is the eleventh character.\n",
                          "type": "integer"
                        },
                        "start": {
                          "description": "The index of text that the citation starts at, counting from zero. For example, a generation of `Hello, world!` with a citation on `world` would have a start value of `7`. This is because the citation starts at `w`, which is the seventh character.\n",
                          "type": "integer"
                        },
                        "text": {
                          "description": "The text of the citation. For example, a generation of `Hello, world!` with a citation of `world` would have a text value of `world`.\n",
                          "minLength": 1,
                          "type": "string"
                        },
                        "type": {
                          "description": "The type of citation which indicates what part of the response the citation is for.\n",
                          "enum": [
                            "TEXT_CONTENT",
                            "PLAN"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "start",
                        "end",
                        "text",
                        "document_ids"
                      ]
                    },
                    "minItems": 0,
                    "type": "array"
                  },
                  "documents": {
                    "description": "Documents seen by the model when generating the reply.",
                    "items": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Relevant information that could be used by the model to generate a more accurate reply.\nThe contents of each document are generally short (under 300 words), and are passed in the form of a\ndictionary of strings. Some suggested keys are \"text\", \"author\", \"date\". Both the key name and the value will be\npassed to the model.\n",
                      "properties": {
                        "id": {
                          "description": "Unique identifier for this document.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "minItems": 0,
                    "type": "array"
                  },
                  "finish_reason": {
                    "enum": [
                      "COMPLETE",
                      "STOP_SEQUENCE",
                      "ERROR",
                      "ERROR_TOXIC",
                      "ERROR_LIMIT",
                      "USER_CANCEL",
                      "MAX_TOKENS"
                    ],
                    "type": "string"
                  },
                  "generation_id": {
                    "description": "Unique identifier for the generated reply. Useful for submitting feedback.",
                    "format": "uuid",
                    "type": "string"
                  },
                  "is_search_required": {
                    "description": "Denotes that a search for documents is required during the RAG flow.",
                    "type": "boolean"
                  },
                  "meta": {
                    "properties": {
                      "api_version": {
                        "properties": {
                          "is_deprecated": {
                            "type": "boolean"
                          },
                          "is_experimental": {
                            "type": "boolean"
                          },
                          "version": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "version"
                        ],
                        "type": "object"
                      },
                      "billed_units": {
                        "properties": {
                          "classifications": {
                            "description": "The number of billed classifications units.\n",
                            "type": "number"
                          },
                          "images": {
                            "description": "The number of billed images.\n",
                            "type": "number"
                          },
                          "input_tokens": {
                            "description": "The number of billed input tokens.\n",
                            "type": "number"
                          },
                          "output_tokens": {
                            "description": "The number of billed output tokens.\n",
                            "type": "number"
                          },
                          "search_units": {
                            "description": "The number of billed search units.\n",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "tokens": {
                        "properties": {
                          "input_tokens": {
                            "description": "The number of tokens used as input to the model.\n",
                            "type": "number"
                          },
                          "output_tokens": {
                            "description": "The number of tokens produced by the model.\n",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "warnings": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "response_id": {
                    "description": "Unique identifier for the response.",
                    "format": "uuid",
                    "type": "string"
                  },
                  "search_queries": {
                    "description": "Generated search queries, meant to be used as part of the RAG flow.",
                    "items": {
                      "description": "The generated search query. Contains the text of the query and a unique identifier for the query.\n",
                      "properties": {
                        "generation_id": {
                          "description": "Unique identifier for the generated search query. Useful for submitting feedback.\n",
                          "format": "uuid",
                          "type": "string"
                        },
                        "text": {
                          "description": "The text of the search query.\n",
                          "type": "string"
                        }
                      },
                      "required": [
                        "text",
                        "generation_id"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "search_results": {
                    "description": "Documents retrieved from each of the conducted searches.",
                    "items": {
                      "properties": {
                        "connector": {
                          "description": "The connector from which this result comes from.\n",
                          "properties": {
                            "id": {
                              "description": "The identifier of the connector.\n",
                              "minLength": 1,
                              "type": "string"
                            }
                          },
                          "required": [
                            "id"
                          ],
                          "type": "object"
                        },
                        "continue_on_failure": {
                          "description": "Whether a chat request should continue or not if the request to this connector fails.\n",
                          "type": "boolean"
                        },
                        "document_ids": {
                          "description": "Identifiers of documents found by this search query.\n",
                          "items": {
                            "minLength": 1,
                            "type": "string"
                          },
                          "minLength": 0,
                          "type": "array"
                        },
                        "error_message": {
                          "description": "An error message if the search failed.\n",
                          "type": "string"
                        },
                        "search_query": {
                          "description": "The generated search query. Contains the text of the query and a unique identifier for the query.\n",
                          "properties": {
                            "generation_id": {
                              "description": "Unique identifier for the generated search query. Useful for submitting feedback.\n",
                              "format": "uuid",
                              "type": "string"
                            },
                            "text": {
                              "description": "The text of the search query.\n",
                              "type": "string"
                            }
                          },
                          "required": [
                            "text",
                            "generation_id"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "connector",
                        "document_ids"
                      ],
                      "type": "object"
                    },
                    "minItems": 0,
                    "type": "array"
                  },
                  "text": {
                    "description": "Contents of the reply generated by the model.",
                    "minLength": 1,
                    "type": "string"
                  },
                  "tool_calls": {
                    "items": {
                      "description": "Contains the tool calls generated by the model. Use it to invoke your tools.\n",
                      "properties": {
                        "name": {
                          "description": "Name of the tool to call.",
                          "type": "string"
                        },
                        "parameters": {
                          "additionalProperties": true,
                          "description": "The name and value of the parameters to use when invoking a tool.",
                          "type": "object"
                        }
                      },
                      "required": [
                        "name",
                        "parameters"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "text"
                ]
              },
              {
                "description": "StreamedChatResponse is returned in streaming mode (specified with `stream=True` in the request).",
                "discriminator": {
                  "mapping": {
                    "citation-generation": "#/components/schemas/ChatCitationGenerationEvent",
                    "debug": "#/components/schemas/ChatDebugEvent",
                    "search-queries-generation": "#/components/schemas/ChatSearchQueriesGenerationEvent",
                    "search-results": "#/components/schemas/ChatSearchResultsEvent",
                    "stream-end": "#/components/schemas/ChatStreamEndEvent",
                    "stream-start": "#/components/schemas/ChatStreamStartEvent",
                    "text-generation": "#/components/schemas/ChatTextGenerationEvent",
                    "tool-calls-chunk": "#/components/schemas/ChatToolCallsChunkEvent",
                    "tool-calls-generation": "#/components/schemas/ChatToolCallsGenerationEvent"
                  },
                  "propertyName": "event_type"
                },
                "oneOf": [
                  {
                    "allOf": [
                      {
                        "properties": {
                          "event_type": {
                            "enum": [
                              "stream-start",
                              "search-queries-generation",
                              "search-results",
                              "text-generation",
                              "citation-generation",
                              "stream-end",
                              "debug"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "event_type"
                        ]
                      },
                      {
                        "properties": {
                          "generation_id": {
                            "description": "Unique identifier for the generated reply. Useful for submitting feedback.\n",
                            "format": "uuid",
                            "minLength": 1,
                            "type": "string"
                          }
                        },
                        "required": [
                          "generation_id"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  {
                    "allOf": [
                      {
                        "properties": {
                          "event_type": {
                            "enum": [
                              "stream-start",
                              "search-queries-generation",
                              "search-results",
                              "text-generation",
                              "citation-generation",
                              "stream-end",
                              "debug"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "event_type"
                        ]
                      },
                      {
                        "properties": {
                          "search_queries": {
                            "description": "Generated search queries, meant to be used as part of the RAG flow.",
                            "items": {
                              "description": "The generated search query. Contains the text of the query and a unique identifier for the query.\n",
                              "properties": {
                                "generation_id": {
                                  "description": "Unique identifier for the generated search query. Useful for submitting feedback.\n",
                                  "format": "uuid",
                                  "type": "string"
                                },
                                "text": {
                                  "description": "The text of the search query.\n",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "text",
                                "generation_id"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "required": [
                          "search_queries"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  {
                    "allOf": [
                      {
                        "properties": {
                          "event_type": {
                            "enum": [
                              "stream-start",
                              "search-queries-generation",
                              "search-results",
                              "text-generation",
                              "citation-generation",
                              "stream-end",
                              "debug"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "event_type"
                        ]
                      },
                      {
                        "properties": {
                          "documents": {
                            "description": "Documents fetched from searches or provided by the user.\n",
                            "items": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Relevant information that could be used by the model to generate a more accurate reply.\nThe contents of each document are generally short (under 300 words), and are passed in the form of a\ndictionary of strings. Some suggested keys are \"text\", \"author\", \"date\". Both the key name and the value will be\npassed to the model.\n",
                              "properties": {
                                "id": {
                                  "description": "Unique identifier for this document.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "minItems": 0,
                            "type": "array"
                          },
                          "search_results": {
                            "description": "Conducted searches and the ids of documents retrieved from each of them.\n",
                            "items": {
                              "properties": {
                                "connector": {
                                  "description": "The connector from which this result comes from.\n",
                                  "properties": {
                                    "id": {
                                      "description": "The identifier of the connector.\n",
                                      "minLength": 1,
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "id"
                                  ],
                                  "type": "object"
                                },
                                "continue_on_failure": {
                                  "description": "Whether a chat request should continue or not if the request to this connector fails.\n",
                                  "type": "boolean"
                                },
                                "document_ids": {
                                  "description": "Identifiers of documents found by this search query.\n",
                                  "items": {
                                    "minLength": 1,
                                    "type": "string"
                                  },
                                  "minLength": 0,
                                  "type": "array"
                                },
                                "error_message": {
                                  "description": "An error message if the search failed.\n",
                                  "type": "string"
                                },
                                "search_query": {
                                  "description": "The generated search query. Contains the text of the query and a unique identifier for the query.\n",
                                  "properties": {
                                    "generation_id": {
                                      "description": "Unique identifier for the generated search query. Useful for submitting feedback.\n",
                                      "format": "uuid",
                                      "type": "string"
                                    },
                                    "text": {
                                      "description": "The text of the search query.\n",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "text",
                                    "generation_id"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "connector",
                                "document_ids"
                              ],
                              "type": "object"
                            },
                            "minItems": 0,
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  {
                    "allOf": [
                      {
                        "properties": {
                          "event_type": {
                            "enum": [
                              "stream-start",
                              "search-queries-generation",
                              "search-results",
                              "text-generation",
                              "citation-generation",
                              "stream-end",
                              "debug"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "event_type"
                        ]
                      },
                      {
                        "properties": {
                          "text": {
                            "description": "The next batch of text generated by the model.\n",
                            "minLength": 1,
                            "type": "string"
                          }
                        },
                        "required": [
                          "text"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  {
                    "allOf": [
                      {
                        "properties": {
                          "event_type": {
                            "enum": [
                              "stream-start",
                              "search-queries-generation",
                              "search-results",
                              "text-generation",
                              "citation-generation",
                              "stream-end",
                              "debug"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "event_type"
                        ]
                      },
                      {
                        "properties": {
                          "citations": {
                            "description": "Citations for the generated reply.\n",
                            "items": {
                              "description": "A section of the generated reply which cites external knowledge.\n",
                              "properties": {
                                "document_ids": {
                                  "description": "Identifiers of documents cited by this section of the generated reply.\n",
                                  "items": {
                                    "type": "string"
                                  },
                                  "minItems": 1,
                                  "type": "array"
                                },
                                "end": {
                                  "description": "The index of text that the citation ends after, counting from zero. For example, a generation of `Hello, world!` with a citation on `world` would have an end value of `11`. This is because the citation ends after `d`, which is the eleventh character.\n",
                                  "type": "integer"
                                },
                                "start": {
                                  "description": "The index of text that the citation starts at, counting from zero. For example, a generation of `Hello, world!` with a citation on `world` would have a start value of `7`. This is because the citation starts at `w`, which is the seventh character.\n",
                                  "type": "integer"
                                },
                                "text": {
                                  "description": "The text of the citation. For example, a generation of `Hello, world!` with a citation of `world` would have a text value of `world`.\n",
                                  "minLength": 1,
                                  "type": "string"
                                },
                                "type": {
                                  "description": "The type of citation which indicates what part of the response the citation is for.\n",
                                  "enum": [
                                    "TEXT_CONTENT",
                                    "PLAN"
                                  ],
                                  "type": "string"
                                }
                              },
                              "required": [
                                "start",
                                "end",
                                "text",
                                "document_ids"
                              ]
                            },
                            "type": "array"
                          }
                        },
                        "required": [
                          "citations"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  {
                    "allOf": [
                      {
                        "properties": {
                          "event_type": {
                            "enum": [
                              "stream-start",
                              "search-queries-generation",
                              "search-results",
                              "text-generation",
                              "citation-generation",
                              "stream-end",
                              "debug"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "event_type"
                        ]
                      },
                      {
                        "properties": {
                          "text": {
                            "description": "The text generated related to the tool calls generated\n",
                            "type": "string"
                          },
                          "tool_calls": {
                            "items": {
                              "description": "Contains the tool calls generated by the model. Use it to invoke your tools.\n",
                              "properties": {
                                "name": {
                                  "description": "Name of the tool to call.",
                                  "type": "string"
                                },
                                "parameters": {
                                  "additionalProperties": true,
                                  "description": "The name and value of the parameters to use when invoking a tool.",
                                  "type": "object"
                                }
                              },
                              "required": [
                                "name",
                                "parameters"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "required": [
                          "tool_calls"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  {
                    "allOf": [
                      {
                        "properties": {
                          "event_type": {
                            "enum": [
                              "stream-start",
                              "search-queries-generation",
                              "search-results",
                              "text-generation",
                              "citation-generation",
                              "stream-end",
                              "debug"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "event_type"
                        ]
                      },
                      {
                        "properties": {
                          "finish_reason": {
                            "description": "- `COMPLETE` - the model sent back a finished reply\n- `ERROR_LIMIT` - the reply was cut off because the model reached the maximum number of tokens for its context length\n- `MAX_TOKENS` - the reply was cut off because the model reached the maximum number of tokens specified by the max_tokens parameter\n- `ERROR` - something went wrong when generating the reply\n- `ERROR_TOXIC` - the model generated a reply that was deemed toxic\n",
                            "enum": [
                              "COMPLETE",
                              "ERROR_LIMIT",
                              "MAX_TOKENS",
                              "ERROR",
                              "ERROR_TOXIC"
                            ],
                            "type": "string"
                          },
                          "response": {
                            "description": "The consolidated response from the model. Contains the generated reply and all the other information streamed back in the previous events.\n",
                            "properties": {
                              "chat_history": {
                                "description": "A list of previous messages between the user and the model, meant to give the model conversational context for responding to the user's `message`.\n",
                                "items": {
                                  "discriminator": {
                                    "mapping": {
                                      "CHATBOT": "#/components/schemas/ChatMessage",
                                      "SYSTEM": "#/components/schemas/ChatMessage",
                                      "TOOL": "#/components/schemas/ChatToolMessage",
                                      "USER": "#/components/schemas/ChatMessage"
                                    },
                                    "propertyName": "role"
                                  },
                                  "oneOf": [
                                    {
                                      "description": "Represents a single message in the chat history, excluding the current user turn. It has two properties: `role` and `message`. The `role` identifies the sender (`CHATBOT`, `SYSTEM`, or `USER`), while the `message` contains the text content.\n\nThe chat_history parameter should not be used for `SYSTEM` messages in most cases. Instead, to add a `SYSTEM` role message at the beginning of a conversation, the `preamble` parameter should be used.\n",
                                      "properties": {
                                        "message": {
                                          "description": "Contents of the chat message.\n",
                                          "minLength": 1,
                                          "type": "string"
                                        },
                                        "role": {
                                          "description": "One of `CHATBOT`, `SYSTEM`, `TOOL` or `USER` to identify who the message is coming from.\n",
                                          "enum": [
                                            "CHATBOT",
                                            "SYSTEM",
                                            "USER",
                                            "TOOL"
                                          ],
                                          "type": "string"
                                        },
                                        "tool_calls": {
                                          "items": {
                                            "description": "Contains the tool calls generated by the model. Use it to invoke your tools.\n",
                                            "properties": {
                                              "name": {
                                                "description": "Name of the tool to call.",
                                                "type": "string"
                                              },
                                              "parameters": {
                                                "additionalProperties": true,
                                                "description": "The name and value of the parameters to use when invoking a tool.",
                                                "type": "object"
                                              }
                                            },
                                            "required": [
                                              "name",
                                              "parameters"
                                            ],
                                            "type": "object"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "required": [
                                        "role",
                                        "message"
                                      ]
                                    },
                                    {
                                      "description": "Represents tool result in the chat history.\n",
                                      "properties": {
                                        "role": {
                                          "description": "One of `CHATBOT`, `SYSTEM`, `TOOL` or `USER` to identify who the message is coming from.\n",
                                          "enum": [
                                            "CHATBOT",
                                            "SYSTEM",
                                            "USER",
                                            "TOOL"
                                          ],
                                          "type": "string"
                                        },
                                        "tool_results": {
                                          "items": {
                                            "properties": {
                                              "call": {
                                                "description": "Contains the tool calls generated by the model. Use it to invoke your tools.\n",
                                                "properties": {
                                                  "name": {
                                                    "description": "Name of the tool to call.",
                                                    "type": "string"
                                                  },
                                                  "parameters": {
                                                    "additionalProperties": true,
                                                    "description": "The name and value of the parameters to use when invoking a tool.",
                                                    "type": "object"
                                                  }
                                                },
                                                "required": [
                                                  "name",
                                                  "parameters"
                                                ],
                                                "type": "object"
                                              },
                                              "outputs": {
                                                "items": {
                                                  "additionalProperties": true,
                                                  "type": "object"
                                                },
                                                "minItems": 0,
                                                "type": "array"
                                              }
                                            },
                                            "required": [
                                              "call",
                                              "outputs"
                                            ],
                                            "type": "object"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "required": [
                                        "role"
                                      ]
                                    }
                                  ]
                                },
                                "minItems": 0,
                                "type": "array"
                              },
                              "citations": {
                                "description": "Inline citations for the generated reply.",
                                "items": {
                                  "description": "A section of the generated reply which cites external knowledge.\n",
                                  "properties": {
                                    "document_ids": {
                                      "description": "Identifiers of documents cited by this section of the generated reply.\n",
                                      "items": {
                                        "type": "string"
                                      },
                                      "minItems": 1,
                                      "type": "array"
                                    },
                                    "end": {
                                      "description": "The index of text that the citation ends after, counting from zero. For example, a generation of `Hello, world!` with a citation on `world` would have an end value of `11`. This is because the citation ends after `d`, which is the eleventh character.\n",
                                      "type": "integer"
                                    },
                                    "start": {
                                      "description": "The index of text that the citation starts at, counting from zero. For example, a generation of `Hello, world!` with a citation on `world` would have a start value of `7`. This is because the citation starts at `w`, which is the seventh character.\n",
                                      "type": "integer"
                                    },
                                    "text": {
                                      "description": "The text of the citation. For example, a generation of `Hello, world!` with a citation of `world` would have a text value of `world`.\n",
                                      "minLength": 1,
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "The type of citation which indicates what part of the response the citation is for.\n",
                                      "enum": [
                                        "TEXT_CONTENT",
                                        "PLAN"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "start",
                                    "end",
                                    "text",
                                    "document_ids"
                                  ]
                                },
                                "minItems": 0,
                                "type": "array"
                              },
                              "documents": {
                                "description": "Documents seen by the model when generating the reply.",
                                "items": {
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "description": "Relevant information that could be used by the model to generate a more accurate reply.\nThe contents of each document are generally short (under 300 words), and are passed in the form of a\ndictionary of strings. Some suggested keys are \"text\", \"author\", \"date\". Both the key name and the value will be\npassed to the model.\n",
                                  "properties": {
                                    "id": {
                                      "description": "Unique identifier for this document.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "minItems": 0,
                                "type": "array"
                              },
                              "finish_reason": {
                                "enum": [
                                  "COMPLETE",
                                  "STOP_SEQUENCE",
                                  "ERROR",
                                  "ERROR_TOXIC",
                                  "ERROR_LIMIT",
                                  "USER_CANCEL",
                                  "MAX_TOKENS"
                                ],
                                "type": "string"
                              },
                              "generation_id": {
                                "description": "Unique identifier for the generated reply. Useful for submitting feedback.",
                                "format": "uuid",
                                "type": "string"
                              },
                              "is_search_required": {
                                "description": "Denotes that a search for documents is required during the RAG flow.",
                                "type": "boolean"
                              },
                              "meta": {
                                "properties": {
                                  "api_version": {
                                    "properties": {
                                      "is_deprecated": {
                                        "type": "boolean"
                                      },
                                      "is_experimental": {
                                        "type": "boolean"
                                      },
                                      "version": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "version"
                                    ],
                                    "type": "object"
                                  },
                                  "billed_units": {
                                    "properties": {
                                      "classifications": {
                                        "description": "The number of billed classifications units.\n",
                                        "type": "number"
                                      },
                                      "images": {
                                        "description": "The number of billed images.\n",
                                        "type": "number"
                                      },
                                      "input_tokens": {
                                        "description": "The number of billed input tokens.\n",
                                        "type": "number"
                                      },
                                      "output_tokens": {
                                        "description": "The number of billed output tokens.\n",
                                        "type": "number"
                                      },
                                      "search_units": {
                                        "description": "The number of billed search units.\n",
                                        "type": "number"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "tokens": {
                                    "properties": {
                                      "input_tokens": {
                                        "description": "The number of tokens used as input to the model.\n",
                                        "type": "number"
                                      },
                                      "output_tokens": {
                                        "description": "The number of tokens produced by the model.\n",
                                        "type": "number"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "warnings": {
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              },
                              "response_id": {
                                "description": "Unique identifier for the response.",
                                "format": "uuid",
                                "type": "string"
                              },
                              "search_queries": {
                                "description": "Generated search queries, meant to be used as part of the RAG flow.",
                                "items": {
                                  "description": "The generated search query. Contains the text of the query and a unique identifier for the query.\n",
                                  "properties": {
                                    "generation_id": {
                                      "description": "Unique identifier for the generated search query. Useful for submitting feedback.\n",
                                      "format": "uuid",
                                      "type": "string"
                                    },
                                    "text": {
                                      "description": "The text of the search query.\n",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "text",
                                    "generation_id"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "search_results": {
                                "description": "Documents retrieved from each of the conducted searches.",
                                "items": {
                                  "properties": {
                                    "connector": {
                                      "description": "The connector from which this result comes from.\n",
                                      "properties": {
                                        "id": {
                                          "description": "The identifier of the connector.\n",
                                          "minLength": 1,
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "id"
                                      ],
                                      "type": "object"
                                    },
                                    "continue_on_failure": {
                                      "description": "Whether a chat request should continue or not if the request to this connector fails.\n",
                                      "type": "boolean"
                                    },
                                    "document_ids": {
                                      "description": "Identifiers of documents found by this search query.\n",
                                      "items": {
                                        "minLength": 1,
                                        "type": "string"
                                      },
                                      "minLength": 0,
                                      "type": "array"
                                    },
                                    "error_message": {
                                      "description": "An error message if the search failed.\n",
                                      "type": "string"
                                    },
                                    "search_query": {
                                      "description": "The generated search query. Contains the text of the query and a unique identifier for the query.\n",
                                      "properties": {
                                        "generation_id": {
                                          "description": "Unique identifier for the generated search query. Useful for submitting feedback.\n",
                                          "format": "uuid",
                                          "type": "string"
                                        },
                                        "text": {
                                          "description": "The text of the search query.\n",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "text",
                                        "generation_id"
                                      ],
                                      "type": "object"
                                    }
                                  },
                                  "required": [
                                    "connector",
                                    "document_ids"
                                  ],
                                  "type": "object"
                                },
                                "minItems": 0,
                                "type": "array"
                              },
                              "text": {
                                "description": "Contents of the reply generated by the model.",
                                "minLength": 1,
                                "type": "string"
                              },
                              "tool_calls": {
                                "items": {
                                  "description": "Contains the tool calls generated by the model. Use it to invoke your tools.\n",
                                  "properties": {
                                    "name": {
                                      "description": "Name of the tool to call.",
                                      "type": "string"
                                    },
                                    "parameters": {
                                      "additionalProperties": true,
                                      "description": "The name and value of the parameters to use when invoking a tool.",
                                      "type": "object"
                                    }
                                  },
                                  "required": [
                                    "name",
                                    "parameters"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "text"
                            ]
                          }
                        },
                        "required": [
                          "finish_reason",
                          "response"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  {
                    "allOf": [
                      {
                        "properties": {
                          "event_type": {
                            "enum": [
                              "stream-start",
                              "search-queries-generation",
                              "search-results",
                              "text-generation",
                              "citation-generation",
                              "stream-end",
                              "debug"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "event_type"
                        ]
                      },
                      {
                        "properties": {
                          "text": {
                            "type": "string"
                          },
                          "tool_call_delta": {
                            "description": "Contains the chunk of the tool call generation in the stream.\n",
                            "properties": {
                              "index": {
                                "description": "Index of the tool call generated\n",
                                "type": "number"
                              },
                              "name": {
                                "description": "Name of the tool call\n",
                                "type": "string"
                              },
                              "parameters": {
                                "description": "Chunk of the tool parameters\n",
                                "type": "string"
                              },
                              "text": {
                                "description": "Chunk of the tool plan text\n",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "required": [
                          "tool_call_delta"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  {
                    "allOf": [
                      {
                        "properties": {
                          "event_type": {
                            "enum": [
                              "stream-start",
                              "search-queries-generation",
                              "search-results",
                              "text-generation",
                              "citation-generation",
                              "stream-end",
                              "debug"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "event_type"
                        ]
                      },
                      {
                        "properties": {
                          "prompt": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "description": "OK"
    },
    "400": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when the request is not well formed. This could be because:\n  - JSON is invalid\n  - The request is missing required fields\n  - The request contains an invalid combination of fields\n"
    },
    "401": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error indicates that the operation attempted to be performed is not allowed. This could be because:\n  - The api token is invalid\n  - The user does not have the necessary permissions\n"
    },
    "403": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error indicates that the operation attempted to be performed is not allowed. This could be because:\n  - The api token is invalid\n  - The user does not have the necessary permissions\n"
    },
    "404": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when a resource is not found. This could be because:\n  - The endpoint does not exist\n  - The resource does not exist eg model id, dataset id\n"
    },
    "422": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when the request is not well formed. This could be because:\n  - JSON is invalid\n  - The request is missing required fields\n  - The request contains an invalid combination of fields\n"
    },
    "429": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "Too many requests"
    },
    "498": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when a request or response contains a deny-listed token.\n"
    },
    "499": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when a request is cancelled by the user.\n"
    },
    "500": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when an uncategorised internal server error occurs.\n"
    },
    "501": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when the requested feature is not implemented.\n"
    },
    "503": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when the service is unavailable. This could be due to:\n  - Too many users trying to access the service at the same time\n"
    },
    "504": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when a request to the server times out. This could be due to:\n  - An internal services taking too long to respond\n"
    }
  },
  "summary": "Chat API (v1)"
}
