{
  "description": "This endpoint returns text embeddings. An embedding is a list of floating point numbers that captures semantic information about the text that it represents.\n\nEmbeddings can be used to create text classifiers as well as empower semantic search. To learn more about embeddings, see the embedding page.\n\nIf you want to learn more how to use the embedding model, have a look at the [Semantic Search Guide](https://docs.cohere.com/docs/semantic-search).",
  "operationId": "embedv2",
  "parameters": [
    {
      "description": "The name of the project that is making the request.\n",
      "example": "my-cool-project",
      "in": "header",
      "name": "X-Client-Name",
      "required": false,
      "schema": {
        "type": "string"
      }
    }
  ],
  "requestBody": {
    "content": {
      "application/json": {
        "schema": {
          "properties": {
            "embedding_types": {
              "default": [
                "float"
              ],
              "description": "Specifies the types of embeddings you want to get back. Can be one or more of the following types.\n\n* `\"float\"`: Use this when you want to get back the default float embeddings. Supported with all Embed models.\n* `\"int8\"`: Use this when you want to get back signed int8 embeddings. Supported with Embed v3.0 and newer Embed models.\n* `\"uint8\"`: Use this when you want to get back unsigned int8 embeddings. Supported with Embed v3.0 and newer Embed models.\n* `\"binary\"`: Use this when you want to get back signed binary embeddings. Supported with Embed v3.0 and newer Embed models.\n* `\"ubinary\"`: Use this when you want to get back unsigned binary embeddings. Supported with Embed v3.0 and newer Embed models.\n* `\"base64\"`: Use this when you want to get back base64 embeddings. Supported with Embed v3.0 and newer Embed models.",
              "items": {
                "enum": [
                  "float",
                  "int8",
                  "uint8",
                  "binary",
                  "ubinary",
                  "base64"
                ],
                "type": "string",
                "writeOnly": true
              },
              "type": "array",
              "writeOnly": true
            },
            "images": {
              "description": "An array of image data URIs for the model to embed. Maximum number of images per call is `1`.\n\nThe image must be a valid [data URI](https://developer.mozilla.org/en-US/docs/Web/URI/Schemes/data). The image must be in either `image/jpeg`, `image/png`, `image/webp`, or `image/gif` format and has a maximum size of 5MB.\n\nImage embeddings are supported with Embed v3.0 and newer models.",
              "items": {
                "type": "string",
                "writeOnly": true
              },
              "maxItems": 1,
              "minItems": 1,
              "type": "array"
            },
            "input_type": {
              "description": "Specifies the type of input passed to the model. Required for embedding models v3 and higher.\n\n- `\"search_document\"`: Used for embeddings stored in a vector database for search use-cases.\n- `\"search_query\"`: Used for embeddings of search queries run against a vector DB to find relevant documents.\n- `\"classification\"`: Used for embeddings passed through a text classifier.\n- `\"clustering\"`: Used for the embeddings run through a clustering algorithm.\n- `\"image\"`: Used for embeddings with image input.\n",
              "enum": [
                "search_document",
                "search_query",
                "classification",
                "clustering",
                "image"
              ],
              "type": "string"
            },
            "inputs": {
              "description": "An array of inputs for the model to embed. Maximum number of inputs per call is `96`. An input can contain a mix of text and image components.",
              "items": {
                "properties": {
                  "content": {
                    "description": "An array of objects containing the input data for the model to embed.",
                    "items": {
                      "discriminator": {
                        "mapping": {
                          "image_url": "#/components/schemas/EmbedImage",
                          "text": "#/components/schemas/EmbedText"
                        },
                        "propertyName": "type"
                      },
                      "oneOf": [
                        {
                          "description": "Image content of the input. Supported with Embed v3.0 and newer models.",
                          "properties": {
                            "image_url": {
                              "description": "Base64 url of image.",
                              "properties": {
                                "url": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "url"
                              ],
                              "type": "object"
                            },
                            "type": {
                              "enum": [
                                "text",
                                "image_url"
                              ],
                              "type": "string",
                              "writeOnly": true
                            }
                          },
                          "type": "object"
                        },
                        {
                          "description": "Text content of the input.",
                          "properties": {
                            "text": {
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "text",
                                "image_url"
                              ],
                              "type": "string",
                              "writeOnly": true
                            }
                          },
                          "type": "object"
                        }
                      ]
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "content"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "max_tokens": {
              "description": "The maximum number of tokens to embed per input. If the input text is longer than this, it will be truncated according to the `truncate` parameter.",
              "type": "integer"
            },
            "model": {
              "description": "ID of one of the available [Embedding models](https://docs.cohere.com/docs/cohere-embed).",
              "type": "string",
              "writeOnly": true
            },
            "output_dimension": {
              "description": "The number of dimensions of the output embedding. This is only available for `embed-v4` and newer models.\nPossible values are `256`, `512`, `1024`, and `1536`. The default is `1536`.",
              "type": "integer"
            },
            "texts": {
              "description": "An array of strings for the model to embed. Maximum number of texts per call is `96`.",
              "items": {
                "type": "string",
                "writeOnly": true
              },
              "maxItems": 96,
              "minItems": 1,
              "type": "array",
              "writeOnly": true
            },
            "truncate": {
              "default": "END",
              "description": "One of `NONE|START|END` to specify how the API will handle inputs longer than the maximum token length.\n\nPassing `START` will discard the start of the input. `END` will discard the end of the input. In both cases, input is discarded until the remaining input is exactly the maximum input token length for the model.\n\nIf `NONE` is selected, when the input exceeds the maximum input token length an error will be returned.",
              "enum": [
                "NONE",
                "START",
                "END"
              ],
              "type": "string",
              "writeOnly": true
            }
          },
          "required": [
            "model",
            "input_type"
          ],
          "type": "object"
        }
      }
    },
    "description": ""
  },
  "responses": {
    "200": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "embeddings": {
                "description": "An object with different embedding types. The length of each embedding type array will be the same as the length of the original `texts` array.",
                "items": {
                  "items": {
                    "type": "number"
                  },
                  "type": "array"
                },
                "properties": {
                  "base64": {
                    "description": "An array of base64 embeddings. Each string is the result of appending the float embedding bytes together and base64 encoding that.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "binary": {
                    "description": "An array of packed signed binary embeddings. The length of each binary embedding is 1/8 the length of the float embeddings of the provided model. Each value is between -128 and 127.",
                    "items": {
                      "items": {
                        "type": "integer"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  "float": {
                    "description": "An array of float embeddings.",
                    "items": {
                      "items": {
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  "int8": {
                    "description": "An array of signed int8 embeddings. Each value is between -128 and 127.",
                    "items": {
                      "items": {
                        "type": "integer"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  "ubinary": {
                    "description": "An array of packed unsigned binary embeddings. The length of each binary embedding is 1/8 the length of the float embeddings of the provided model. Each value is between 0 and 255.",
                    "items": {
                      "items": {
                        "type": "integer"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  "uint8": {
                    "description": "An array of unsigned int8 embeddings. Each value is between 0 and 255.",
                    "items": {
                      "items": {
                        "type": "integer"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "id": {
                "type": "string"
              },
              "images": {
                "description": "The image entries for which embeddings were returned.",
                "items": {
                  "properties": {
                    "bit_depth": {
                      "description": "Bit depth of the image",
                      "format": "int64",
                      "type": "number"
                    },
                    "format": {
                      "description": "Format of the image",
                      "type": "string"
                    },
                    "height": {
                      "description": "Height of the image in pixels",
                      "format": "int64",
                      "type": "number"
                    },
                    "width": {
                      "description": "Width of the image in pixels",
                      "format": "int64",
                      "type": "number"
                    }
                  },
                  "required": [
                    "width",
                    "height",
                    "format",
                    "bit_depth"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "meta": {
                "properties": {
                  "api_version": {
                    "properties": {
                      "is_deprecated": {
                        "type": "boolean"
                      },
                      "is_experimental": {
                        "type": "boolean"
                      },
                      "version": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "version"
                    ],
                    "type": "object"
                  },
                  "billed_units": {
                    "properties": {
                      "classifications": {
                        "description": "The number of billed classifications units.\n",
                        "type": "number"
                      },
                      "images": {
                        "description": "The number of billed images.\n",
                        "type": "number"
                      },
                      "input_tokens": {
                        "description": "The number of billed input tokens.\n",
                        "type": "number"
                      },
                      "output_tokens": {
                        "description": "The number of billed output tokens.\n",
                        "type": "number"
                      },
                      "search_units": {
                        "description": "The number of billed search units.\n",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "cached_tokens": {
                    "description": "The number of prompt tokens that hit the inference cache.\n",
                    "type": "number"
                  },
                  "tokens": {
                    "properties": {
                      "input_tokens": {
                        "description": "The number of tokens used as input to the model.\n",
                        "type": "number"
                      },
                      "output_tokens": {
                        "description": "The number of tokens produced by the model.\n",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "warnings": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "response_type": {
                "enum": [
                  "embeddings_floats",
                  "embeddings_by_type"
                ],
                "type": "string"
              },
              "texts": {
                "description": "The text entries for which embeddings were returned.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "id",
              "embeddings",
              "api_version"
            ],
            "type": "object"
          }
        }
      },
      "description": "OK",
      "headers": {
        "X-API-Warning": {
          "description": "The name of the project that is making the request.",
          "example": "Parameter xyz is deprecated, for more information please refer to https://docs.cohere.com/versioning-reference",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      }
    },
    "400": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when the request is not well formed. This could be because:\n  - JSON is invalid\n  - The request is missing required fields\n  - The request contains an invalid combination of fields\n"
    },
    "401": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error indicates that the operation attempted to be performed is not allowed. This could be because:\n  - The api token is invalid\n  - The user does not have the necessary permissions\n"
    },
    "403": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error indicates that the operation attempted to be performed is not allowed. This could be because:\n  - The api token is invalid\n  - The user does not have the necessary permissions\n"
    },
    "404": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when a resource is not found. This could be because:\n  - The endpoint does not exist\n  - The resource does not exist eg model id, dataset id\n"
    },
    "422": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when the request is not well formed. This could be because:\n  - JSON is invalid\n  - The request is missing required fields\n  - The request contains an invalid combination of fields\n"
    },
    "429": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "Too many requests"
    },
    "498": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when a request or response contains a deny-listed token.\n"
    },
    "499": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when a request is cancelled by the user.\n"
    },
    "500": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when an uncategorised internal server error occurs.\n"
    },
    "501": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when the requested feature is not implemented.\n"
    },
    "503": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when the service is unavailable. This could be due to:\n  - Too many users trying to access the service at the same time\n"
    },
    "504": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when a request to the server times out. This could be due to:\n  - An internal services taking too long to respond\n"
    }
  },
  "summary": "Embed API (v2)"
}
