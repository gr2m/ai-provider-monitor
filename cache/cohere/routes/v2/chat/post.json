{
  "description": "Generates a text response to a user message and streams it down, token by token. To learn how to use the Chat API with streaming follow our [Text Generation guides](https://docs.cohere.com/v2/docs/chat-api).\n\nFollow the [Migration Guide](https://docs.cohere.com/v2/docs/migrating-v1-to-v2) for instructions on moving from API v1 to API v2.\n",
  "operationId": "chatv2",
  "parameters": [
    {
      "description": "The name of the project that is making the request.\n",
      "example": "my-cool-project",
      "in": "header",
      "name": "X-Client-Name",
      "required": false,
      "schema": {
        "type": "string"
      }
    }
  ],
  "requestBody": {
    "content": {
      "application/json": {
        "schema": {
          "properties": {
            "citation_options": {
              "description": "Options for controlling citation generation.",
              "properties": {
                "mode": {
                  "description": "Defaults to `\"accurate\"`.\nDictates the approach taken to generating citations as part of the RAG flow by allowing the user to specify whether they want `\"accurate\"` results, `\"fast\"` results or no results.\n\n**Note**: `command-r7b-12-2024` and `command-a-03-2025` only support `\"fast\"` and `\"off\"` modes. The default is `\"fast\"`.\n",
                  "enum": [
                    "FAST",
                    "ACCURATE",
                    "OFF"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "documents": {
              "description": "A list of relevant documents that the model can cite to generate a more accurate reply. Each document is either a string or document object with content and metadata.\n",
              "items": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "description": "Relevant information that could be used by the model to generate a more accurate reply.\nThe content of each document are generally short (should be under 300 words). Metadata should be used to provide additional information, both the key name and the value will be\npassed to the model.\n",
                    "properties": {
                      "data": {
                        "description": "A relevant document that the model can cite to generate a more accurate reply. Each document is a string-any dictionary.\n",
                        "type": "object"
                      },
                      "id": {
                        "description": "Unique identifier for this document which will be referenced in citations. If not provided an ID will be automatically generated.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  }
                ]
              },
              "type": "array"
            },
            "frequency_penalty": {
              "description": "Defaults to `0.0`, min value of `0.0`, max value of `1.0`.\nUsed to reduce repetitiveness of generated tokens. The higher the value, the stronger a penalty is applied to previously present tokens, proportional to how many times they have already appeared in the prompt or prior generation.\n",
              "format": "float",
              "type": "number"
            },
            "k": {
              "default": 0,
              "description": "Ensures that only the top `k` most likely tokens are considered for generation at each step. When `k` is set to `0`, k-sampling is disabled.\nDefaults to `0`, min value of `0`, max value of `500`.\n",
              "maximum": 500,
              "minimum": 0,
              "type": "integer"
            },
            "logprobs": {
              "description": "Defaults to `false`. When set to `true`, the log probabilities of the generated tokens will be included in the response.\n",
              "type": "boolean"
            },
            "max_tokens": {
              "description": "The maximum number of output tokens the model will generate in the response. If not set, `max_tokens` defaults to the model's maximum output token limit. You can find the maximum output token limits for each model in the [model documentation](https://docs.cohere.com/docs/models).\n\n**Note**: Setting a low value may result in incomplete generations. In such cases, the `finish_reason` field in the response will be set to `\"MAX_TOKENS\"`.\n\n**Note**: If `max_tokens` is set higher than the model's maximum output token limit, the generation will be capped at that model-specific maximum limit.\n",
              "type": "integer"
            },
            "messages": {
              "description": "A list of chat messages in chronological order, representing a conversation between the user and the model.\n\nMessages can be from `User`, `Assistant`, `Tool` and `System` roles. Learn more about messages and roles in [the Chat API guide](https://docs.cohere.com/v2/docs/chat-api).\n",
              "items": {
                "description": "Represents a single message in the chat history from a given role.",
                "discriminator": {
                  "mapping": {
                    "assistant": "#/components/schemas/AssistantMessageV2",
                    "system": "#/components/schemas/SystemMessageV2",
                    "tool": "#/components/schemas/ToolMessageV2",
                    "user": "#/components/schemas/UserMessageV2"
                  },
                  "propertyName": "role"
                },
                "oneOf": [
                  {
                    "description": "A message from the user.",
                    "properties": {
                      "content": {
                        "description": "The content of the message. This can be a string or a list of content blocks.\nIf a string is provided, it will be treated as a text content block.\n",
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "items": {
                              "description": "A Content block which contains information about the content type and the content itself.",
                              "discriminator": {
                                "mapping": {
                                  "image_url": "#/components/schemas/ImageContent",
                                  "text": "#/components/schemas/ChatTextContent"
                                },
                                "propertyName": "type"
                              },
                              "oneOf": [
                                {
                                  "description": "Text content of the message.",
                                  "properties": {
                                    "text": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "enum": [
                                        "text"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "text"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "description": "Image content of the message.",
                                  "properties": {
                                    "image_url": {
                                      "properties": {
                                        "detail": {
                                          "description": "Controls the level of detail in image processing. `\"auto\"` is the default and lets the system choose, `\"low\"` is faster but less detailed, and `\"high\"` preserves maximum detail. You can save tokens and speed up responses by using detail: `\"low\"`.\n",
                                          "enum": [
                                            "auto",
                                            "low",
                                            "high"
                                          ],
                                          "type": "string"
                                        },
                                        "url": {
                                          "description": "URL of an image. Can be either a base64 data URI or a web URL.\n",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "url"
                                      ],
                                      "type": "object"
                                    },
                                    "type": {
                                      "description": "Type of message content\n",
                                      "enum": [
                                        "text",
                                        "image_url"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "image_url"
                                  ],
                                  "type": "object"
                                }
                              ]
                            },
                            "type": "array"
                          }
                        ]
                      },
                      "role": {
                        "enum": [
                          "user"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "role",
                      "content"
                    ],
                    "title": "User Message",
                    "type": "object"
                  },
                  {
                    "description": "A message from the assistant role can contain text and tool call information.",
                    "properties": {
                      "citations": {
                        "items": {
                          "description": "Citation information containing sources and the text cited.",
                          "properties": {
                            "content_index": {
                              "description": "Index of the content block in which this citation appears.",
                              "type": "integer"
                            },
                            "end": {
                              "description": "End index of the cited snippet in the original source text.",
                              "type": "integer"
                            },
                            "sources": {
                              "items": {
                                "description": "A source object containing information about the source of the data cited.",
                                "discriminator": {
                                  "mapping": {
                                    "document": "#/components/schemas/ChatDocumentSource",
                                    "tool": "#/components/schemas/ChatToolSource"
                                  },
                                  "propertyName": "type"
                                },
                                "oneOf": [
                                  {
                                    "properties": {
                                      "id": {
                                        "description": "The unique identifier of the document",
                                        "type": "string"
                                      },
                                      "tool_output": {
                                        "additionalProperties": true,
                                        "type": "object"
                                      }
                                    },
                                    "title": "Tool Output",
                                    "type": "object"
                                  },
                                  {
                                    "description": "A document source object containing the unique identifier of the document and the document itself.",
                                    "properties": {
                                      "document": {
                                        "additionalProperties": true,
                                        "type": "object"
                                      },
                                      "id": {
                                        "description": "The unique identifier of the document",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                ]
                              },
                              "type": "array"
                            },
                            "start": {
                              "description": "Start index of the cited snippet in the original source text.",
                              "type": "integer"
                            },
                            "text": {
                              "description": "Text snippet that is being cited.",
                              "type": "string"
                            },
                            "type": {
                              "description": "The type of citation which indicates what part of the response the citation is for.\n",
                              "enum": [
                                "TEXT_CONTENT",
                                "THINKING_CONTENT",
                                "PLAN"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "content": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "items": {
                              "discriminator": {
                                "mapping": {
                                  "text": "#/components/schemas/ChatTextContent",
                                  "thinking": "#/components/schemas/ChatThinkingContent"
                                },
                                "propertyName": "type"
                              },
                              "oneOf": [
                                {
                                  "description": "Text content of the message.",
                                  "properties": {
                                    "text": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "enum": [
                                        "text"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "text"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "description": "Thinking content of the message. This will be present when `thinking` is enabled, and will contain the models internal reasoning.",
                                  "properties": {
                                    "thinking": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "enum": [
                                        "thinking"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "thinking"
                                  ],
                                  "type": "object"
                                }
                              ]
                            },
                            "type": "array"
                          }
                        ]
                      },
                      "role": {
                        "enum": [
                          "assistant"
                        ],
                        "type": "string"
                      },
                      "tool_calls": {
                        "items": {
                          "description": "An array of tool calls to be made.",
                          "properties": {
                            "function": {
                              "properties": {
                                "arguments": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "id": {
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "function"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "tool_plan": {
                        "description": "A chain-of-thought style reflection and plan that the model generates when working with Tools.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "role"
                    ],
                    "title": "Assistant Message",
                    "type": "object"
                  },
                  {
                    "description": "A message from the system.",
                    "properties": {
                      "content": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "items": {
                              "discriminator": {
                                "mapping": {
                                  "text": "#/components/schemas/ChatTextContent"
                                },
                                "propertyName": "type"
                              },
                              "oneOf": [
                                {
                                  "description": "Text content of the message.",
                                  "properties": {
                                    "text": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "enum": [
                                        "text"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "text"
                                  ],
                                  "type": "object"
                                }
                              ]
                            },
                            "type": "array"
                          }
                        ]
                      },
                      "role": {
                        "enum": [
                          "system"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "role",
                      "content"
                    ],
                    "title": "System Message",
                    "type": "object"
                  },
                  {
                    "description": "A message with Tool outputs.",
                    "properties": {
                      "content": {
                        "description": "Outputs from a tool. The content should formatted as a JSON object string, or a list of tool content blocks",
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "items": {
                              "description": "A content block which contains information about the content of a tool result",
                              "discriminator": {
                                "mapping": {
                                  "document": "#/components/schemas/DocumentContent",
                                  "text": "#/components/schemas/ChatTextContent"
                                },
                                "propertyName": "type"
                              },
                              "oneOf": [
                                {
                                  "description": "Text content of the message.",
                                  "properties": {
                                    "text": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "enum": [
                                        "text"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "text"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "description": "Document content.",
                                  "properties": {
                                    "document": {
                                      "description": "Relevant information that could be used by the model to generate a more accurate reply.\nThe content of each document are generally short (should be under 300 words). Metadata should be used to provide additional information, both the key name and the value will be\npassed to the model.\n",
                                      "properties": {
                                        "data": {
                                          "description": "A relevant document that the model can cite to generate a more accurate reply. Each document is a string-any dictionary.\n",
                                          "type": "object"
                                        },
                                        "id": {
                                          "description": "Unique identifier for this document which will be referenced in citations. If not provided an ID will be automatically generated.",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "data"
                                      ],
                                      "type": "object"
                                    },
                                    "type": {
                                      "enum": [
                                        "document"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "document"
                                  ],
                                  "type": "object"
                                }
                              ]
                            },
                            "type": "array"
                          }
                        ]
                      },
                      "role": {
                        "enum": [
                          "tool"
                        ],
                        "type": "string"
                      },
                      "tool_call_id": {
                        "description": "The id of the associated tool call that has provided the given content",
                        "type": "string"
                      }
                    },
                    "required": [
                      "role",
                      "tool_call_id",
                      "content"
                    ],
                    "title": "Tool Message",
                    "type": "object"
                  }
                ]
              },
              "type": "array"
            },
            "model": {
              "description": "The name of a compatible [Cohere model](https://docs.cohere.com/v2/docs/models) or the ID of a [fine-tuned](https://docs.cohere.com/v2/docs/chat-fine-tuning) model.",
              "type": "string"
            },
            "p": {
              "default": 0.75,
              "description": "Ensures that only the most likely tokens, with total probability mass of `p`, are considered for generation at each step. If both `k` and `p` are enabled, `p` acts after `k`.\nDefaults to `0.75`. min value of `0.01`, max value of `0.99`.\n",
              "format": "float",
              "maximum": 0.99,
              "minimum": 0.01,
              "type": "number"
            },
            "presence_penalty": {
              "description": "Defaults to `0.0`, min value of `0.0`, max value of `1.0`.\nUsed to reduce repetitiveness of generated tokens. Similar to `frequency_penalty`, except that this penalty is applied equally to all tokens that have already appeared, regardless of their exact frequencies.\n",
              "format": "float",
              "type": "number"
            },
            "response_format": {
              "description": "Configuration for forcing the model output to adhere to the specified format. Supported on [Command R](https://docs.cohere.com/v2/docs/command-r), [Command R+](https://docs.cohere.com/v2/docs/command-r-plus) and newer models.\n\nThe model can be forced into outputting JSON objects by setting `{ \"type\": \"json_object\" }`.\n\nA [JSON Schema](https://json-schema.org/) can optionally be provided, to ensure a specific structure.\n\n**Note**: When using  `{ \"type\": \"json_object\" }` your `message` should always explicitly instruct the model to generate a JSON (eg: _\"Generate a JSON ...\"_) . Otherwise the model may end up getting stuck generating an infinite stream of characters and eventually run out of context length.\n\n**Note**: When `json_schema` is not specified, the generated object can have up to 5 layers of nesting.\n\n**Limitation**: The parameter is not supported when used in combinations with the `documents` or `tools` parameters.\n",
              "discriminator": {
                "mapping": {
                  "json_object": "#/components/schemas/JsonResponseFormatV2",
                  "text": "#/components/schemas/ChatTextResponseFormatV2"
                },
                "propertyName": "type"
              },
              "oneOf": [
                {
                  "properties": {
                    "type": {
                      "description": "Defaults to `\"text\"`.\n\nWhen set to `\"json_object\"`, the model's output will be a valid JSON Object.\n",
                      "enum": [
                        "text",
                        "json_object"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "type": "object"
                },
                {
                  "properties": {
                    "json_schema": {
                      "description": "A [JSON schema](https://json-schema.org/overview/what-is-jsonschema) object that the output will adhere to. There are some restrictions we have on the schema, refer to [our guide](https://docs.cohere.com/docs/structured-outputs-json#schema-constraints) for more information.\nExample (required name and age object):\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\"type\": \"string\"},\n    \"age\": {\"type\": \"integer\"}\n  },\n  \"required\": [\"name\", \"age\"]\n}\n```\n\n**Note**: This field must not be specified when the `type` is set to `\"text\"`.\n",
                      "type": "object"
                    },
                    "type": {
                      "description": "Defaults to `\"text\"`.\n\nWhen set to `\"json_object\"`, the model's output will be a valid JSON Object.\n",
                      "enum": [
                        "text",
                        "json_object"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "type": "object"
                }
              ]
            },
            "safety_mode": {
              "description": "Used to select the [safety instruction](https://docs.cohere.com/v2/docs/safety-modes) inserted into the prompt. Defaults to `CONTEXTUAL`.\nWhen `OFF` is specified, the safety instruction will be omitted.\n\nSafety modes are not yet configurable in combination with `tools` and `documents` parameters.\n\n**Note**: This parameter is only compatible newer Cohere models, starting with [Command R 08-2024](https://docs.cohere.com/docs/command-r#august-2024-release) and [Command R+ 08-2024](https://docs.cohere.com/docs/command-r-plus#august-2024-release).\n\n**Note**: `command-r7b-12-2024` and newer models only support `\"CONTEXTUAL\"` and `\"STRICT\"` modes.\n",
              "enum": [
                "CONTEXTUAL",
                "STRICT",
                "OFF"
              ]
            },
            "seed": {
              "description": "If specified, the backend will make a best effort to sample tokens\ndeterministically, such that repeated requests with the same\nseed and parameters should return the same result. However,\ndeterminism cannot be totally guaranteed.\n",
              "maximum": 18446744073709552000,
              "minimum": 0,
              "type": "integer"
            },
            "stop_sequences": {
              "description": "A list of up to 5 strings that the model will use to stop generation. If the model generates a string that matches any of the strings in the list, it will stop generating tokens and return the generated text up to that point not including the stop sequence.\n",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "stream": {
              "description": "Defaults to `false`.\n\nWhen `true`, the response will be a SSE stream of events.\n\nStreaming is beneficial for user interfaces that render the contents of the response piece by piece, as it gets generated.\n",
              "type": "boolean"
            },
            "strict_tools": {
              "description": "When set to `true`, tool calls in the Assistant message will be forced to follow the tool definition strictly. Learn more in the [Structured Outputs (Tools) guide](https://docs.cohere.com/docs/structured-outputs-json#structured-outputs-tools).\n\n**Note**: The first few requests with a new set of tools will take longer to process.\n",
              "type": "boolean"
            },
            "temperature": {
              "description": "Defaults to `0.3`.\n\nA non-negative float that tunes the degree of randomness in generation. Lower temperatures mean less random generations, and higher temperatures mean more random generations.\n\nRandomness can be further maximized by increasing the  value of the `p` parameter.\n",
              "format": "float",
              "maximum": 1,
              "minimum": 0,
              "type": "number"
            },
            "thinking": {
              "description": "Configuration for [reasoning features](https://docs.cohere.com/docs/reasoning).\n",
              "properties": {
                "token_budget": {
                  "description": "The maximum number of tokens the model can use for thinking, which must be set to a positive integer.\nThe model will stop thinking if it reaches the thinking token budget and will proceed with the response.\n",
                  "minimum": 1,
                  "type": "integer"
                },
                "type": {
                  "description": "Reasoning is enabled by default for models that support it, but can be turned off by setting `\"type\": \"disabled\"`.\n",
                  "enum": [
                    "enabled",
                    "disabled"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "type"
              ],
              "type": "object"
            },
            "tool_choice": {
              "description": "Used to control whether or not the model will be forced to use a tool when answering. When `REQUIRED` is specified, the model will be forced to use at least one of the user-defined tools, and the `tools` parameter must be passed in the request.\nWhen `NONE` is specified, the model will be forced **not** to use one of the specified tools, and give a direct response.\nIf tool_choice isn't specified, then the model is free to choose whether to use the specified tools or not.\n\n**Note**: This parameter is only compatible with models [Command-r7b](https://docs.cohere.com/v2/docs/command-r7b) and newer.\n",
              "enum": [
                "REQUIRED",
                "NONE"
              ]
            },
            "tools": {
              "description": "A list of tools (functions) available to the model. The model response may contain 'tool_calls' to the specified tools.\n\nLearn more in the [Tool Use guide](https://docs.cohere.com/docs/tools).\n",
              "items": {
                "properties": {
                  "function": {
                    "description": "The function to be executed.",
                    "properties": {
                      "description": {
                        "description": "The description of the function.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the function.",
                        "type": "string"
                      },
                      "parameters": {
                        "description": "The parameters of the function as a JSON schema.",
                        "type": "object"
                      }
                    },
                    "required": [
                      "name",
                      "parameters"
                    ],
                    "type": "object"
                  },
                  "type": {
                    "enum": [
                      "function"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "required": [
            "messages",
            "model"
          ],
          "type": "object"
        }
      }
    }
  },
  "responses": {
    "200": {
      "content": {
        "application/json": {
          "schema": {
            "oneOf": [
              {
                "properties": {
                  "finish_reason": {
                    "description": "The reason a chat request has finished.\n\n- **complete**: The model finished sending a complete message.\n- **max_tokens**: The number of generated tokens exceeded the model's context length or the value specified via the `max_tokens` parameter.\n- **stop_sequence**: One of the provided `stop_sequence` entries was reached in the model's generation.\n- **tool_call**: The model generated a Tool Call and is expecting a Tool Message in return\n- **error**: The generation failed due to an internal error\n",
                    "enum": [
                      "COMPLETE",
                      "STOP_SEQUENCE",
                      "MAX_TOKENS",
                      "TOOL_CALL",
                      "ERROR"
                    ],
                    "type": "string"
                  },
                  "id": {
                    "description": "Unique identifier for the generated reply. Useful for submitting feedback.",
                    "type": "string"
                  },
                  "logprobs": {
                    "items": {
                      "properties": {
                        "logprobs": {
                          "description": "The log probability of each token used to construct the text chunk.",
                          "items": {
                            "format": "float",
                            "type": "number"
                          },
                          "type": "array"
                        },
                        "text": {
                          "description": "The text chunk for which the log probabilities was calculated.",
                          "type": "string"
                        },
                        "token_ids": {
                          "description": "The token ids of each token used to construct the text chunk.",
                          "items": {
                            "type": "integer"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "token",
                        "token_ids",
                        "logprob"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "message": {
                    "description": "A message from the assistant role can contain text and tool call information.",
                    "properties": {
                      "citations": {
                        "items": {
                          "description": "Citation information containing sources and the text cited.",
                          "properties": {
                            "content_index": {
                              "description": "Index of the content block in which this citation appears.",
                              "type": "integer"
                            },
                            "end": {
                              "description": "End index of the cited snippet in the original source text.",
                              "type": "integer"
                            },
                            "sources": {
                              "items": {
                                "description": "A source object containing information about the source of the data cited.",
                                "discriminator": {
                                  "mapping": {
                                    "document": "#/components/schemas/ChatDocumentSource",
                                    "tool": "#/components/schemas/ChatToolSource"
                                  },
                                  "propertyName": "type"
                                },
                                "oneOf": [
                                  {
                                    "properties": {
                                      "id": {
                                        "description": "The unique identifier of the document",
                                        "type": "string"
                                      },
                                      "tool_output": {
                                        "additionalProperties": true,
                                        "type": "object"
                                      }
                                    },
                                    "title": "Tool Output",
                                    "type": "object"
                                  },
                                  {
                                    "description": "A document source object containing the unique identifier of the document and the document itself.",
                                    "properties": {
                                      "document": {
                                        "additionalProperties": true,
                                        "type": "object"
                                      },
                                      "id": {
                                        "description": "The unique identifier of the document",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                ]
                              },
                              "type": "array"
                            },
                            "start": {
                              "description": "Start index of the cited snippet in the original source text.",
                              "type": "integer"
                            },
                            "text": {
                              "description": "Text snippet that is being cited.",
                              "type": "string"
                            },
                            "type": {
                              "description": "The type of citation which indicates what part of the response the citation is for.\n",
                              "enum": [
                                "TEXT_CONTENT",
                                "THINKING_CONTENT",
                                "PLAN"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "content": {
                        "items": {
                          "discriminator": {
                            "mapping": {
                              "text": "#/components/schemas/ChatTextContent",
                              "thinking": "#/components/schemas/ChatThinkingContent"
                            },
                            "propertyName": "type"
                          },
                          "oneOf": [
                            {
                              "description": "Text content of the message.",
                              "properties": {
                                "text": {
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "text"
                                  ],
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "text"
                              ],
                              "type": "object"
                            },
                            {
                              "description": "Thinking content of the message. This will be present when `thinking` is enabled, and will contain the models internal reasoning.",
                              "properties": {
                                "thinking": {
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "thinking"
                                  ],
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "thinking"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "type": "array"
                      },
                      "role": {
                        "enum": [
                          "assistant"
                        ],
                        "type": "string"
                      },
                      "tool_calls": {
                        "items": {
                          "description": "An array of tool calls to be made.",
                          "properties": {
                            "function": {
                              "properties": {
                                "arguments": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "id": {
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "function"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "tool_plan": {
                        "description": "A chain-of-thought style reflection and plan that the model generates when working with Tools.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "role"
                    ],
                    "type": "object"
                  },
                  "usage": {
                    "properties": {
                      "billed_units": {
                        "properties": {
                          "classifications": {
                            "description": "The number of billed classifications units.\n",
                            "type": "number"
                          },
                          "input_tokens": {
                            "description": "The number of billed input tokens.\n",
                            "type": "number"
                          },
                          "output_tokens": {
                            "description": "The number of billed output tokens.\n",
                            "type": "number"
                          },
                          "search_units": {
                            "description": "The number of billed search units.\n",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "tokens": {
                        "properties": {
                          "input_tokens": {
                            "description": "The number of tokens used as input to the model.\n",
                            "type": "number"
                          },
                          "output_tokens": {
                            "description": "The number of tokens produced by the model.\n",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "id",
                  "finish_reason",
                  "message"
                ]
              },
              {
                "description": "StreamedChatResponse is returned in streaming mode (specified with `stream=True` in the request).",
                "discriminator": {
                  "mapping": {
                    "citation-end": "#/components/schemas/CitationEndEvent",
                    "citation-start": "#/components/schemas/CitationStartEvent",
                    "content-delta": "#/components/schemas/ChatContentDeltaEvent",
                    "content-end": "#/components/schemas/ChatContentEndEvent",
                    "content-start": "#/components/schemas/ChatContentStartEvent",
                    "debug": "#/components/schemas/ChatDebugEvent",
                    "message-end": "#/components/schemas/ChatMessageEndEvent",
                    "message-start": "#/components/schemas/ChatMessageStartEvent",
                    "tool-call-delta": "#/components/schemas/ChatToolCallDeltaEvent",
                    "tool-call-end": "#/components/schemas/ChatToolCallEndEvent",
                    "tool-call-start": "#/components/schemas/ChatToolCallStartEvent",
                    "tool-plan-delta": "#/components/schemas/ChatToolPlanDeltaEvent"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "allOf": [
                      {
                        "description": "The streamed event types",
                        "properties": {
                          "type": {
                            "enum": [
                              "message-start",
                              "content-start",
                              "content-delta",
                              "content-end",
                              "tool-call-start",
                              "tool-call-delta",
                              "tool-call-end",
                              "tool-plan-delta",
                              "citation-start",
                              "citation-end",
                              "message-end"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "type"
                        ]
                      },
                      {
                        "properties": {
                          "delta": {
                            "properties": {
                              "message": {
                                "properties": {
                                  "role": {
                                    "description": "The role of the message.",
                                    "enum": [
                                      "assistant"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "Unique identifier for the generated reply.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "description": "A streamed event which signifies that a stream has started."
                  },
                  {
                    "allOf": [
                      {
                        "description": "The streamed event types",
                        "properties": {
                          "type": {
                            "enum": [
                              "message-start",
                              "content-start",
                              "content-delta",
                              "content-end",
                              "tool-call-start",
                              "tool-call-delta",
                              "tool-call-end",
                              "tool-plan-delta",
                              "citation-start",
                              "citation-end",
                              "message-end"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "type"
                        ]
                      },
                      {
                        "properties": {
                          "delta": {
                            "properties": {
                              "message": {
                                "properties": {
                                  "content": {
                                    "properties": {
                                      "text": {
                                        "type": "string"
                                      },
                                      "thinking": {
                                        "type": "string"
                                      },
                                      "type": {
                                        "enum": [
                                          "text",
                                          "thinking"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "index": {
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "description": "A streamed delta event which signifies that a new content block has started."
                  },
                  {
                    "allOf": [
                      {
                        "description": "The streamed event types",
                        "properties": {
                          "type": {
                            "enum": [
                              "message-start",
                              "content-start",
                              "content-delta",
                              "content-end",
                              "tool-call-start",
                              "tool-call-delta",
                              "tool-call-end",
                              "tool-plan-delta",
                              "citation-start",
                              "citation-end",
                              "message-end"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "type"
                        ]
                      },
                      {
                        "properties": {
                          "delta": {
                            "properties": {
                              "message": {
                                "properties": {
                                  "content": {
                                    "properties": {
                                      "text": {
                                        "type": "string"
                                      },
                                      "thinking": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "index": {
                            "type": "integer"
                          },
                          "logprobs": {
                            "properties": {
                              "logprobs": {
                                "description": "The log probability of each token used to construct the text chunk.",
                                "items": {
                                  "format": "float",
                                  "type": "number"
                                },
                                "type": "array"
                              },
                              "text": {
                                "description": "The text chunk for which the log probabilities was calculated.",
                                "type": "string"
                              },
                              "token_ids": {
                                "description": "The token ids of each token used to construct the text chunk.",
                                "items": {
                                  "type": "integer"
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "token",
                              "token_ids",
                              "logprob"
                            ],
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "description": "A streamed delta event which contains a delta of chat text content."
                  },
                  {
                    "allOf": [
                      {
                        "description": "The streamed event types",
                        "properties": {
                          "type": {
                            "enum": [
                              "message-start",
                              "content-start",
                              "content-delta",
                              "content-end",
                              "tool-call-start",
                              "tool-call-delta",
                              "tool-call-end",
                              "tool-plan-delta",
                              "citation-start",
                              "citation-end",
                              "message-end"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "type"
                        ]
                      },
                      {
                        "properties": {
                          "index": {
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "description": "A streamed delta event which signifies that the content block has ended."
                  },
                  {
                    "allOf": [
                      {
                        "description": "The streamed event types",
                        "properties": {
                          "type": {
                            "enum": [
                              "message-start",
                              "content-start",
                              "content-delta",
                              "content-end",
                              "tool-call-start",
                              "tool-call-delta",
                              "tool-call-end",
                              "tool-plan-delta",
                              "citation-start",
                              "citation-end",
                              "message-end"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "type"
                        ]
                      },
                      {
                        "properties": {
                          "delta": {
                            "properties": {
                              "message": {
                                "properties": {
                                  "tool_plan": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "description": "A streamed event which contains a delta of tool plan text."
                  },
                  {
                    "allOf": [
                      {
                        "description": "The streamed event types",
                        "properties": {
                          "type": {
                            "enum": [
                              "message-start",
                              "content-start",
                              "content-delta",
                              "content-end",
                              "tool-call-start",
                              "tool-call-delta",
                              "tool-call-end",
                              "tool-plan-delta",
                              "citation-start",
                              "citation-end",
                              "message-end"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "type"
                        ]
                      },
                      {
                        "properties": {
                          "delta": {
                            "properties": {
                              "message": {
                                "properties": {
                                  "tool_calls": {
                                    "description": "An array of tool calls to be made.",
                                    "properties": {
                                      "function": {
                                        "properties": {
                                          "arguments": {
                                            "type": "string"
                                          },
                                          "name": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "id": {
                                        "type": "string"
                                      },
                                      "type": {
                                        "enum": [
                                          "function"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "index": {
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "description": "A streamed event delta which signifies a tool call has started streaming."
                  },
                  {
                    "allOf": [
                      {
                        "description": "The streamed event types",
                        "properties": {
                          "type": {
                            "enum": [
                              "message-start",
                              "content-start",
                              "content-delta",
                              "content-end",
                              "tool-call-start",
                              "tool-call-delta",
                              "tool-call-end",
                              "tool-plan-delta",
                              "citation-start",
                              "citation-end",
                              "message-end"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "type"
                        ]
                      },
                      {
                        "properties": {
                          "delta": {
                            "properties": {
                              "message": {
                                "properties": {
                                  "tool_calls": {
                                    "properties": {
                                      "function": {
                                        "properties": {
                                          "arguments": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "index": {
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "description": "A streamed event delta which signifies a delta in tool call arguments."
                  },
                  {
                    "allOf": [
                      {
                        "description": "The streamed event types",
                        "properties": {
                          "type": {
                            "enum": [
                              "message-start",
                              "content-start",
                              "content-delta",
                              "content-end",
                              "tool-call-start",
                              "tool-call-delta",
                              "tool-call-end",
                              "tool-plan-delta",
                              "citation-start",
                              "citation-end",
                              "message-end"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "type"
                        ]
                      },
                      {
                        "properties": {
                          "index": {
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "description": "A streamed event delta which signifies a tool call has finished streaming."
                  },
                  {
                    "allOf": [
                      {
                        "description": "The streamed event types",
                        "properties": {
                          "type": {
                            "enum": [
                              "message-start",
                              "content-start",
                              "content-delta",
                              "content-end",
                              "tool-call-start",
                              "tool-call-delta",
                              "tool-call-end",
                              "tool-plan-delta",
                              "citation-start",
                              "citation-end",
                              "message-end"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "type"
                        ]
                      },
                      {
                        "properties": {
                          "delta": {
                            "properties": {
                              "error": {
                                "description": "An error message if an error occurred during the generation.\n",
                                "type": "string"
                              },
                              "finish_reason": {
                                "description": "The reason a chat request has finished.\n\n- **complete**: The model finished sending a complete message.\n- **max_tokens**: The number of generated tokens exceeded the model's context length or the value specified via the `max_tokens` parameter.\n- **stop_sequence**: One of the provided `stop_sequence` entries was reached in the model's generation.\n- **tool_call**: The model generated a Tool Call and is expecting a Tool Message in return\n- **error**: The generation failed due to an internal error\n",
                                "enum": [
                                  "COMPLETE",
                                  "STOP_SEQUENCE",
                                  "MAX_TOKENS",
                                  "TOOL_CALL",
                                  "ERROR"
                                ],
                                "type": "string"
                              },
                              "usage": {
                                "properties": {
                                  "billed_units": {
                                    "properties": {
                                      "classifications": {
                                        "description": "The number of billed classifications units.\n",
                                        "type": "number"
                                      },
                                      "input_tokens": {
                                        "description": "The number of billed input tokens.\n",
                                        "type": "number"
                                      },
                                      "output_tokens": {
                                        "description": "The number of billed output tokens.\n",
                                        "type": "number"
                                      },
                                      "search_units": {
                                        "description": "The number of billed search units.\n",
                                        "type": "number"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "tokens": {
                                    "properties": {
                                      "input_tokens": {
                                        "description": "The number of tokens used as input to the model.\n",
                                        "type": "number"
                                      },
                                      "output_tokens": {
                                        "description": "The number of tokens produced by the model.\n",
                                        "type": "number"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "description": "A streamed event which signifies that the chat message has ended."
                  },
                  {
                    "allOf": [
                      {
                        "properties": {
                          "event_type": {
                            "enum": [
                              "stream-start",
                              "search-queries-generation",
                              "search-results",
                              "text-generation",
                              "citation-generation",
                              "stream-end",
                              "debug"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "event_type"
                        ]
                      },
                      {
                        "properties": {
                          "prompt": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "description": "OK"
    },
    "400": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when the request is not well formed. This could be because:\n  - JSON is invalid\n  - The request is missing required fields\n  - The request contains an invalid combination of fields\n"
    },
    "401": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error indicates that the operation attempted to be performed is not allowed. This could be because:\n  - The api token is invalid\n  - The user does not have the necessary permissions\n"
    },
    "403": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error indicates that the operation attempted to be performed is not allowed. This could be because:\n  - The api token is invalid\n  - The user does not have the necessary permissions\n"
    },
    "404": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when a resource is not found. This could be because:\n  - The endpoint does not exist\n  - The resource does not exist eg model id, dataset id\n"
    },
    "422": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when the request is not well formed. This could be because:\n  - JSON is invalid\n  - The request is missing required fields\n  - The request contains an invalid combination of fields\n"
    },
    "429": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "Too many requests"
    },
    "498": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when a request or response contains a deny-listed token.\n"
    },
    "499": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when a request is cancelled by the user.\n"
    },
    "500": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when an uncategorised internal server error occurs.\n"
    },
    "501": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when the requested feature is not implemented.\n"
    },
    "503": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when the service is unavailable. This could be due to:\n  - Too many users trying to access the service at the same time\n"
    },
    "504": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "This error is returned when a request to the server times out. This could be due to:\n  - An internal services taking too long to respond\n"
    }
  },
  "summary": "Chat API (v2)"
}
