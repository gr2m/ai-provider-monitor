{
  "description": "<Note>To use our EU server with LeMUR, replace `api.assemblyai.com` with `api.eu.assemblyai.com`.</Note>\nCustom Summary allows you to distill a piece of audio into a few impactful sentences.\nYou can give the model context to obtain more targeted results while outputting the results in a variety of formats described in human language.\n",
  "operationId": "lemurSummary",
  "requestBody": {
    "content": {
      "application/json": {
        "schema": {
          "allOf": [
            {
              "additionalProperties": false,
              "example": {
                "context": "This is an interview about wildfires.",
                "final_model": "anthropic/claude-sonnet-4-20250514",
                "max_output_size": 3000,
                "temperature": 0,
                "transcript_ids": [
                  "85f9b381-e90c-46ed-beca-7d76245d375e",
                  "7c3acd18-df4d-4432-88f5-1e89f8827eea"
                ]
              },
              "properties": {
                "context": {
                  "description": "Context to provide the model. This can be a string or a free-form JSON value.",
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "additionalProperties": true,
                      "type": "object"
                    }
                  ]
                },
                "final_model": {
                  "anyOf": [
                    {
                      "description": "The model that is used for the final prompt after compression is performed.\n",
                      "enum": [
                        "anthropic/claude-sonnet-4-20250514",
                        "anthropic/claude-opus-4-20250514",
                        "anthropic/claude-3-7-sonnet-20250219",
                        "anthropic/claude-3-5-sonnet",
                        "anthropic/claude-3-5-haiku-20241022",
                        "anthropic/claude-3-opus",
                        "anthropic/claude-3-haiku"
                      ],
                      "type": "string"
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "default": "default",
                  "description": "The model that is used for the final prompt after compression is performed.\n"
                },
                "input_text": {
                  "description": "Custom formatted transcript data. Maximum size is the context limit of the selected model.\nUse either transcript_ids or input_text as input into LeMUR.\n",
                  "type": "string"
                },
                "max_output_size": {
                  "default": 2000,
                  "description": "Maximum output size in tokens, up to the `final_model`'s max [(see chart)](/docs/lemur/customize-parameters#change-the-maximum-output-size).",
                  "type": "integer"
                },
                "temperature": {
                  "default": 0,
                  "description": "The temperature to use for the model.\nHigher values result in answers that are more creative, lower values are more conservative.\nCan be any value between 0.0 and 1.0 inclusive.\n",
                  "format": "float",
                  "maximum": 1,
                  "minimum": 0,
                  "type": "number"
                },
                "transcript_ids": {
                  "description": "A list of completed transcripts with text. Up to a maximum of 100 hours of audio.\nUse either transcript_ids or input_text as input into LeMUR.\n",
                  "items": {
                    "format": "uuid",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "final_model"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "properties": {
                "answer_format": {
                  "description": "How you want the summary to be returned. This can be any text. Examples: \"TLDR\", \"bullet points\"\n",
                  "type": "string"
                }
              },
              "type": "object"
            }
          ],
          "example": {
            "context": "This is an interview about wildfires.",
            "final_model": "anthropic/claude-sonnet-4-20250514",
            "max_output_size": 3000,
            "temperature": 0,
            "transcript_ids": [
              "47b95ba5-8889-44d8-bc80-5de38306e582"
            ]
          },
          "type": "object"
        }
      }
    },
    "description": "Params to generate the summary",
    "required": true
  },
  "responses": {
    "200": {
      "content": {
        "application/json": {
          "schema": {
            "allOf": [
              {
                "allOf": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "response": {
                        "description": "The response generated by LeMUR.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "response"
                    ],
                    "type": "object"
                  },
                  {
                    "additionalProperties": false,
                    "example": {
                      "request_id": "5e1b27c2-691f-4414-8bc5-f14678442f9e",
                      "usage": {
                        "input_tokens": 27,
                        "output_tokens": 3
                      }
                    },
                    "properties": {
                      "request_id": {
                        "description": "The ID of the LeMUR request",
                        "format": "uuid",
                        "type": "string"
                      },
                      "usage": {
                        "description": "The usage numbers for the LeMUR request",
                        "additionalProperties": false,
                        "properties": {
                          "input_tokens": {
                            "description": "The number of input tokens used by the model",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "output_tokens": {
                            "description": "The number of output tokens generated by the model",
                            "minimum": 0,
                            "type": "integer"
                          }
                        },
                        "required": [
                          "input_tokens",
                          "output_tokens"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "request_id",
                      "usage"
                    ],
                    "type": "object"
                  }
                ],
                "example": {
                  "request_id": "5e1b27c2-691f-4414-8bc5-f14678442f9e",
                  "response": "Based on the transcript, the following locations were mentioned as being affected by wildfire smoke from Canada:\n\n- Maine\n- Maryland\n- Minnesota\n- Mid Atlantic region\n- Northeast region\n- New York City\n- Baltimore\n",
                  "usage": {
                    "input_tokens": 27,
                    "output_tokens": 3
                  }
                },
                "type": "object"
              }
            ],
            "example": {
              "request_id": "5e1b27c2-691f-4414-8bc5-f14678442f9e",
              "response": "- Wildfires in Canada are sending smoke and air pollution across parts of the US, triggering air quality alerts from Maine to Minnesota. Concentrations of particulate matter have exceeded safety levels.\n\n- Weather systems are channeling the smoke through Pennsylvania into the Mid-Atlantic and Northeast regions. New York City has canceled outdoor activities to keep children and vulnerable groups indoors.\n\n- Very small particulate matter can enter the lungs and impact respiratory, cardiovascular and neurological health. Young children, the elderly and those with preexisting conditions are most at risk.\n\n- The conditions causing the poor air quality could get worse or shift to different areas in coming days depending on weather patterns. More wildfires may also contribute to higher concentrations.\n\n- Climate change is leading to longer and more severe fire seasons. Events of smoke traveling long distances and affecting air quality over wide areas will likely become more common in the future.\"\n",
              "usage": {
                "input_tokens": 27,
                "output_tokens": 3
              }
            },
            "type": "object"
          }
        }
      },
      "description": "LeMUR summary response",
      "headers": {
        "X-RateLimit-Limit": {
          "description": "Maximum number of allowed requests in a 60 second window.",
          "schema": {
            "type": "integer"
          }
        },
        "X-RateLimit-Remaining": {
          "description": "Number of remaining requests in the current time window.",
          "schema": {
            "type": "integer"
          }
        },
        "X-RateLimit-Reset": {
          "description": "Number of seconds until the remaining requests resets to the value of X-RateLimit-Limit.",
          "schema": {
            "type": "integer"
          }
        }
      },
      "links": {
        "PurgeLemurRequestDataById": {
          "description": "The LeMUR request ID can be used as the `request_id` parameter in `DELETE /lemur/v3/{request_id}`.",
          "operationId": "purgeLemurRequestData",
          "parameters": {
            "request_id": "$response.body#/request_id"
          }
        }
      }
    },
    "400": {
      "content": {
        "application/json": {
          "example": {
            "error": "This is a sample error message"
          },
          "schema": {
            "additionalProperties": true,
            "example": {
              "error": "format_text must be a Boolean"
            },
            "properties": {
              "error": {
                "description": "Error message",
                "type": "string"
              },
              "status": {
                "const": "error",
                "type": "string"
              }
            },
            "required": [
              "error"
            ],
            "type": "object"
          }
        }
      },
      "description": "Bad request"
    },
    "401": {
      "content": {
        "application/json": {
          "example": {
            "error": "Authentication error, API token missing/invalid"
          },
          "schema": {
            "additionalProperties": true,
            "example": {
              "error": "format_text must be a Boolean"
            },
            "properties": {
              "error": {
                "description": "Error message",
                "type": "string"
              },
              "status": {
                "const": "error",
                "type": "string"
              }
            },
            "required": [
              "error"
            ],
            "type": "object"
          }
        }
      },
      "description": "Unauthorized"
    },
    "404": {
      "content": {
        "application/json": {
          "example": {
            "error": "Not found"
          },
          "schema": {
            "additionalProperties": true,
            "example": {
              "error": "format_text must be a Boolean"
            },
            "properties": {
              "error": {
                "description": "Error message",
                "type": "string"
              },
              "status": {
                "const": "error",
                "type": "string"
              }
            },
            "required": [
              "error"
            ],
            "type": "object"
          }
        }
      },
      "description": "Not found"
    },
    "429": {
      "content": {
        "application/json": {
          "example": {
            "error": "Too Many Requests"
          },
          "schema": {
            "additionalProperties": true,
            "example": {
              "error": "format_text must be a Boolean"
            },
            "properties": {
              "error": {
                "description": "Error message",
                "type": "string"
              },
              "status": {
                "const": "error",
                "type": "string"
              }
            },
            "required": [
              "error"
            ],
            "type": "object"
          }
        }
      },
      "description": "Too many requests",
      "headers": {
        "Retry-After": {
          "description": "The number of seconds to wait before retrying the request",
          "schema": {
            "type": "integer"
          }
        }
      }
    },
    "500": {
      "content": {
        "application/json": {
          "example": {
            "error": "Internal Server Error"
          },
          "schema": {
            "additionalProperties": true,
            "example": {
              "error": "format_text must be a Boolean"
            },
            "properties": {
              "error": {
                "description": "Error message",
                "type": "string"
              },
              "status": {
                "const": "error",
                "type": "string"
              }
            },
            "required": [
              "error"
            ],
            "type": "object"
          }
        }
      },
      "description": "An error occurred while processing the request"
    },
    "503": {
      "description": "Service unavailable"
    },
    "504": {
      "description": "Gateway timeout"
    }
  },
  "summary": "Summarize a transcript using LeMUR",
  "tags": [
    "LeMUR"
  ]
}
