{
  "operationId": "createChatCompletion",
  "requestBody": {
    "content": {
      "application/json": {
        "schema": {
          "additionalProperties": false,
          "properties": {
            "compound_custom": {
              "description": "Custom configuration of models and tools for Compound.",
              "nullable": true,
              "properties": {
                "models": {
                  "nullable": true,
                  "properties": {
                    "answering_model": {
                      "description": "Custom model to use for answering.",
                      "nullable": true,
                      "type": "string"
                    },
                    "reasoning_model": {
                      "description": "Custom model to use for reasoning.",
                      "nullable": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "tools": {
                  "description": "Configuration options for tools available to Compound.",
                  "nullable": true,
                  "properties": {
                    "enabled_tools": {
                      "description": "A list of tool names that are enabled for the request.",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "type": "array"
                    },
                    "wolfram_settings": {
                      "description": "Configuration for the Wolfram tool integration.",
                      "nullable": true,
                      "properties": {
                        "authorization": {
                          "description": "API key used to authorize requests to Wolfram services.",
                          "nullable": true,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "disable_tool_validation": {
              "default": false,
              "description": "If set to true, groq will return called tools without validating that the tool is present in request.tools. tool_choice=required/none will still be enforced, but the request cannot require a specific tool be used.\n",
              "type": "boolean"
            },
            "documents": {
              "description": "A list of documents to provide context for the conversation. Each document contains text that can be referenced by the model.",
              "items": {
                "properties": {
                  "text": {
                    "description": "The text content of the document.",
                    "type": "string"
                  }
                },
                "required": [
                  "text"
                ],
                "type": "object"
              },
              "nullable": true,
              "type": "array"
            },
            "enable_citations": {
              "description": "Whether to enable citations in the response. When enabled, the model will include citations for information retrieved from provided documents or web searches.",
              "nullable": true,
              "type": "boolean"
            },
            "exclude_domains": {
              "deprecated": true,
              "description": "Deprecated: Use search_settings.exclude_domains instead.\nA list of domains to exclude from the search results when the model uses a web search tool.\n",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "type": "array"
            },
            "exclude_instance_ids": {
              "description": "For internal use only\n",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "type": "array"
            },
            "frequency_penalty": {
              "default": 0,
              "description": "This is not yet supported by any of our models. Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
              "maximum": 2,
              "minimum": -2,
              "nullable": true,
              "type": "number"
            },
            "function_call": {
              "deprecated": true,
              "description": "Deprecated in favor of `tool_choice`.\n\nControls which (if any) function is called by the model.\n`none` means the model will not call a function and instead generates a message.\n`auto` means the model can pick between generating a message or calling a function.\nSpecifying a particular function via `{\"name\": \"my_function\"}` forces the model to call that function.\n\n`none` is the default when no functions are present. `auto` is the default if functions are present.\n",
              "nullable": true,
              "oneOf": [
                {
                  "description": "`none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.\n",
                  "enum": [
                    "none",
                    "auto",
                    "required"
                  ],
                  "type": "string"
                },
                {
                  "description": "Specifying a particular function via `{\"name\": \"my_function\"}` forces the model to call that function.\n",
                  "properties": {
                    "name": {
                      "description": "The name of the function to call.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object"
                }
              ]
            },
            "functions": {
              "deprecated": true,
              "description": "Deprecated in favor of `tools`.\n\nA list of functions the model may generate JSON inputs for.\n",
              "items": {
                "deprecated": true,
                "properties": {
                  "description": {
                    "description": "A description of what the function does, used by the model to choose when and how to call the function.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.",
                    "type": "string"
                  },
                  "parameters": {
                    "additionalProperties": true,
                    "description": "Function parameters defined as a JSON Schema object. Refer to https://json-schema.org/understanding-json-schema/ for schema documentation.",
                    "type": "object"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              },
              "maxItems": 128,
              "nullable": true,
              "type": "array"
            },
            "include_domains": {
              "deprecated": true,
              "description": "Deprecated: Use search_settings.include_domains instead.\nA list of domains to include in the search results when the model uses a web search tool.\n",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "type": "array"
            },
            "include_reasoning": {
              "description": "Whether to include reasoning in the response.  If true, the response will include a `reasoning` field. If false, the model's reasoning will not be included in the response.\nThis field is mutually exclusive with `reasoning_format`.\n",
              "nullable": true,
              "type": "boolean"
            },
            "logit_bias": {
              "additionalProperties": {
                "type": "integer"
              },
              "description": "This is not yet supported by any of our models.\nModify the likelihood of specified tokens appearing in the completion.\n",
              "nullable": true,
              "type": "object"
            },
            "logprobs": {
              "default": false,
              "description": "This is not yet supported by any of our models.\nWhether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`.\n",
              "nullable": true,
              "type": "boolean"
            },
            "max_completion_tokens": {
              "description": "The maximum number of tokens that can be generated in the chat completion. The total length of input tokens and generated tokens is limited by the model's context length.",
              "nullable": true,
              "type": "integer"
            },
            "max_tokens": {
              "deprecated": true,
              "description": "Deprecated in favor of `max_completion_tokens`.\nThe maximum number of tokens that can be generated in the chat completion. The total length of input tokens and generated tokens is limited by the model's context length.\n",
              "nullable": true,
              "type": "integer"
            },
            "messages": {
              "description": "A list of messages comprising the conversation so far.",
              "items": {
                "discriminator": {
                  "mapping": {
                    "assistant": "#/components/schemas/ChatCompletionRequestAssistantMessage",
                    "developer": "#/components/schemas/ChatCompletionRequestSystemMessage",
                    "function": "#/components/schemas/ChatCompletionRequestFunctionMessage",
                    "system": "#/components/schemas/ChatCompletionRequestSystemMessage",
                    "tool": "#/components/schemas/ChatCompletionRequestToolMessage",
                    "user": "#/components/schemas/ChatCompletionRequestUserMessage"
                  },
                  "propertyName": "role"
                },
                "oneOf": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "content": {
                        "description": "The contents of the system message.",
                        "oneOf": [
                          {
                            "description": "The text contents of the message.",
                            "title": "Text content",
                            "type": "string"
                          },
                          {
                            "description": "An array of content parts with a defined type, only `text` is supported for this message type.",
                            "items": {
                              "properties": {
                                "text": {
                                  "description": "The text content.",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "The type of the content part.",
                                  "enum": [
                                    "text"
                                  ],
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "text"
                              ],
                              "title": "Text content part",
                              "type": "object"
                            },
                            "minItems": 1,
                            "title": "Array of content parts",
                            "type": "array"
                          }
                        ],
                        "title": "System message content"
                      },
                      "name": {
                        "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role.",
                        "type": "string"
                      },
                      "role": {
                        "description": "The role of the messages author, in this case `system`.",
                        "enum": [
                          "system",
                          "developer"
                        ],
                        "type": "string"
                      },
                      "tool_call_id": {
                        "description": "DO NOT USE.  This field is present because OpenAI allows it and users send it.",
                        "nullable": true,
                        "type": "string"
                      }
                    },
                    "required": [
                      "content",
                      "role"
                    ],
                    "title": "System message",
                    "type": "object"
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "content": {
                        "description": "The contents of the user message.\n",
                        "oneOf": [
                          {
                            "description": "The text contents of the message.",
                            "title": "Text content",
                            "type": "string"
                          },
                          {
                            "description": "An array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts. Image input is only supported when using the `gpt-4-visual-preview` model.",
                            "items": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "text": {
                                      "description": "The text content.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "The type of the content part.",
                                      "enum": [
                                        "text"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "text"
                                  ],
                                  "title": "Text content part",
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "image_url": {
                                      "properties": {
                                        "detail": {
                                          "default": "auto",
                                          "description": "Specifies the detail level of the image.",
                                          "enum": [
                                            "auto",
                                            "low",
                                            "high"
                                          ],
                                          "type": "string"
                                        },
                                        "url": {
                                          "description": "Either a URL of the image or the base64 encoded image data.",
                                          "format": "uri",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "url"
                                      ],
                                      "type": "object"
                                    },
                                    "type": {
                                      "description": "The type of the content part.",
                                      "enum": [
                                        "image_url"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "image_url"
                                  ],
                                  "title": "Image content part",
                                  "type": "object"
                                }
                              ]
                            },
                            "minItems": 1,
                            "title": "Array of content parts",
                            "type": "array"
                          }
                        ],
                        "title": "User message content"
                      },
                      "name": {
                        "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role.",
                        "type": "string"
                      },
                      "role": {
                        "description": "The role of the messages author, in this case `user`.",
                        "enum": [
                          "user"
                        ],
                        "type": "string"
                      },
                      "tool_call_id": {
                        "description": "DO NOT USE.  This field is present because OpenAI allows it and users send it.",
                        "nullable": true,
                        "type": "string"
                      }
                    },
                    "required": [
                      "content",
                      "role"
                    ],
                    "title": "User message",
                    "type": "object"
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "content": {
                        "description": "The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.\n",
                        "nullable": true,
                        "oneOf": [
                          {
                            "description": "The text contents of the message.",
                            "title": "Text content",
                            "type": "string"
                          },
                          {
                            "description": "An array of content parts with a defined type, only `text` is supported for this message type.",
                            "items": {
                              "properties": {
                                "text": {
                                  "description": "The text content.",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "The type of the content part.",
                                  "enum": [
                                    "text"
                                  ],
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "text"
                              ],
                              "title": "Text content part",
                              "type": "object"
                            },
                            "title": "Array of content parts",
                            "type": "array"
                          }
                        ],
                        "title": "Assistant message content"
                      },
                      "function_call": {
                        "deprecated": true,
                        "description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.",
                        "properties": {
                          "arguments": {
                            "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the function to call.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "name": {
                        "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role.",
                        "type": "string"
                      },
                      "reasoning": {
                        "description": "The reasoning output by the assistant if reasoning_format was set to 'parsed'.\nThis field is only useable with qwen3 models.\n",
                        "nullable": true,
                        "type": "string"
                      },
                      "role": {
                        "description": "The role of the messages author, in this case `assistant`.",
                        "enum": [
                          "assistant"
                        ],
                        "type": "string"
                      },
                      "tool_call_id": {
                        "description": "DO NOT USE.  This field is present because OpenAI allows it and users send it.",
                        "nullable": true,
                        "required": [
                          "arguments",
                          "name"
                        ],
                        "type": "string"
                      },
                      "tool_calls": {
                        "description": "The tool calls generated by the model, such as function calls.",
                        "items": {
                          "properties": {
                            "function": {
                              "description": "The function that the model called.",
                              "properties": {
                                "arguments": {
                                  "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "The name of the function to call.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "name",
                                "arguments"
                              ],
                              "type": "object"
                            },
                            "id": {
                              "description": "The ID of the tool call.",
                              "type": "string"
                            },
                            "type": {
                              "description": "The type of the tool. Currently, only `function` is supported.",
                              "enum": [
                                "function"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "type",
                            "function"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "role"
                    ],
                    "title": "Assistant message",
                    "type": "object"
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "content": {
                        "description": "The contents of the tool message.",
                        "oneOf": [
                          {
                            "description": "The text contents of the message.",
                            "title": "Text content",
                            "type": "string"
                          },
                          {
                            "description": "An array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts. Image input is only supported when using the `gpt-4-visual-preview` model.",
                            "items": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "text": {
                                      "description": "The text content.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "The type of the content part.",
                                      "enum": [
                                        "text"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "text"
                                  ],
                                  "title": "Text content part",
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "image_url": {
                                      "properties": {
                                        "detail": {
                                          "default": "auto",
                                          "description": "Specifies the detail level of the image.",
                                          "enum": [
                                            "auto",
                                            "low",
                                            "high"
                                          ],
                                          "type": "string"
                                        },
                                        "url": {
                                          "description": "Either a URL of the image or the base64 encoded image data.",
                                          "format": "uri",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "url"
                                      ],
                                      "type": "object"
                                    },
                                    "type": {
                                      "description": "The type of the content part.",
                                      "enum": [
                                        "image_url"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "image_url"
                                  ],
                                  "title": "Image content part",
                                  "type": "object"
                                }
                              ]
                            },
                            "minItems": 1,
                            "title": "Array of content parts",
                            "type": "array"
                          }
                        ],
                        "title": "Tool message content"
                      },
                      "name": {
                        "description": "DO NOT USE.  This field is present because OpenAI allows it and users send it.",
                        "type": "string"
                      },
                      "role": {
                        "description": "The role of the messages author, in this case `tool`.",
                        "enum": [
                          "tool"
                        ],
                        "type": "string"
                      },
                      "tool_call_id": {
                        "description": "Tool call that this message is responding to.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "role",
                      "content",
                      "tool_call_id"
                    ],
                    "title": "Tool message",
                    "type": "object"
                  },
                  {
                    "additionalProperties": false,
                    "deprecated": true,
                    "properties": {
                      "content": {
                        "description": "The contents of the function message.",
                        "nullable": true,
                        "title": "Function message content",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the function to call.",
                        "type": "string"
                      },
                      "role": {
                        "description": "The role of the messages author, in this case `function`.",
                        "enum": [
                          "function"
                        ],
                        "type": "string"
                      },
                      "tool_call_id": {
                        "description": "DO NOT USE.  This field is present because OpenAI allows it and users send it.",
                        "nullable": true,
                        "type": "string"
                      }
                    },
                    "required": [
                      "role",
                      "content",
                      "name"
                    ],
                    "title": "Function message",
                    "type": "object"
                  }
                ]
              },
              "minItems": 1,
              "type": "array"
            },
            "metadata": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "This parameter is not currently supported.\n",
              "nullable": true,
              "type": "object"
            },
            "model": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "enum": [
                    "compound-beta",
                    "compound-beta-mini",
                    "gemma2-9b-it",
                    "llama-3.1-8b-instant",
                    "llama-3.3-70b-versatile",
                    "meta-llama/llama-4-maverick-17b-128e-instruct",
                    "meta-llama/llama-4-scout-17b-16e-instruct",
                    "meta-llama/llama-guard-4-12b",
                    "moonshotai/kimi-k2-instruct",
                    "openai/gpt-oss-120b",
                    "openai/gpt-oss-20b",
                    "qwen/qwen3-32b"
                  ],
                  "type": "string"
                }
              ],
              "description": "ID of the model to use. For details on which models are compatible with the Chat API, see available [models](https://console.groq.com/docs/models)",
              "example": "meta-llama/llama-4-scout-17b-16e-instruct"
            },
            "n": {
              "default": 1,
              "description": "How many chat completion choices to generate for each input message. Note that the current moment, only n=1 is supported. Other values will result in a 400 response.",
              "example": 1,
              "maximum": 1,
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "parallel_tool_calls": {
              "default": true,
              "description": "Whether to enable parallel function calling during tool use.\n",
              "nullable": true,
              "type": "boolean"
            },
            "presence_penalty": {
              "default": 0,
              "description": "This is not yet supported by any of our models. Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
              "maximum": 2,
              "minimum": -2,
              "nullable": true,
              "type": "number"
            },
            "reasoning_effort": {
              "description": "qwen3 models support the following values\nSet to 'none' to disable reasoning.\nSet to 'default' or null to let Qwen reason.\n\nopenai/gpt-oss-20b and openai/gpt-oss-120b support 'low', 'medium', or 'high'.\n'medium' is the default value.\n",
              "enum": [
                "none",
                "default",
                "low",
                "medium",
                "high"
              ],
              "nullable": true,
              "type": "string"
            },
            "reasoning_format": {
              "description": "Specifies how to output reasoning tokens\nThis field is mutually exclusive with `include_reasoning`.\n",
              "enum": [
                "hidden",
                "raw",
                "parsed"
              ],
              "nullable": true,
              "type": "string"
            },
            "response_format": {
              "description": "An object specifying the format that the model must output. Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. `json_schema` response format is only available on [supported models](https://console.groq.com/docs/structured-outputs#supported-models). Setting to `{ \"type\": \"json_object\" }` enables the older JSON mode, which ensures the message the model generates is valid JSON. Using `json_schema` is preferred for models that support it.\n",
              "nullable": true,
              "oneOf": [
                {
                  "description": "Default response format. Used to generate text responses.\n",
                  "properties": {
                    "type": {
                      "description": "The type of response format being defined. Always `text`.",
                      "enum": [
                        "text"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "title": "Text",
                  "type": "object"
                },
                {
                  "description": "JSON Schema response format. Used to generate structured JSON responses.\n",
                  "properties": {
                    "json_schema": {
                      "description": "Structured Outputs configuration options, including a JSON Schema.\n",
                      "properties": {
                        "description": {
                          "description": "A description of what the response format is for, used by the model to determine how to respond in the format.\n",
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.\n",
                          "type": "string"
                        },
                        "schema": {
                          "additionalProperties": true,
                          "description": "The schema for the response format, described as a JSON Schema object.\nLearn how to build JSON schemas [here](https://json-schema.org/).\n",
                          "title": "JSON schema",
                          "type": "object"
                        },
                        "strict": {
                          "default": false,
                          "description": "Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`.\n",
                          "nullable": true,
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "title": "JSON schema",
                      "type": "object"
                    },
                    "type": {
                      "description": "The type of response format being defined. Always `json_schema`.",
                      "enum": [
                        "json_schema"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "type",
                    "json_schema"
                  ],
                  "title": "JSON schema",
                  "type": "object"
                },
                {
                  "description": "JSON object response format. An older method of generating JSON responses. Using `json_schema` is recommended for models that support it. Note that the model will not generate JSON without a system or user message instructing it to do so.\n",
                  "properties": {
                    "type": {
                      "description": "The type of response format being defined. Always `json_object`.",
                      "enum": [
                        "json_object"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "title": "JSON object",
                  "type": "object"
                }
              ]
            },
            "search_settings": {
              "description": "Settings for web search functionality when the model uses a web search tool.\n",
              "nullable": true,
              "properties": {
                "country": {
                  "description": "Name of country to prioritize search results from (e.g., \"united states\", \"germany\", \"france\").",
                  "nullable": true,
                  "type": "string"
                },
                "exclude_domains": {
                  "description": "A list of domains to exclude from the search results.",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "type": "array"
                },
                "include_domains": {
                  "description": "A list of domains to include in the search results.",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "type": "array"
                },
                "include_images": {
                  "description": "Whether to include images in the search results.",
                  "nullable": true,
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "seed": {
              "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.\nDeterminism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.\n",
              "nullable": true,
              "type": "integer"
            },
            "service_tier": {
              "description": "The service tier to use for the request. Defaults to `on_demand`.\n- `auto` will automatically select the highest tier available within the rate limits of your organization.\n- `flex` uses the flex tier, which will succeed or fail quickly.\n",
              "enum": [
                "auto",
                "on_demand",
                "flex",
                "performance",
                null
              ],
              "nullable": true,
              "type": "string"
            },
            "stop": {
              "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.\n",
              "nullable": true,
              "oneOf": [
                {
                  "example": "\n",
                  "nullable": true,
                  "type": "string"
                },
                {
                  "items": {
                    "example": "[\"\\n\"]",
                    "type": "string"
                  },
                  "maxItems": 4,
                  "type": "array"
                }
              ]
            },
            "store": {
              "description": "This parameter is not currently supported.\n",
              "nullable": true,
              "type": "boolean"
            },
            "stream": {
              "default": false,
              "description": "If set, partial message deltas will be sent. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example code](/docs/text-chat#streaming-a-chat-completion).\n",
              "nullable": true,
              "type": "boolean"
            },
            "stream_options": {
              "description": "Options for streaming response. Only set this when you set `stream: true`.\n",
              "nullable": true,
              "properties": {
                "include_usage": {
                  "description": "If set, an additional chunk will be streamed before the `data: [DONE]` message. The `usage` field on this chunk shows the token usage statistics for the entire request, and the `choices` field will always be an empty array. All other chunks will also include a `usage` field, but with a null value.\n",
                  "nullable": true,
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "temperature": {
              "default": 1,
              "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
              "example": 1,
              "maximum": 2,
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "tool_choice": {
              "description": "Controls which (if any) tool is called by the model.\n`none` means the model will not call any tool and instead generates a message.\n`auto` means the model can pick between generating a message or calling one or more tools.\n`required` means the model must call one or more tools.\nSpecifying a particular tool via `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.\n\n`none` is the default when no tools are present. `auto` is the default if tools are present.\n",
              "nullable": true,
              "oneOf": [
                {
                  "description": "`none` means the model will not call any tool and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools.\n",
                  "enum": [
                    "none",
                    "auto",
                    "required"
                  ],
                  "type": "string"
                },
                {
                  "description": "Specifies a tool the model should use. Use to force the model to call a specific function.",
                  "properties": {
                    "function": {
                      "properties": {
                        "name": {
                          "description": "The name of the function to call.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object"
                    },
                    "type": {
                      "description": "The type of the tool. Currently, only `function` is supported.",
                      "enum": [
                        "function"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "type",
                    "function"
                  ],
                  "type": "object"
                }
              ]
            },
            "tools": {
              "description": "A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.\n",
              "items": {
                "properties": {
                  "allowed_tools": {
                    "description": "A list of tool names to allow from the MCP server. If specified, only these tools will be exposed to the model. If empty or not specified, all discovered tools will be available.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "function": {
                    "properties": {
                      "description": {
                        "description": "A description of what the function does, used by the model to choose when and how to call the function.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.",
                        "type": "string"
                      },
                      "parameters": {
                        "additionalProperties": true,
                        "description": "Function parameters defined as a JSON Schema object. Refer to https://json-schema.org/understanding-json-schema/ for schema documentation.",
                        "type": "object"
                      },
                      "strict": {
                        "default": false,
                        "description": "Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`.\n",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "headers": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "HTTP headers to send with requests to the MCP server (optional for MCP tools).",
                    "type": "object"
                  },
                  "server_label": {
                    "description": "A human-readable label for the MCP server (optional for MCP tools).",
                    "type": "string"
                  },
                  "server_url": {
                    "description": "The URL of the MCP server to connect to (required for MCP tools).",
                    "type": "string"
                  },
                  "type": {
                    "anyOf": [
                      {
                        "description": "The type of the tool. `function`, `browser_search`, and `code_interpreter` are supported.",
                        "enum": [
                          "function",
                          "browser_search",
                          "code_interpreter"
                        ],
                        "type": "string"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                "required": [
                  "type"
                ],
                "type": "object"
              },
              "maxItems": 128,
              "nullable": true,
              "type": "array"
            },
            "top_logprobs": {
              "description": "This is not yet supported by any of our models.\nAn integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.\n",
              "maximum": 20,
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            },
            "top_p": {
              "default": 1,
              "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
              "example": 1,
              "maximum": 1,
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "user": {
              "description": "A unique identifier representing your end-user, which can help us monitor and detect abuse.",
              "nullable": true,
              "type": "string"
            }
          },
          "required": [
            "model",
            "messages"
          ],
          "type": "object"
        }
      }
    },
    "description": "The chat prompt and parameters",
    "required": true
  },
  "responses": {
    "200": {
      "content": {
        "application/json": {
          "schema": {
            "description": "Represents a chat completion response returned by model, based on the provided input.",
            "properties": {
              "choices": {
                "description": "A list of chat completion choices. Can be more than one if `n` is greater than 1.",
                "items": {
                  "properties": {
                    "finish_reason": {
                      "description": "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,\n`length` if the maximum number of tokens specified in the request was reached,\n`tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.\n",
                      "enum": [
                        "stop",
                        "length",
                        "tool_calls",
                        "function_call"
                      ],
                      "type": "string"
                    },
                    "index": {
                      "description": "The index of the choice in the list of choices.",
                      "type": "integer"
                    },
                    "logprobs": {
                      "description": "Log probability information for the choice.",
                      "nullable": true,
                      "properties": {
                        "content": {
                          "description": "A list of message content tokens with log probability information.",
                          "items": {
                            "properties": {
                              "bytes": {
                                "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.",
                                "items": {
                                  "type": "integer"
                                },
                                "nullable": true,
                                "type": "array"
                              },
                              "logprob": {
                                "description": "The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.",
                                "type": "number"
                              },
                              "token": {
                                "description": "The token.",
                                "type": "string"
                              },
                              "top_logprobs": {
                                "description": "List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.",
                                "items": {
                                  "properties": {
                                    "bytes": {
                                      "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.",
                                      "items": {
                                        "type": "integer"
                                      },
                                      "nullable": true,
                                      "type": "array"
                                    },
                                    "logprob": {
                                      "description": "The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.",
                                      "type": "number"
                                    },
                                    "token": {
                                      "description": "The token.",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "token",
                                    "logprob",
                                    "bytes"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "token",
                              "logprob",
                              "bytes",
                              "top_logprobs"
                            ],
                            "type": "object"
                          },
                          "nullable": true,
                          "type": "array"
                        }
                      },
                      "required": [
                        "content"
                      ],
                      "type": "object"
                    },
                    "message": {
                      "description": "A chat completion message generated by the model.",
                      "properties": {
                        "content": {
                          "description": "The contents of the message.",
                          "nullable": true,
                          "type": "string"
                        },
                        "executed_tools": {
                          "description": "A list of tools that were executed during the chat completion for compound AI systems.",
                          "items": {
                            "properties": {
                              "arguments": {
                                "description": "The arguments passed to the tool in JSON format.",
                                "type": "string"
                              },
                              "browser_results": {
                                "description": "Array of browser results",
                                "items": {
                                  "additionalProperties": false,
                                  "properties": {
                                    "content": {
                                      "description": "The content of the browser result",
                                      "type": "string"
                                    },
                                    "live_view_url": {
                                      "description": "The live view URL for the browser window",
                                      "type": "string"
                                    },
                                    "title": {
                                      "description": "The title of the browser window",
                                      "type": "string"
                                    },
                                    "url": {
                                      "description": "The URL of the browser window",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "url",
                                    "title"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "code_results": {
                                "description": "Array of code execution results",
                                "items": {
                                  "additionalProperties": false,
                                  "properties": {
                                    "chart": {
                                      "properties": {
                                        "elements": {
                                          "description": "The chart elements (data series, points, etc.)",
                                          "items": {
                                            "properties": {
                                              "angle": {
                                                "description": "The angle for this element",
                                                "type": "number"
                                              },
                                              "first_quartile": {
                                                "description": "The first quartile value for this element",
                                                "type": "number"
                                              },
                                              "group": {
                                                "description": "The group this element belongs to",
                                                "type": "string"
                                              },
                                              "label": {
                                                "description": "The label for this chart element",
                                                "type": "string"
                                              },
                                              "max": {
                                                "type": "number"
                                              },
                                              "median": {
                                                "description": "The median value for this element",
                                                "type": "number"
                                              },
                                              "min": {
                                                "description": "The minimum value for this element",
                                                "type": "number"
                                              },
                                              "outliers": {
                                                "description": "The outliers for this element",
                                                "items": {
                                                  "type": "number"
                                                },
                                                "type": "array"
                                              },
                                              "points": {
                                                "description": "The points for this element",
                                                "items": {
                                                  "items": {
                                                    "type": "number"
                                                  },
                                                  "type": "array"
                                                },
                                                "type": "array"
                                              },
                                              "radius": {
                                                "description": "The radius for this element",
                                                "type": "number"
                                              },
                                              "third_quartile": {
                                                "description": "The third quartile value for this element",
                                                "type": "number"
                                              },
                                              "value": {
                                                "description": "The value for this element",
                                                "type": "number"
                                              }
                                            },
                                            "required": [
                                              "label"
                                            ],
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "title": {
                                          "description": "The title of the chart",
                                          "type": "string"
                                        },
                                        "type": {
                                          "description": "The type of chart",
                                          "enum": [
                                            "bar",
                                            "box_and_whisker",
                                            "line",
                                            "pie",
                                            "scatter",
                                            "superchart",
                                            "unknown"
                                          ],
                                          "type": "string"
                                        },
                                        "x_label": {
                                          "description": "The label for the x-axis",
                                          "type": "string"
                                        },
                                        "x_scale": {
                                          "description": "The scale type for the x-axis",
                                          "type": "string"
                                        },
                                        "x_tick_labels": {
                                          "description": "The labels for the x-axis ticks",
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        },
                                        "x_ticks": {
                                          "description": "The tick values for the x-axis",
                                          "items": {
                                            "type": "number"
                                          },
                                          "type": "array"
                                        },
                                        "x_unit": {
                                          "description": "The unit for the x-axis",
                                          "type": "string"
                                        },
                                        "y_label": {
                                          "description": "The label for the y-axis",
                                          "type": "string"
                                        },
                                        "y_scale": {
                                          "description": "The scale type for the y-axis",
                                          "type": "string"
                                        },
                                        "y_tick_labels": {
                                          "description": "The labels for the y-axis ticks",
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        },
                                        "y_ticks": {
                                          "description": "The tick values for the y-axis",
                                          "items": {
                                            "type": "number"
                                          },
                                          "type": "array"
                                        },
                                        "y_unit": {
                                          "description": "The unit for the y-axis",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "elements"
                                      ],
                                      "type": "object"
                                    },
                                    "charts": {
                                      "description": "Array of charts from a superchart",
                                      "items": {
                                        "properties": {
                                          "elements": {
                                            "description": "The chart elements (data series, points, etc.)",
                                            "items": {
                                              "properties": {
                                                "angle": {
                                                  "description": "The angle for this element",
                                                  "type": "number"
                                                },
                                                "first_quartile": {
                                                  "description": "The first quartile value for this element",
                                                  "type": "number"
                                                },
                                                "group": {
                                                  "description": "The group this element belongs to",
                                                  "type": "string"
                                                },
                                                "label": {
                                                  "description": "The label for this chart element",
                                                  "type": "string"
                                                },
                                                "max": {
                                                  "type": "number"
                                                },
                                                "median": {
                                                  "description": "The median value for this element",
                                                  "type": "number"
                                                },
                                                "min": {
                                                  "description": "The minimum value for this element",
                                                  "type": "number"
                                                },
                                                "outliers": {
                                                  "description": "The outliers for this element",
                                                  "items": {
                                                    "type": "number"
                                                  },
                                                  "type": "array"
                                                },
                                                "points": {
                                                  "description": "The points for this element",
                                                  "items": {
                                                    "items": {
                                                      "type": "number"
                                                    },
                                                    "type": "array"
                                                  },
                                                  "type": "array"
                                                },
                                                "radius": {
                                                  "description": "The radius for this element",
                                                  "type": "number"
                                                },
                                                "third_quartile": {
                                                  "description": "The third quartile value for this element",
                                                  "type": "number"
                                                },
                                                "value": {
                                                  "description": "The value for this element",
                                                  "type": "number"
                                                }
                                              },
                                              "required": [
                                                "label"
                                              ],
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "title": {
                                            "description": "The title of the chart",
                                            "type": "string"
                                          },
                                          "type": {
                                            "description": "The type of chart",
                                            "enum": [
                                              "bar",
                                              "box_and_whisker",
                                              "line",
                                              "pie",
                                              "scatter",
                                              "superchart",
                                              "unknown"
                                            ],
                                            "type": "string"
                                          },
                                          "x_label": {
                                            "description": "The label for the x-axis",
                                            "type": "string"
                                          },
                                          "x_scale": {
                                            "description": "The scale type for the x-axis",
                                            "type": "string"
                                          },
                                          "x_tick_labels": {
                                            "description": "The labels for the x-axis ticks",
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "x_ticks": {
                                            "description": "The tick values for the x-axis",
                                            "items": {
                                              "type": "number"
                                            },
                                            "type": "array"
                                          },
                                          "x_unit": {
                                            "description": "The unit for the x-axis",
                                            "type": "string"
                                          },
                                          "y_label": {
                                            "description": "The label for the y-axis",
                                            "type": "string"
                                          },
                                          "y_scale": {
                                            "description": "The scale type for the y-axis",
                                            "type": "string"
                                          },
                                          "y_tick_labels": {
                                            "description": "The labels for the y-axis ticks",
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "y_ticks": {
                                            "description": "The tick values for the y-axis",
                                            "items": {
                                              "type": "number"
                                            },
                                            "type": "array"
                                          },
                                          "y_unit": {
                                            "description": "The unit for the y-axis",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "type",
                                          "elements"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "png": {
                                      "description": "Base64 encoded PNG image output from code execution",
                                      "type": "string"
                                    },
                                    "text": {
                                      "description": "The text version of the code execution result",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "index": {
                                "description": "The index of the executed tool.",
                                "type": "integer"
                              },
                              "output": {
                                "description": "The output returned by the tool.",
                                "nullable": true,
                                "type": "string"
                              },
                              "search_results": {
                                "description": "The search results returned by the tool, if applicable.",
                                "nullable": true,
                                "properties": {
                                  "images": {
                                    "description": "List of image URLs returned by the search",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "results": {
                                    "description": "List of search results",
                                    "items": {
                                      "properties": {
                                        "content": {
                                          "description": "The content of the search result",
                                          "type": "string"
                                        },
                                        "score": {
                                          "description": "The relevance score of the search result",
                                          "format": "float",
                                          "type": "number"
                                        },
                                        "title": {
                                          "description": "The title of the search result",
                                          "type": "string"
                                        },
                                        "url": {
                                          "description": "The URL of the search result",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "description": "The type of tool that was executed.",
                                "type": "string"
                              }
                            },
                            "required": [
                              "index",
                              "type",
                              "arguments"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "function_call": {
                          "deprecated": true,
                          "description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.",
                          "properties": {
                            "arguments": {
                              "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the function to call.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "name",
                            "arguments"
                          ],
                          "type": "object"
                        },
                        "reasoning": {
                          "description": "The model's reasoning for a response. Only available for reasoning models when requests parameter reasoning_format has value `parsed.",
                          "nullable": true,
                          "type": "string"
                        },
                        "role": {
                          "description": "The role of the author of this message.",
                          "enum": [
                            "assistant"
                          ],
                          "type": "string"
                        },
                        "tool_calls": {
                          "description": "The tool calls generated by the model, such as function calls.",
                          "items": {
                            "properties": {
                              "function": {
                                "description": "The function that the model called.",
                                "properties": {
                                  "arguments": {
                                    "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "The name of the function to call.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "name",
                                  "arguments"
                                ],
                                "type": "object"
                              },
                              "id": {
                                "description": "The ID of the tool call.",
                                "type": "string"
                              },
                              "type": {
                                "description": "The type of the tool. Currently, only `function` is supported.",
                                "enum": [
                                  "function"
                                ],
                                "type": "string"
                              }
                            },
                            "required": [
                              "id",
                              "type",
                              "function"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "role",
                        "content"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "finish_reason",
                    "index",
                    "message",
                    "logprobs"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "created": {
                "description": "The Unix timestamp (in seconds) of when the chat completion was created.",
                "type": "integer"
              },
              "id": {
                "description": "A unique identifier for the chat completion.",
                "type": "string"
              },
              "model": {
                "description": "The model used for the chat completion.",
                "type": "string"
              },
              "object": {
                "description": "The object type, which is always `chat.completion`.",
                "enum": [
                  "chat.completion"
                ],
                "type": "string"
              },
              "system_fingerprint": {
                "description": "This fingerprint represents the backend configuration that the model runs with.\n\nCan be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.\n",
                "type": "string"
              },
              "usage": {
                "description": "Usage statistics for the completion request.",
                "properties": {
                  "completion_time": {
                    "description": "Time spent generating tokens",
                    "type": "number"
                  },
                  "completion_tokens": {
                    "description": "Number of tokens in the generated completion.",
                    "type": "integer"
                  },
                  "prompt_time": {
                    "description": "Time spent processing input tokens",
                    "type": "number"
                  },
                  "prompt_tokens": {
                    "description": "Number of tokens in the prompt.",
                    "type": "integer"
                  },
                  "queue_time": {
                    "description": "Time the requests was spent queued",
                    "type": "number"
                  },
                  "total_time": {
                    "description": "completion time and prompt time combined",
                    "type": "number"
                  },
                  "total_tokens": {
                    "description": "Total number of tokens used in the request (prompt + completion).",
                    "type": "integer"
                  }
                },
                "required": [
                  "prompt_tokens",
                  "completion_tokens",
                  "total_tokens"
                ],
                "type": "object"
              },
              "usage_breakdown": {
                "description": "Usage statistics for compound AI completion requests.",
                "properties": {
                  "models": {
                    "description": "List of models used in the request and their individual usage statistics",
                    "items": {
                      "properties": {
                        "model": {
                          "description": "The name/identifier of the model used",
                          "type": "string"
                        },
                        "usage": {
                          "description": "Usage statistics for the completion request.",
                          "properties": {
                            "completion_time": {
                              "description": "Time spent generating tokens",
                              "type": "number"
                            },
                            "completion_tokens": {
                              "description": "Number of tokens in the generated completion.",
                              "type": "integer"
                            },
                            "prompt_time": {
                              "description": "Time spent processing input tokens",
                              "type": "number"
                            },
                            "prompt_tokens": {
                              "description": "Number of tokens in the prompt.",
                              "type": "integer"
                            },
                            "queue_time": {
                              "description": "Time the requests was spent queued",
                              "type": "number"
                            },
                            "total_time": {
                              "description": "completion time and prompt time combined",
                              "type": "number"
                            },
                            "total_tokens": {
                              "description": "Total number of tokens used in the request (prompt + completion).",
                              "type": "integer"
                            }
                          },
                          "required": [
                            "prompt_tokens",
                            "completion_tokens",
                            "total_tokens"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "model",
                        "usage"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "models"
                ],
                "type": "object"
              }
            },
            "required": [
              "choices",
              "created",
              "id",
              "model",
              "object"
            ],
            "type": "object"
          }
        }
      },
      "description": "OK"
    }
  },
  "summary": "Creates a model response for the given chat conversation.",
  "tags": [
    "Chat"
  ]
}
