{
  "operationId": "createResponse",
  "requestBody": {
    "content": {
      "application/json": {
        "schema": {
          "additionalProperties": false,
          "properties": {
            "input": {
              "description": "Text input to the model, used to generate a response.\n",
              "oneOf": [
                {
                  "description": "A text input to the model, equivalent to a text input with the `user` role.",
                  "title": "Text input",
                  "type": "string"
                },
                {
                  "description": "A list of one or many input items to the model, containing different content types.",
                  "items": {
                    "discriminator": {
                      "mapping": {
                        "function_call": "#/components/schemas/ResponseFunctionCall",
                        "function_call_output": "#/components/schemas/ResponseFunctionCallOutput",
                        "item_reference": "#/components/schemas/ResponseItemReference",
                        "message": "#/components/schemas/ResponseInputMessage"
                      },
                      "propertyName": "type"
                    },
                    "oneOf": [
                      {
                        "description": "A message input to the model with a role indicating instruction following hierarchy.\n",
                        "properties": {
                          "content": {
                            "description": "Text input to the model.\n",
                            "oneOf": [
                              {
                                "description": "A text input to the model.",
                                "title": "Text input",
                                "type": "string"
                              },
                              {
                                "description": "An array of content parts.",
                                "items": {
                                  "discriminator": {
                                    "mapping": {
                                      "input_text": "#/components/schemas/ResponseInputTextContent"
                                    },
                                    "propertyName": "type"
                                  },
                                  "oneOf": [
                                    {
                                      "description": "A text input to the model.",
                                      "properties": {
                                        "text": {
                                          "description": "The text input to the model.",
                                          "type": "string"
                                        },
                                        "type": {
                                          "description": "The type of the input item. Always `input_text`.",
                                          "enum": [
                                            "input_text"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "text"
                                      ],
                                      "title": "Input text",
                                      "type": "object"
                                    }
                                  ]
                                },
                                "title": "Content array",
                                "type": "array"
                              }
                            ]
                          },
                          "role": {
                            "description": "The role of the message input. One of `user`, `assistant`, `system`, or `developer`.\n",
                            "enum": [
                              "user",
                              "assistant",
                              "system",
                              "developer"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "role",
                          "content"
                        ],
                        "title": "Easy input message",
                        "type": "object"
                      },
                      {
                        "description": "A message input to the model with explicit type field.\n",
                        "properties": {
                          "content": {
                            "description": "A list of one or many input content items.",
                            "items": {
                              "discriminator": {
                                "mapping": {
                                  "input_text": "#/components/schemas/ResponseInputTextContent"
                                },
                                "propertyName": "type"
                              },
                              "oneOf": [
                                {
                                  "description": "A text input to the model.",
                                  "properties": {
                                    "text": {
                                      "description": "The text input to the model.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "The type of the input item. Always `input_text`.",
                                      "enum": [
                                        "input_text"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "text"
                                  ],
                                  "title": "Input text",
                                  "type": "object"
                                }
                              ]
                            },
                            "type": "array"
                          },
                          "role": {
                            "description": "The role of the message input. One of `user`, `system`, or `developer`. Note: assistant role is not supported with explicit type.\n",
                            "enum": [
                              "user",
                              "system",
                              "developer"
                            ],
                            "type": "string"
                          },
                          "status": {
                            "description": "The status of item. Populated when items are returned via API.",
                            "enum": [
                              "in_progress",
                              "completed",
                              "incomplete"
                            ],
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of the message input. Always set to `message`.",
                            "enum": [
                              "message"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "type",
                          "role",
                          "content"
                        ],
                        "title": "Input message",
                        "type": "object"
                      },
                      {
                        "description": "An internal identifier for an item to reference.",
                        "properties": {
                          "id": {
                            "description": "The ID of the item to reference.",
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of item to reference. Always `item_reference`.",
                            "enum": [
                              "item_reference"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "type",
                          "id"
                        ],
                        "title": "Item reference",
                        "type": "object"
                      },
                      {
                        "description": "A function call generated by the model.",
                        "properties": {
                          "arguments": {
                            "description": "A JSON string of the arguments to pass to the function.",
                            "type": "string"
                          },
                          "call_id": {
                            "description": "The unique ID of the function tool call generated by the model.",
                            "type": "string"
                          },
                          "id": {
                            "description": "The unique ID of the function tool call.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the function to call.",
                            "type": "string"
                          },
                          "status": {
                            "description": "The status of the item.",
                            "enum": [
                              "in_progress",
                              "completed",
                              "incomplete"
                            ],
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of the function call. Always `function_call`.",
                            "enum": [
                              "function_call"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "type",
                          "call_id",
                          "name",
                          "arguments"
                        ],
                        "title": "Function call",
                        "type": "object"
                      },
                      {
                        "description": "The output of a function tool call.",
                        "properties": {
                          "call_id": {
                            "description": "The unique ID of the function tool call generated by the model.",
                            "type": "string"
                          },
                          "id": {
                            "description": "The unique ID of the function tool call output.",
                            "type": "string"
                          },
                          "output": {
                            "description": "A JSON string of the output of the function tool call.",
                            "type": "string"
                          },
                          "status": {
                            "description": "The status of the item.",
                            "enum": [
                              "in_progress",
                              "completed",
                              "incomplete"
                            ],
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of the function tool call output. Always `function_call_output`.",
                            "enum": [
                              "function_call_output"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "type",
                          "call_id",
                          "output"
                        ],
                        "title": "Function call output",
                        "type": "object"
                      }
                    ]
                  },
                  "title": "Input item list",
                  "type": "array"
                }
              ]
            },
            "instructions": {
              "description": "Inserts a system (or developer) message as the first item in the model's context.\n",
              "nullable": true,
              "type": "string"
            },
            "max_output_tokens": {
              "description": "An upper bound for the number of tokens that can be generated for a response, including visible output tokens and reasoning tokens.\n",
              "nullable": true,
              "type": "integer"
            },
            "metadata": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Custom key-value pairs for storing additional information. Maximum of 16 pairs.\n",
              "nullable": true,
              "type": "object"
            },
            "model": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "enum": [
                    "gemma2-9b-it",
                    "llama-3.3-70b-versatile",
                    "llama-3.1-8b-instant",
                    "llama-guard-3-8b",
                    "llama3-70b-8192",
                    "llama3-8b-8192"
                  ],
                  "type": "string"
                }
              ],
              "description": "ID of the model to use. For details on which models are compatible with the Responses API, see available [models](https://console.groq.com/docs/models)",
              "example": "llama-3.3-70b-versatile"
            },
            "parallel_tool_calls": {
              "default": true,
              "description": "Enable parallel execution of multiple tool calls.\n",
              "nullable": true,
              "type": "boolean"
            },
            "reasoning": {
              "description": "Configuration for reasoning capabilities when using compatible models.\n",
              "nullable": true,
              "properties": {
                "effort": {
                  "default": "medium",
                  "description": "Level of reasoning effort. Supported values: `low`, `medium`, `high`. Lower values provide faster responses with less reasoning depth.\n",
                  "enum": [
                    "low",
                    "medium",
                    "high"
                  ],
                  "nullable": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "service_tier": {
              "default": "auto",
              "description": "Specifies the latency tier to use for processing the request.\n",
              "enum": [
                "auto",
                "default",
                "flex"
              ],
              "nullable": true,
              "type": "string"
            },
            "store": {
              "default": false,
              "description": "Response storage flag. Note: Currently only supports false or null values.\n",
              "nullable": true,
              "type": "boolean"
            },
            "stream": {
              "default": false,
              "description": "Enable streaming mode to receive response data as server-sent events.\n",
              "nullable": true,
              "type": "boolean"
            },
            "temperature": {
              "default": 1,
              "description": "Controls randomness in the response generation. Range: 0 to 2. Lower values produce more deterministic outputs, higher values increase variety and creativity.\n",
              "example": 1,
              "maximum": 2,
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "text": {
              "description": "Response format configuration. Supports plain text or structured JSON output.\n",
              "properties": {
                "format": {
                  "description": "An object specifying the format that the model must output.\n",
                  "oneOf": [
                    {
                      "description": "Default response format. Used to generate text responses.\n",
                      "properties": {
                        "type": {
                          "description": "The type of response format being defined. Always `text`.",
                          "enum": [
                            "text"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "title": "Text",
                      "type": "object"
                    },
                    {
                      "description": "JSON object response format. An older method of generating JSON responses. Using `json_schema` is recommended for models that support it. Note that the model will not generate JSON without a system or user message instructing it to do so.\n",
                      "properties": {
                        "type": {
                          "description": "The type of response format being defined. Always `json_object`.",
                          "enum": [
                            "json_object"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "title": "JSON object",
                      "type": "object"
                    },
                    {
                      "description": "JSON Schema response format. Used to generate structured JSON responses.\n",
                      "properties": {
                        "description": {
                          "description": "A description of what the response format is for, used by the model to determine how to respond in the format.\n",
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.\n",
                          "type": "string"
                        },
                        "schema": {
                          "additionalProperties": true,
                          "description": "The schema for the response format, described as a JSON Schema object.\n",
                          "type": "object"
                        },
                        "strict": {
                          "default": false,
                          "description": "Whether to enable strict schema adherence when generating the output.\n",
                          "nullable": true,
                          "type": "boolean"
                        },
                        "type": {
                          "description": "The type of response format being defined. Always `json_schema`.",
                          "enum": [
                            "json_schema"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "name",
                        "schema"
                      ],
                      "title": "JSON schema",
                      "type": "object"
                    }
                  ]
                }
              },
              "type": "object"
            },
            "tool_choice": {
              "description": "Controls which (if any) tool is called by the model.\n`none` means the model will not call any tool and instead generates a message.\n`auto` means the model can pick between generating a message or calling one or more tools.\n`required` means the model must call one or more tools.\nSpecifying a particular tool via `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.\n\n`none` is the default when no tools are present. `auto` is the default if tools are present.\n",
              "nullable": true,
              "oneOf": [
                {
                  "description": "`none` means the model will not call any tool and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools.\n",
                  "enum": [
                    "none",
                    "auto",
                    "required"
                  ],
                  "type": "string"
                },
                {
                  "description": "Specifies a tool the model should use. Use to force the model to call a specific function.",
                  "properties": {
                    "function": {
                      "properties": {
                        "name": {
                          "description": "The name of the function to call.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object"
                    },
                    "type": {
                      "description": "The type of the tool. Currently, only `function` is supported.",
                      "enum": [
                        "function"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "type",
                    "function"
                  ],
                  "type": "object"
                }
              ]
            },
            "tools": {
              "description": "List of tools available to the model. Currently supports function definitions only. Maximum of 128 functions.\n",
              "items": {
                "properties": {
                  "description": {
                    "description": "Describes the function's purpose. The model uses this to determine when to invoke the function.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.",
                    "type": "string"
                  },
                  "parameters": {
                    "additionalProperties": true,
                    "description": "Function parameters defined as a JSON Schema object. Refer to https://json-schema.org/understanding-json-schema/ for schema documentation.",
                    "type": "object"
                  },
                  "strict": {
                    "description": "Whether to enable strict schema adherence when generating the function call.",
                    "nullable": true,
                    "type": "boolean"
                  },
                  "type": {
                    "description": "The type of the tool. Currently, only `function` is supported.",
                    "enum": [
                      "function"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "name"
                ],
                "type": "object"
              },
              "maxItems": 128,
              "nullable": true,
              "type": "array"
            },
            "top_p": {
              "default": 1,
              "description": "Nucleus sampling parameter that controls the cumulative probability cutoff. Range: 0 to 1. A value of 0.1 restricts sampling to tokens within the top 10% probability mass.\n",
              "example": 1,
              "maximum": 1,
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "truncation": {
              "default": "disabled",
              "description": "Context truncation strategy. Supported values: `auto` or `disabled`.\n",
              "enum": [
                "auto",
                "disabled"
              ],
              "nullable": true,
              "type": "string"
            },
            "user": {
              "description": "Optional identifier for tracking end-user requests. Useful for usage monitoring and compliance.\n",
              "example": "user-1234",
              "type": "string"
            }
          },
          "required": [
            "model",
            "input"
          ],
          "type": "object"
        }
      }
    },
    "description": "The input prompt and parameters",
    "required": true
  },
  "responses": {
    "200": {
      "content": {
        "application/json": {
          "schema": {
            "description": "Represents a response returned by model, based on the provided input.",
            "properties": {
              "background": {
                "default": false,
                "description": "Whether the response was generated in the background.",
                "type": "boolean"
              },
              "created_at": {
                "description": "The Unix timestamp (in seconds) of when the response was created.",
                "type": "integer"
              },
              "error": {
                "description": "An error object if the response failed.",
                "nullable": true,
                "properties": {
                  "code": {
                    "description": "The error code.",
                    "type": "string"
                  },
                  "message": {
                    "description": "A human-readable error message.",
                    "type": "string"
                  }
                },
                "required": [
                  "code",
                  "message"
                ],
                "type": "object"
              },
              "id": {
                "description": "A unique identifier for the response.",
                "type": "string"
              },
              "incomplete_details": {
                "description": "Details about why the response is incomplete.",
                "nullable": true,
                "properties": {
                  "reason": {
                    "description": "The reason why the response is incomplete.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "instructions": {
                "description": "The system instructions used for the response.",
                "nullable": true,
                "type": "string"
              },
              "max_output_tokens": {
                "description": "The maximum number of tokens configured for the response.",
                "nullable": true,
                "type": "integer"
              },
              "max_tool_calls": {
                "description": "The maximum number of tool calls allowed.",
                "nullable": true,
                "type": "integer"
              },
              "metadata": {
                "additionalProperties": {
                  "type": "string"
                },
                "description": "Metadata attached to the response.",
                "nullable": true,
                "type": "object"
              },
              "model": {
                "description": "The model used for the response.",
                "type": "string"
              },
              "object": {
                "description": "The object type, which is always `response`.",
                "enum": [
                  "response"
                ],
                "type": "string"
              },
              "output": {
                "description": "An array of content items generated by the model.",
                "items": {
                  "discriminator": {
                    "mapping": {
                      "function_call": "#/components/schemas/ResponseOutputFunctionCall",
                      "message": "#/components/schemas/ResponseOutputMessage",
                      "reasoning": "#/components/schemas/ResponseOutputReasoning"
                    },
                    "propertyName": "type"
                  },
                  "oneOf": [
                    {
                      "description": "An output message from the model.",
                      "properties": {
                        "content": {
                          "description": "The content of the output message.",
                          "items": {
                            "discriminator": {
                              "mapping": {
                                "output_text": "#/components/schemas/ResponseOutputTextContent"
                              },
                              "propertyName": "type"
                            },
                            "oneOf": [
                              {
                                "description": "A text output from the model.",
                                "properties": {
                                  "annotations": {
                                    "description": "The annotations of the text output.",
                                    "items": {
                                      "discriminator": {
                                        "mapping": {
                                          "file_citation": "#/components/schemas/ResponseFileCitation",
                                          "url_citation": "#/components/schemas/ResponseUrlCitation"
                                        },
                                        "propertyName": "type"
                                      },
                                      "oneOf": [
                                        {
                                          "description": "A citation to a file.",
                                          "properties": {
                                            "file_id": {
                                              "description": "The ID of the file.",
                                              "type": "string"
                                            },
                                            "index": {
                                              "description": "The index of the citation in the text.",
                                              "type": "integer"
                                            },
                                            "type": {
                                              "description": "The type of the annotation. Always `file_citation`.",
                                              "enum": [
                                                "file_citation"
                                              ],
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "file_id"
                                          ],
                                          "title": "File citation",
                                          "type": "object"
                                        },
                                        {
                                          "description": "A citation for a web resource.",
                                          "properties": {
                                            "end_index": {
                                              "description": "The index of the last character of the URL citation in the message.",
                                              "type": "integer"
                                            },
                                            "start_index": {
                                              "description": "The index of the first character of the URL citation in the message.",
                                              "type": "integer"
                                            },
                                            "title": {
                                              "description": "The title of the web resource.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "description": "The type of the annotation. Always `url_citation`.",
                                              "enum": [
                                                "url_citation"
                                              ],
                                              "type": "string"
                                            },
                                            "url": {
                                              "description": "The URL of the web resource.",
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "url"
                                          ],
                                          "title": "URL citation",
                                          "type": "object"
                                        }
                                      ]
                                    },
                                    "type": "array"
                                  },
                                  "logprobs": {
                                    "description": "Log probability information for the output.",
                                    "items": {
                                      "type": "string"
                                    },
                                    "nullable": true,
                                    "type": "array"
                                  },
                                  "text": {
                                    "description": "The text output from the model.",
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "The type of the output text. Always `output_text`.",
                                    "enum": [
                                      "output_text"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "text",
                                  "annotations"
                                ],
                                "title": "Output text",
                                "type": "object"
                              }
                            ]
                          },
                          "type": "array"
                        },
                        "id": {
                          "description": "The unique ID of the output message.",
                          "type": "string"
                        },
                        "role": {
                          "description": "The role of the output message. Always `assistant`.",
                          "enum": [
                            "assistant"
                          ],
                          "type": "string"
                        },
                        "status": {
                          "description": "The status of the message.",
                          "enum": [
                            "in_progress",
                            "completed",
                            "incomplete"
                          ],
                          "type": "string"
                        },
                        "type": {
                          "description": "The type of the output message. Always `message`.",
                          "enum": [
                            "message"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "id",
                        "role",
                        "content"
                      ],
                      "title": "Output message",
                      "type": "object"
                    },
                    {
                      "description": "A function call generated by the model.",
                      "properties": {
                        "arguments": {
                          "description": "A JSON string of the arguments to pass to the function.",
                          "type": "string"
                        },
                        "call_id": {
                          "description": "The unique ID of the function tool call generated by the model.",
                          "type": "string"
                        },
                        "id": {
                          "description": "The unique ID of the function tool call.",
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the function to call.",
                          "type": "string"
                        },
                        "status": {
                          "description": "The status of the function call.",
                          "enum": [
                            "in_progress",
                            "completed",
                            "incomplete"
                          ],
                          "type": "string"
                        },
                        "type": {
                          "description": "The type of the function call. Always `function_call`.",
                          "enum": [
                            "function_call"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "id",
                        "call_id",
                        "name",
                        "arguments"
                      ],
                      "title": "Function call",
                      "type": "object"
                    },
                    {
                      "description": "A reasoning output from the model.",
                      "properties": {
                        "id": {
                          "description": "The unique ID of the reasoning output.",
                          "type": "string"
                        },
                        "summary": {
                          "description": "Summary items (currently empty).",
                          "items": {
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "type": {
                          "description": "The type of the reasoning output. Always `reasoning`.",
                          "enum": [
                            "reasoning"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "id",
                        "summary"
                      ],
                      "title": "Reasoning",
                      "type": "object"
                    }
                  ]
                },
                "type": "array"
              },
              "parallel_tool_calls": {
                "description": "Whether the model can run tool calls in parallel.",
                "type": "boolean"
              },
              "previous_response_id": {
                "description": "Not supported. Always null.",
                "nullable": true,
                "type": "string"
              },
              "reasoning": {
                "description": "Configuration options for reasoning models.",
                "nullable": true,
                "properties": {
                  "effort": {
                    "description": "The reasoning effort level used.",
                    "enum": [
                      "low",
                      "medium",
                      "high"
                    ],
                    "nullable": true,
                    "type": "string"
                  },
                  "summary": {
                    "description": "Not supported. Always null.",
                    "nullable": true,
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "service_tier": {
                "description": "The service tier used for processing.",
                "enum": [
                  "auto",
                  "default",
                  "flex"
                ],
                "type": "string"
              },
              "status": {
                "description": "The status of the response generation. One of `completed`, `failed`, `in_progress`, or `incomplete`.\n",
                "enum": [
                  "completed",
                  "failed",
                  "in_progress",
                  "incomplete"
                ],
                "type": "string"
              },
              "store": {
                "description": "Whether the response was stored.",
                "type": "boolean"
              },
              "temperature": {
                "description": "The sampling temperature used.",
                "type": "number"
              },
              "text": {
                "description": "Text format configuration used for the response.",
                "properties": {
                  "format": {
                    "description": "An object specifying the format that the model must output.\n",
                    "oneOf": [
                      {
                        "description": "Default response format. Used to generate text responses.\n",
                        "properties": {
                          "type": {
                            "description": "The type of response format being defined. Always `text`.",
                            "enum": [
                              "text"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "title": "Text",
                        "type": "object"
                      },
                      {
                        "description": "JSON object response format. An older method of generating JSON responses. Using `json_schema` is recommended for models that support it. Note that the model will not generate JSON without a system or user message instructing it to do so.\n",
                        "properties": {
                          "type": {
                            "description": "The type of response format being defined. Always `json_object`.",
                            "enum": [
                              "json_object"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "title": "JSON object",
                        "type": "object"
                      },
                      {
                        "description": "JSON Schema response format. Used to generate structured JSON responses.\n",
                        "properties": {
                          "description": {
                            "description": "A description of what the response format is for, used by the model to determine how to respond in the format.\n",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.\n",
                            "type": "string"
                          },
                          "schema": {
                            "additionalProperties": true,
                            "description": "The schema for the response format, described as a JSON Schema object.\n",
                            "type": "object"
                          },
                          "strict": {
                            "default": false,
                            "description": "Whether to enable strict schema adherence when generating the output.\n",
                            "nullable": true,
                            "type": "boolean"
                          },
                          "type": {
                            "description": "The type of response format being defined. Always `json_schema`.",
                            "enum": [
                              "json_schema"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "type",
                          "name",
                          "schema"
                        ],
                        "title": "JSON schema",
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              },
              "tool_choice": {
                "description": "Controls which (if any) tool is called by the model.\n`none` means the model will not call any tool and instead generates a message.\n`auto` means the model can pick between generating a message or calling one or more tools.\n`required` means the model must call one or more tools.\nSpecifying a particular tool via `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.\n\n`none` is the default when no tools are present. `auto` is the default if tools are present.\n",
                "nullable": true,
                "oneOf": [
                  {
                    "description": "`none` means the model will not call any tool and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools.\n",
                    "enum": [
                      "none",
                      "auto",
                      "required"
                    ],
                    "type": "string"
                  },
                  {
                    "description": "Specifies a tool the model should use. Use to force the model to call a specific function.",
                    "properties": {
                      "function": {
                        "properties": {
                          "name": {
                            "description": "The name of the function to call.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of the tool. Currently, only `function` is supported.",
                        "enum": [
                          "function"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "function"
                    ],
                    "type": "object"
                  }
                ]
              },
              "tools": {
                "description": "The tools that were available to the model.",
                "items": {
                  "properties": {
                    "description": {
                      "description": "Describes the function's purpose. The model uses this to determine when to invoke the function.",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.",
                      "type": "string"
                    },
                    "parameters": {
                      "additionalProperties": true,
                      "description": "Function parameters defined as a JSON Schema object. Refer to https://json-schema.org/understanding-json-schema/ for schema documentation.",
                      "type": "object"
                    },
                    "strict": {
                      "description": "Whether to enable strict schema adherence when generating the function call.",
                      "nullable": true,
                      "type": "boolean"
                    },
                    "type": {
                      "description": "The type of the tool. Currently, only `function` is supported.",
                      "enum": [
                        "function"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "type",
                    "name"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "top_logprobs": {
                "default": 0,
                "description": "The number of top log probabilities returned.",
                "type": "integer"
              },
              "top_p": {
                "description": "The nucleus sampling parameter used.",
                "type": "number"
              },
              "truncation": {
                "description": "The truncation strategy used.",
                "enum": [
                  "auto",
                  "disabled"
                ],
                "type": "string"
              },
              "usage": {
                "description": "Usage statistics for the response request.",
                "properties": {
                  "input_tokens": {
                    "description": "Number of tokens in the input.",
                    "type": "integer"
                  },
                  "input_tokens_details": {
                    "description": "Breakdown of input tokens.",
                    "properties": {
                      "cached_tokens": {
                        "description": "Number of cached tokens.",
                        "type": "integer"
                      },
                      "reasoning_tokens": {
                        "description": "Number of reasoning tokens.",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "cached_tokens"
                    ],
                    "type": "object"
                  },
                  "output_tokens": {
                    "description": "Number of tokens in the generated output.",
                    "type": "integer"
                  },
                  "output_tokens_details": {
                    "description": "Breakdown of output tokens.",
                    "properties": {
                      "cached_tokens": {
                        "description": "Number of cached tokens.",
                        "type": "integer"
                      },
                      "reasoning_tokens": {
                        "description": "Number of reasoning tokens.",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "cached_tokens",
                      "reasoning_tokens"
                    ],
                    "type": "object"
                  },
                  "total_tokens": {
                    "description": "Total number of tokens used in the request (input + output).",
                    "type": "integer"
                  }
                },
                "required": [
                  "input_tokens",
                  "input_tokens_details",
                  "output_tokens",
                  "output_tokens_details",
                  "total_tokens"
                ],
                "type": "object"
              },
              "user": {
                "description": "The user identifier.",
                "nullable": true,
                "type": "string"
              }
            },
            "required": [
              "id",
              "object",
              "status",
              "created_at",
              "output",
              "model",
              "tools",
              "tool_choice",
              "truncation",
              "metadata",
              "temperature",
              "top_p",
              "service_tier",
              "error",
              "incomplete_details",
              "parallel_tool_calls",
              "store"
            ],
            "type": "object"
          }
        }
      },
      "description": "OK"
    }
  },
  "summary": "Creates a model response for the given input.",
  "tags": [
    "Responses"
  ]
}
