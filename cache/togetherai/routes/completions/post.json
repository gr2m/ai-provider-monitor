{
  "deprecated": false,
  "description": "Query a language, code, or image model.",
  "operationId": "completions",
  "requestBody": {
    "content": {
      "application/json": {
        "schema": {
          "properties": {
            "echo": {
              "description": "If true, the response will contain the prompt. Can be used with `logprobs` to return prompt logprobs.",
              "type": "boolean"
            },
            "frequency_penalty": {
              "description": "A number between -2.0 and 2.0 where a positive value decreases the likelihood of repeating tokens that have already been mentioned.",
              "format": "float",
              "type": "number"
            },
            "logit_bias": {
              "additionalProperties": {
                "format": "float",
                "type": "number"
              },
              "description": "Adjusts the likelihood of specific tokens appearing in the generated output.",
              "example": {
                "105": 21.4,
                "1024": -10.5
              },
              "type": "object"
            },
            "logprobs": {
              "description": "An integer between 0 and 20 of the top k tokens to return log probabilities for at each generation step, instead of just the sampled token. Log probabilities help assess model confidence in token predictions.",
              "maximum": 20,
              "minimum": 0,
              "type": "integer"
            },
            "max_tokens": {
              "description": "The maximum number of tokens to generate.",
              "type": "integer"
            },
            "min_p": {
              "description": "A number between 0 and 1 that can be used as an alternative to top-p and top-k.",
              "format": "float",
              "type": "number"
            },
            "model": {
              "anyOf": [
                {
                  "enum": [
                    "meta-llama/Llama-2-70b-hf",
                    "mistralai/Mistral-7B-v0.1",
                    "mistralai/Mixtral-8x7B-v0.1",
                    "Meta-Llama/Llama-Guard-7b"
                  ],
                  "type": "string"
                },
                {
                  "type": "string"
                }
              ],
              "description": "The name of the model to query.<br> <br> [See all of Together AI's chat models](https://docs.together.ai/docs/serverless-models#chat-models)\n",
              "example": "mistralai/Mixtral-8x7B-Instruct-v0.1",
              "type": "string"
            },
            "n": {
              "description": "The number of completions to generate for each prompt.",
              "maximum": 128,
              "minimum": 1,
              "type": "integer"
            },
            "presence_penalty": {
              "description": "A number between -2.0 and 2.0 where a positive value increases the likelihood of a model talking about new topics.",
              "format": "float",
              "type": "number"
            },
            "prompt": {
              "description": "A string providing context for the model to complete.",
              "example": "<s>[INST] What is the capital of France? [/INST]",
              "type": "string"
            },
            "repetition_penalty": {
              "description": "A number that controls the diversity of generated text by reducing the likelihood of repeated sequences. Higher values decrease repetition.",
              "format": "float",
              "type": "number"
            },
            "safety_model": {
              "anyOf": [
                {
                  "enum": [
                    "Meta-Llama/Llama-Guard-7b"
                  ],
                  "type": "string"
                },
                {
                  "type": "string"
                }
              ],
              "description": "The name of the moderation model used to validate tokens. Choose from the available moderation models found [here](https://docs.together.ai/docs/inference-models#moderation-models).",
              "example": "safety_model_name",
              "type": "string"
            },
            "seed": {
              "description": "Seed value for reproducibility.",
              "example": 42,
              "type": "integer"
            },
            "stop": {
              "description": "A list of string sequences that will truncate (stop) inference text output. For example, \"</s>\" will stop generation as soon as the model generates the given token.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "stream": {
              "description": "If true, stream tokens as Server-Sent Events as the model generates them instead of waiting for the full model response. The stream terminates with `data: [DONE]`. If false, return a single JSON object containing the results.",
              "type": "boolean"
            },
            "temperature": {
              "description": "A decimal number from 0-1 that determines the degree of randomness in the response. A temperature less than 1 favors more correctness and is appropriate for question answering or summarization. A value closer to 1 introduces more randomness in the output.",
              "format": "float",
              "type": "number"
            },
            "top_k": {
              "description": "An integer that's used to limit the number of choices for the next predicted word or token. It specifies the maximum number of tokens to consider at each step, based on their probability of occurrence. This technique helps to speed up the generation process and can improve the quality of the generated text by focusing on the most likely options.",
              "format": "int32",
              "type": "integer"
            },
            "top_p": {
              "description": "A percentage (also called the nucleus parameter) that's used to dynamically adjust the number of choices for each predicted token based on the cumulative probabilities. It specifies a probability threshold below which all less likely tokens are filtered out. This technique helps maintain diversity and generate more fluent and natural-sounding text.",
              "format": "float",
              "type": "number"
            }
          },
          "required": [
            "model",
            "prompt"
          ],
          "type": "object"
        }
      }
    }
  },
  "responses": {
    "200": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "choices": {
                "items": {
                  "properties": {
                    "finish_reason": {
                      "enum": [
                        "stop",
                        "eos",
                        "length",
                        "tool_calls",
                        "function_call"
                      ],
                      "type": "string"
                    },
                    "logprobs": {
                      "properties": {
                        "token_ids": {
                          "description": "List of token IDs corresponding to the logprobs",
                          "items": {
                            "type": "number"
                          },
                          "type": "array"
                        },
                        "token_logprobs": {
                          "description": "List of token log probabilities",
                          "items": {
                            "type": "number"
                          },
                          "type": "array"
                        },
                        "tokens": {
                          "description": "List of token strings",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "seed": {
                      "type": "integer"
                    },
                    "text": {
                      "example": "The capital of France is Paris. It's located in the north-central part of the country and is one of the most populous and visited cities in the world, known for its iconic landmarks like the Eiffel Tower, Louvre Museum, Notre-Dame Cathedral, and more. Paris is also the capital of the ÃŽle-de-France region and is a major global center for art, fashion, gastronomy, and culture.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "created": {
                "type": "integer"
              },
              "id": {
                "type": "string"
              },
              "model": {
                "type": "string"
              },
              "object": {
                "enum": [
                  "text.completion"
                ],
                "type": "string"
              },
              "prompt": {
                "items": {
                  "properties": {
                    "logprobs": {
                      "properties": {
                        "token_ids": {
                          "description": "List of token IDs corresponding to the logprobs",
                          "items": {
                            "type": "number"
                          },
                          "type": "array"
                        },
                        "token_logprobs": {
                          "description": "List of token log probabilities",
                          "items": {
                            "type": "number"
                          },
                          "type": "array"
                        },
                        "tokens": {
                          "description": "List of token strings",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "text": {
                      "example": "<s>[INST] What is the capital of France? [/INST]",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "usage": {
                "nullable": true,
                "properties": {
                  "completion_tokens": {
                    "type": "integer"
                  },
                  "prompt_tokens": {
                    "type": "integer"
                  },
                  "total_tokens": {
                    "type": "integer"
                  }
                },
                "required": [
                  "prompt_tokens",
                  "completion_tokens",
                  "total_tokens"
                ],
                "type": "object"
              }
            },
            "required": [
              "id",
              "choices",
              "usage",
              "created",
              "model",
              "object"
            ],
            "type": "object"
          }
        },
        "text/event-stream": {
          "schema": {
            "oneOf": [
              {
                "properties": {
                  "data": {
                    "properties": {
                      "choices": {
                        "items": {
                          "properties": {
                            "delta": {
                              "properties": {
                                "content": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "function_call": {
                                  "deprecated": true,
                                  "nullable": true,
                                  "properties": {
                                    "arguments": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "arguments",
                                    "name"
                                  ],
                                  "type": "object"
                                },
                                "role": {
                                  "enum": [
                                    "system",
                                    "user",
                                    "assistant",
                                    "function",
                                    "tool"
                                  ],
                                  "type": "string"
                                },
                                "token_id": {
                                  "type": "integer"
                                },
                                "tool_calls": {
                                  "items": {
                                    "properties": {
                                      "function": {
                                        "properties": {
                                          "arguments": {
                                            "type": "string"
                                          },
                                          "name": {
                                            "example": "function_name",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "name",
                                          "arguments"
                                        ],
                                        "type": "object"
                                      },
                                      "id": {
                                        "type": "string"
                                      },
                                      "index": {
                                        "type": "number"
                                      },
                                      "type": {
                                        "enum": [
                                          "function"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type",
                                      "function",
                                      "index"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "role"
                              ],
                              "title": "CompletionChoiceDelta",
                              "type": "object"
                            },
                            "index": {
                              "type": "integer"
                            },
                            "text": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "index"
                          ],
                          "type": "object"
                        },
                        "title": "CompletionChoices",
                        "type": "array"
                      },
                      "created": {
                        "type": "integer"
                      },
                      "finish_reason": {
                        "allOf": [
                          {
                            "enum": [
                              "stop",
                              "eos",
                              "length",
                              "tool_calls",
                              "function_call"
                            ],
                            "type": "string"
                          },
                          {
                            "nullable": true
                          }
                        ]
                      },
                      "id": {
                        "type": "string"
                      },
                      "object": {
                        "enum": [
                          "completion.chunk"
                        ],
                        "type": "string"
                      },
                      "seed": {
                        "type": "integer"
                      },
                      "token": {
                        "properties": {
                          "id": {
                            "type": "integer"
                          },
                          "logprob": {
                            "type": "number"
                          },
                          "special": {
                            "type": "boolean"
                          },
                          "text": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "text",
                          "logprob",
                          "special"
                        ],
                        "type": "object"
                      },
                      "usage": {
                        "allOf": [
                          {
                            "nullable": true,
                            "properties": {
                              "completion_tokens": {
                                "type": "integer"
                              },
                              "prompt_tokens": {
                                "type": "integer"
                              },
                              "total_tokens": {
                                "type": "integer"
                              }
                            },
                            "required": [
                              "prompt_tokens",
                              "completion_tokens",
                              "total_tokens"
                            ],
                            "type": "object"
                          },
                          {
                            "nullable": true
                          }
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "token",
                      "choices",
                      "usage",
                      "finish_reason"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              {
                "properties": {
                  "data": {
                    "enum": [
                      "[DONE]"
                    ],
                    "title": "stream_signal",
                    "type": "string"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            ]
          }
        }
      },
      "description": "200"
    },
    "400": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "error": {
                "properties": {
                  "code": {
                    "default": null,
                    "nullable": true,
                    "type": "string"
                  },
                  "message": {
                    "nullable": false,
                    "type": "string"
                  },
                  "param": {
                    "default": null,
                    "nullable": true,
                    "type": "string"
                  },
                  "type": {
                    "nullable": false,
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "message"
                ],
                "type": "object"
              }
            },
            "required": [
              "error"
            ],
            "type": "object"
          }
        }
      },
      "description": "BadRequest"
    },
    "401": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "error": {
                "properties": {
                  "code": {
                    "default": null,
                    "nullable": true,
                    "type": "string"
                  },
                  "message": {
                    "nullable": false,
                    "type": "string"
                  },
                  "param": {
                    "default": null,
                    "nullable": true,
                    "type": "string"
                  },
                  "type": {
                    "nullable": false,
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "message"
                ],
                "type": "object"
              }
            },
            "required": [
              "error"
            ],
            "type": "object"
          }
        }
      },
      "description": "Unauthorized"
    },
    "404": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "error": {
                "properties": {
                  "code": {
                    "default": null,
                    "nullable": true,
                    "type": "string"
                  },
                  "message": {
                    "nullable": false,
                    "type": "string"
                  },
                  "param": {
                    "default": null,
                    "nullable": true,
                    "type": "string"
                  },
                  "type": {
                    "nullable": false,
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "message"
                ],
                "type": "object"
              }
            },
            "required": [
              "error"
            ],
            "type": "object"
          }
        }
      },
      "description": "NotFound"
    },
    "429": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "error": {
                "properties": {
                  "code": {
                    "default": null,
                    "nullable": true,
                    "type": "string"
                  },
                  "message": {
                    "nullable": false,
                    "type": "string"
                  },
                  "param": {
                    "default": null,
                    "nullable": true,
                    "type": "string"
                  },
                  "type": {
                    "nullable": false,
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "message"
                ],
                "type": "object"
              }
            },
            "required": [
              "error"
            ],
            "type": "object"
          }
        }
      },
      "description": "RateLimit"
    },
    "503": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "error": {
                "properties": {
                  "code": {
                    "default": null,
                    "nullable": true,
                    "type": "string"
                  },
                  "message": {
                    "nullable": false,
                    "type": "string"
                  },
                  "param": {
                    "default": null,
                    "nullable": true,
                    "type": "string"
                  },
                  "type": {
                    "nullable": false,
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "message"
                ],
                "type": "object"
              }
            },
            "required": [
              "error"
            ],
            "type": "object"
          }
        }
      },
      "description": "Overloaded"
    },
    "504": {
      "content": {
        "application/json": {
          "schema": {
            "properties": {
              "error": {
                "properties": {
                  "code": {
                    "default": null,
                    "nullable": true,
                    "type": "string"
                  },
                  "message": {
                    "nullable": false,
                    "type": "string"
                  },
                  "param": {
                    "default": null,
                    "nullable": true,
                    "type": "string"
                  },
                  "type": {
                    "nullable": false,
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "message"
                ],
                "type": "object"
              }
            },
            "required": [
              "error"
            ],
            "type": "object"
          }
        }
      },
      "description": "Timeout"
    }
  },
  "summary": "Create completion",
  "tags": [
    "Completion"
  ]
}
