{
  "components": {
    "schemas": {
      "APIError": {
        "properties": {
          "message": {
            "default": "Internal server error",
            "title": "Message",
            "type": "string"
          },
          "type": {
            "const": "api_error",
            "default": "api_error",
            "enum": ["api_error"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["message", "type"],
        "title": "APIError",
        "type": "object"
      },
      "AnthropicBeta": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "enum": [
              "message-batches-2024-09-24",
              "prompt-caching-2024-07-31",
              "computer-use-2024-10-22",
              "computer-use-2025-01-24",
              "pdfs-2024-09-25",
              "token-counting-2024-11-01",
              "token-efficient-tools-2025-02-19",
              "output-128k-2025-02-19",
              "files-api-2025-04-14",
              "mcp-client-2025-04-04",
              "dev-full-thinking-2025-05-14",
              "interleaved-thinking-2025-05-14",
              "code-execution-2025-05-22",
              "extended-cache-ttl-2025-04-11",
              "context-1m-2025-08-07",
              "context-management-2025-06-27",
              "model-context-window-exceeded-2025-08-26"
            ],
            "type": "string",
            "x-stainless-nominal": false
          }
        ]
      },
      "AuthenticationError": {
        "properties": {
          "message": {
            "default": "Authentication error",
            "title": "Message",
            "type": "string"
          },
          "type": {
            "const": "authentication_error",
            "default": "authentication_error",
            "enum": ["authentication_error"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["message", "type"],
        "title": "AuthenticationError",
        "type": "object"
      },
      "Base64ImageSource": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "format": "byte",
            "title": "Data",
            "type": "string"
          },
          "media_type": {
            "enum": ["image/jpeg", "image/png", "image/gif", "image/webp"],
            "title": "Media Type",
            "type": "string"
          },
          "type": {
            "const": "base64",
            "enum": ["base64"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["data", "media_type", "type"],
        "title": "Base64ImageSource",
        "type": "object"
      },
      "Base64PDFSource": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "format": "byte",
            "title": "Data",
            "type": "string"
          },
          "media_type": {
            "const": "application/pdf",
            "enum": ["application/pdf"],
            "title": "Media Type",
            "type": "string"
          },
          "type": {
            "const": "base64",
            "enum": ["base64"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["data", "media_type", "type"],
        "title": "Base64PDFSource",
        "type": "object"
      },
      "BashTool_20250124": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/CacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "name": {
            "const": "bash",
            "description": "Name of the tool.\n\nThis is how the tool will be called by the model and in `tool_use` blocks.",
            "enum": ["bash"],
            "title": "Name",
            "type": "string"
          },
          "type": {
            "const": "bash_20250124",
            "enum": ["bash_20250124"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["name", "type"],
        "title": "BashTool_20250124",
        "type": "object"
      },
      "BetaAPIError": {
        "properties": {
          "message": {
            "default": "Internal server error",
            "title": "Message",
            "type": "string"
          },
          "type": {
            "const": "api_error",
            "default": "api_error",
            "enum": ["api_error"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["message", "type"],
        "title": "APIError",
        "type": "object"
      },
      "BetaAuthenticationError": {
        "properties": {
          "message": {
            "default": "Authentication error",
            "title": "Message",
            "type": "string"
          },
          "type": {
            "const": "authentication_error",
            "default": "authentication_error",
            "enum": ["authentication_error"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["message", "type"],
        "title": "AuthenticationError",
        "type": "object"
      },
      "BetaBase64ImageSource": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "format": "byte",
            "title": "Data",
            "type": "string"
          },
          "media_type": {
            "enum": ["image/jpeg", "image/png", "image/gif", "image/webp"],
            "title": "Media Type",
            "type": "string"
          },
          "type": {
            "const": "base64",
            "enum": ["base64"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["data", "media_type", "type"],
        "title": "Base64ImageSource",
        "type": "object"
      },
      "BetaBase64PDFSource": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "format": "byte",
            "title": "Data",
            "type": "string"
          },
          "media_type": {
            "const": "application/pdf",
            "enum": ["application/pdf"],
            "title": "Media Type",
            "type": "string"
          },
          "type": {
            "const": "base64",
            "enum": ["base64"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["data", "media_type", "type"],
        "title": "Base64PDFSource",
        "type": "object"
      },
      "BetaBashCodeExecutionToolResultErrorCode": {
        "enum": [
          "invalid_tool_input",
          "unavailable",
          "too_many_requests",
          "execution_time_exceeded",
          "output_file_too_large"
        ],
        "title": "BashCodeExecutionToolResultErrorCode",
        "type": "string"
      },
      "BetaBashTool_20241022": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/BetaCacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BetaCacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "name": {
            "const": "bash",
            "description": "Name of the tool.\n\nThis is how the tool will be called by the model and in `tool_use` blocks.",
            "enum": ["bash"],
            "title": "Name",
            "type": "string"
          },
          "type": {
            "const": "bash_20241022",
            "enum": ["bash_20241022"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["name", "type"],
        "title": "BashTool_20241022",
        "type": "object"
      },
      "BetaBashTool_20250124": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/BetaCacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BetaCacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "name": {
            "const": "bash",
            "description": "Name of the tool.\n\nThis is how the tool will be called by the model and in `tool_use` blocks.",
            "enum": ["bash"],
            "title": "Name",
            "type": "string"
          },
          "type": {
            "const": "bash_20250124",
            "enum": ["bash_20250124"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["name", "type"],
        "title": "BashTool_20250124",
        "type": "object"
      },
      "BetaBillingError": {
        "properties": {
          "message": {
            "default": "Billing error",
            "title": "Message",
            "type": "string"
          },
          "type": {
            "const": "billing_error",
            "default": "billing_error",
            "enum": ["billing_error"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["message", "type"],
        "title": "BillingError",
        "type": "object"
      },
      "BetaCacheControlEphemeral": {
        "additionalProperties": false,
        "properties": {
          "ttl": {
            "description": "The time-to-live for the cache control breakpoint.\n\nThis may be one the following values:\n- `5m`: 5 minutes\n- `1h`: 1 hour\n\nDefaults to `5m`.",
            "enum": ["5m", "1h"],
            "title": "Ttl",
            "type": "string",
            "x-stainless-renameMap": {
              "ttl_1h": "1h",
              "ttl_5m": "5m"
            }
          },
          "type": {
            "const": "ephemeral",
            "enum": ["ephemeral"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "CacheControlEphemeral",
        "type": "object",
        "x-stainless-go-constant-constructor": true
      },
      "BetaCacheCreation": {
        "properties": {
          "ephemeral_1h_input_tokens": {
            "default": 0,
            "description": "The number of input tokens used to create the 1 hour cache entry.",
            "minimum": 0,
            "title": "Ephemeral 1H Input Tokens",
            "type": "integer"
          },
          "ephemeral_5m_input_tokens": {
            "default": 0,
            "description": "The number of input tokens used to create the 5 minute cache entry.",
            "minimum": 0,
            "title": "Ephemeral 5M Input Tokens",
            "type": "integer"
          }
        },
        "required": ["ephemeral_1h_input_tokens", "ephemeral_5m_input_tokens"],
        "title": "CacheCreation",
        "type": "object"
      },
      "BetaCanceledResult": {
        "properties": {
          "type": {
            "const": "canceled",
            "default": "canceled",
            "enum": ["canceled"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "CanceledResult",
        "type": "object"
      },
      "BetaCitationsDelta": {
        "properties": {
          "citation": {
            "discriminator": {
              "mapping": {
                "char_location": "#/components/schemas/BetaResponseCharLocationCitation",
                "content_block_location": "#/components/schemas/BetaResponseContentBlockLocationCitation",
                "page_location": "#/components/schemas/BetaResponsePageLocationCitation",
                "search_result_location": "#/components/schemas/BetaResponseSearchResultLocationCitation",
                "web_search_result_location": "#/components/schemas/BetaResponseWebSearchResultLocationCitation"
              },
              "propertyName": "type"
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/BetaResponseCharLocationCitation"
              },
              {
                "$ref": "#/components/schemas/BetaResponsePageLocationCitation"
              },
              {
                "$ref": "#/components/schemas/BetaResponseContentBlockLocationCitation"
              },
              {
                "$ref": "#/components/schemas/BetaResponseWebSearchResultLocationCitation"
              },
              {
                "$ref": "#/components/schemas/BetaResponseSearchResultLocationCitation"
              }
            ],
            "title": "Citation"
          },
          "type": {
            "const": "citations_delta",
            "default": "citations_delta",
            "enum": ["citations_delta"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["citation", "type"],
        "title": "CitationsDelta",
        "type": "object"
      },
      "BetaClearToolUses20250919": {
        "additionalProperties": false,
        "properties": {
          "clear_at_least": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BetaInputTokensClearAtLeast"
              },
              {
                "type": "null"
              }
            ],
            "description": "Minimum number of tokens that must be cleared when triggered. Context will only be modified if at least this many tokens can be removed."
          },
          "clear_tool_inputs": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Whether to clear all tool inputs (bool) or specific tool inputs to clear (list)",
            "title": "Clear Tool Inputs"
          },
          "exclude_tools": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Tool names whose uses are preserved from clearing",
            "title": "Exclude Tools"
          },
          "keep": {
            "description": "Number of tool uses to retain in the conversation",
            "discriminator": {
              "mapping": {
                "tool_uses": "#/components/schemas/BetaToolUsesKeep"
              },
              "propertyName": "type"
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/BetaToolUsesKeep"
              }
            ],
            "title": "Keep"
          },
          "trigger": {
            "description": "Condition that triggers the context management strategy",
            "discriminator": {
              "mapping": {
                "input_tokens": "#/components/schemas/BetaInputTokensTrigger",
                "tool_uses": "#/components/schemas/BetaToolUsesTrigger"
              },
              "propertyName": "type"
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/BetaInputTokensTrigger"
              },
              {
                "$ref": "#/components/schemas/BetaToolUsesTrigger"
              }
            ],
            "title": "Trigger"
          },
          "type": {
            "const": "clear_tool_uses_20250919",
            "enum": ["clear_tool_uses_20250919"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "ClearToolUses20250919",
        "type": "object"
      },
      "BetaCodeExecutionToolResultErrorCode": {
        "enum": [
          "invalid_tool_input",
          "unavailable",
          "too_many_requests",
          "execution_time_exceeded"
        ],
        "title": "CodeExecutionToolResultErrorCode",
        "type": "string"
      },
      "BetaCodeExecutionTool_20250522": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/BetaCacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BetaCacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "name": {
            "const": "code_execution",
            "description": "Name of the tool.\n\nThis is how the tool will be called by the model and in `tool_use` blocks.",
            "enum": ["code_execution"],
            "title": "Name",
            "type": "string"
          },
          "type": {
            "const": "code_execution_20250522",
            "enum": ["code_execution_20250522"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["name", "type"],
        "title": "CodeExecutionTool_20250522",
        "type": "object"
      },
      "BetaCodeExecutionTool_20250825": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/BetaCacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BetaCacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "name": {
            "const": "code_execution",
            "description": "Name of the tool.\n\nThis is how the tool will be called by the model and in `tool_use` blocks.",
            "enum": ["code_execution"],
            "title": "Name",
            "type": "string"
          },
          "type": {
            "const": "code_execution_20250825",
            "enum": ["code_execution_20250825"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["name", "type"],
        "title": "CodeExecutionTool_20250825",
        "type": "object"
      },
      "BetaComputerUseTool_20241022": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/BetaCacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BetaCacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "display_height_px": {
            "description": "The height of the display in pixels.",
            "minimum": 1,
            "title": "Display Height Px",
            "type": "integer"
          },
          "display_number": {
            "anyOf": [
              {
                "minimum": 0,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "The X11 display number (e.g. 0, 1) for the display.",
            "title": "Display Number"
          },
          "display_width_px": {
            "description": "The width of the display in pixels.",
            "minimum": 1,
            "title": "Display Width Px",
            "type": "integer"
          },
          "name": {
            "const": "computer",
            "description": "Name of the tool.\n\nThis is how the tool will be called by the model and in `tool_use` blocks.",
            "enum": ["computer"],
            "title": "Name",
            "type": "string"
          },
          "type": {
            "const": "computer_20241022",
            "enum": ["computer_20241022"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["display_height_px", "display_width_px", "name", "type"],
        "title": "ComputerUseTool_20241022",
        "type": "object"
      },
      "BetaComputerUseTool_20250124": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/BetaCacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BetaCacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "display_height_px": {
            "description": "The height of the display in pixels.",
            "minimum": 1,
            "title": "Display Height Px",
            "type": "integer"
          },
          "display_number": {
            "anyOf": [
              {
                "minimum": 0,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "The X11 display number (e.g. 0, 1) for the display.",
            "title": "Display Number"
          },
          "display_width_px": {
            "description": "The width of the display in pixels.",
            "minimum": 1,
            "title": "Display Width Px",
            "type": "integer"
          },
          "name": {
            "const": "computer",
            "description": "Name of the tool.\n\nThis is how the tool will be called by the model and in `tool_use` blocks.",
            "enum": ["computer"],
            "title": "Name",
            "type": "string"
          },
          "type": {
            "const": "computer_20250124",
            "enum": ["computer_20250124"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["display_height_px", "display_width_px", "name", "type"],
        "title": "ComputerUseTool_20250124",
        "type": "object"
      },
      "BetaContainer": {
        "description": "Information about the container used in the request (for the code execution tool)",
        "properties": {
          "expires_at": {
            "description": "The time at which the container will expire.",
            "format": "date-time",
            "title": "Expires At",
            "type": "string"
          },
          "id": {
            "description": "Identifier for the container used in this request",
            "title": "Id",
            "type": "string"
          }
        },
        "required": ["expires_at", "id"],
        "title": "Container",
        "type": "object"
      },
      "BetaContentBlock": {
        "discriminator": {
          "mapping": {
            "bash_code_execution_tool_result": "#/components/schemas/BetaResponseBashCodeExecutionToolResultBlock",
            "code_execution_tool_result": "#/components/schemas/BetaResponseCodeExecutionToolResultBlock",
            "container_upload": "#/components/schemas/BetaResponseContainerUploadBlock",
            "mcp_tool_result": "#/components/schemas/BetaResponseMCPToolResultBlock",
            "mcp_tool_use": "#/components/schemas/BetaResponseMCPToolUseBlock",
            "redacted_thinking": "#/components/schemas/BetaResponseRedactedThinkingBlock",
            "server_tool_use": "#/components/schemas/BetaResponseServerToolUseBlock",
            "text": "#/components/schemas/BetaResponseTextBlock",
            "text_editor_code_execution_tool_result": "#/components/schemas/BetaResponseTextEditorCodeExecutionToolResultBlock",
            "thinking": "#/components/schemas/BetaResponseThinkingBlock",
            "tool_use": "#/components/schemas/BetaResponseToolUseBlock",
            "web_fetch_tool_result": "#/components/schemas/BetaResponseWebFetchToolResultBlock",
            "web_search_tool_result": "#/components/schemas/BetaResponseWebSearchToolResultBlock"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/BetaResponseTextBlock"
          },
          {
            "$ref": "#/components/schemas/BetaResponseThinkingBlock"
          },
          {
            "$ref": "#/components/schemas/BetaResponseRedactedThinkingBlock"
          },
          {
            "$ref": "#/components/schemas/BetaResponseToolUseBlock"
          },
          {
            "$ref": "#/components/schemas/BetaResponseServerToolUseBlock"
          },
          {
            "$ref": "#/components/schemas/BetaResponseWebSearchToolResultBlock"
          },
          {
            "$ref": "#/components/schemas/BetaResponseWebFetchToolResultBlock"
          },
          {
            "$ref": "#/components/schemas/BetaResponseCodeExecutionToolResultBlock"
          },
          {
            "$ref": "#/components/schemas/BetaResponseBashCodeExecutionToolResultBlock"
          },
          {
            "$ref": "#/components/schemas/BetaResponseTextEditorCodeExecutionToolResultBlock"
          },
          {
            "$ref": "#/components/schemas/BetaResponseMCPToolUseBlock"
          },
          {
            "$ref": "#/components/schemas/BetaResponseMCPToolResultBlock"
          },
          {
            "$ref": "#/components/schemas/BetaResponseContainerUploadBlock"
          }
        ]
      },
      "BetaContentBlockDeltaEvent": {
        "properties": {
          "delta": {
            "discriminator": {
              "mapping": {
                "citations_delta": "#/components/schemas/BetaCitationsDelta",
                "input_json_delta": "#/components/schemas/BetaInputJsonContentBlockDelta",
                "signature_delta": "#/components/schemas/BetaSignatureContentBlockDelta",
                "text_delta": "#/components/schemas/BetaTextContentBlockDelta",
                "thinking_delta": "#/components/schemas/BetaThinkingContentBlockDelta"
              },
              "propertyName": "type"
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/BetaTextContentBlockDelta"
              },
              {
                "$ref": "#/components/schemas/BetaInputJsonContentBlockDelta"
              },
              {
                "$ref": "#/components/schemas/BetaCitationsDelta"
              },
              {
                "$ref": "#/components/schemas/BetaThinkingContentBlockDelta"
              },
              {
                "$ref": "#/components/schemas/BetaSignatureContentBlockDelta"
              }
            ],
            "title": "Delta"
          },
          "index": {
            "title": "Index",
            "type": "integer"
          },
          "type": {
            "const": "content_block_delta",
            "default": "content_block_delta",
            "enum": ["content_block_delta"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["delta", "index", "type"],
        "title": "ContentBlockDeltaEvent",
        "type": "object"
      },
      "BetaContentBlockSource": {
        "additionalProperties": false,
        "properties": {
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "discriminator": {
                    "mapping": {
                      "image": "#/components/schemas/BetaRequestImageBlock",
                      "text": "#/components/schemas/BetaRequestTextBlock"
                    },
                    "propertyName": "type"
                  },
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BetaRequestTextBlock"
                    },
                    {
                      "$ref": "#/components/schemas/BetaRequestImageBlock"
                    }
                  ],
                  "title": "beta_content_block_source_content_item"
                },
                "title": "beta_content_block_source_content",
                "type": "array"
              }
            ],
            "title": "Content"
          },
          "type": {
            "const": "content",
            "enum": ["content"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["content", "type"],
        "title": "ContentBlockSource",
        "type": "object"
      },
      "BetaContentBlockStartEvent": {
        "properties": {
          "content_block": {
            "discriminator": {
              "mapping": {
                "bash_code_execution_tool_result": "#/components/schemas/BetaResponseBashCodeExecutionToolResultBlock",
                "code_execution_tool_result": "#/components/schemas/BetaResponseCodeExecutionToolResultBlock",
                "container_upload": "#/components/schemas/BetaResponseContainerUploadBlock",
                "mcp_tool_result": "#/components/schemas/BetaResponseMCPToolResultBlock",
                "mcp_tool_use": "#/components/schemas/BetaResponseMCPToolUseBlock",
                "redacted_thinking": "#/components/schemas/BetaResponseRedactedThinkingBlock",
                "server_tool_use": "#/components/schemas/BetaResponseServerToolUseBlock",
                "text": "#/components/schemas/BetaResponseTextBlock",
                "text_editor_code_execution_tool_result": "#/components/schemas/BetaResponseTextEditorCodeExecutionToolResultBlock",
                "thinking": "#/components/schemas/BetaResponseThinkingBlock",
                "tool_use": "#/components/schemas/BetaResponseToolUseBlock",
                "web_fetch_tool_result": "#/components/schemas/BetaResponseWebFetchToolResultBlock",
                "web_search_tool_result": "#/components/schemas/BetaResponseWebSearchToolResultBlock"
              },
              "propertyName": "type"
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/BetaResponseTextBlock"
              },
              {
                "$ref": "#/components/schemas/BetaResponseThinkingBlock"
              },
              {
                "$ref": "#/components/schemas/BetaResponseRedactedThinkingBlock"
              },
              {
                "$ref": "#/components/schemas/BetaResponseToolUseBlock"
              },
              {
                "$ref": "#/components/schemas/BetaResponseServerToolUseBlock"
              },
              {
                "$ref": "#/components/schemas/BetaResponseWebSearchToolResultBlock"
              },
              {
                "$ref": "#/components/schemas/BetaResponseWebFetchToolResultBlock"
              },
              {
                "$ref": "#/components/schemas/BetaResponseCodeExecutionToolResultBlock"
              },
              {
                "$ref": "#/components/schemas/BetaResponseBashCodeExecutionToolResultBlock"
              },
              {
                "$ref": "#/components/schemas/BetaResponseTextEditorCodeExecutionToolResultBlock"
              },
              {
                "$ref": "#/components/schemas/BetaResponseMCPToolUseBlock"
              },
              {
                "$ref": "#/components/schemas/BetaResponseMCPToolResultBlock"
              },
              {
                "$ref": "#/components/schemas/BetaResponseContainerUploadBlock"
              }
            ],
            "title": "Content Block"
          },
          "index": {
            "title": "Index",
            "type": "integer"
          },
          "type": {
            "const": "content_block_start",
            "default": "content_block_start",
            "enum": ["content_block_start"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["content_block", "index", "type"],
        "title": "ContentBlockStartEvent",
        "type": "object"
      },
      "BetaContentBlockStopEvent": {
        "properties": {
          "index": {
            "title": "Index",
            "type": "integer"
          },
          "type": {
            "const": "content_block_stop",
            "default": "content_block_stop",
            "enum": ["content_block_stop"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["index", "type"],
        "title": "ContentBlockStopEvent",
        "type": "object"
      },
      "BetaContextManagementConfig": {
        "additionalProperties": false,
        "description": "Configuration for context management operations.",
        "properties": {
          "edits": {
            "description": "List of context management edits to apply",
            "items": {
              "discriminator": {
                "mapping": {
                  "clear_tool_uses_20250919": "#/components/schemas/BetaClearToolUses20250919"
                },
                "propertyName": "type"
              },
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BetaClearToolUses20250919"
                }
              ]
            },
            "minItems": 0,
            "title": "Edits",
            "type": "array"
          }
        },
        "title": "ContextManagementConfig",
        "type": "object"
      },
      "BetaContextManagementResponse": {
        "properties": {
          "original_input_tokens": {
            "description": "The original token count before context management was applied",
            "title": "Original Input Tokens",
            "type": "integer"
          }
        },
        "required": ["original_input_tokens"],
        "title": "ContextManagementResponse",
        "type": "object"
      },
      "BetaCountMessageTokensParams": {
        "additionalProperties": false,
        "examples": [
          {
            "messages": [
              {
                "content": "Hello, world",
                "role": "user"
              }
            ],
            "model": "claude-sonnet-4-20250514"
          }
        ],
        "properties": {
          "context_management": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BetaContextManagementConfig"
              },
              {
                "type": "null"
              }
            ],
            "description": "Context management configuration.\n\nThis allows you to control how Claude manages context across multiple requests, such as whether to clear function results or not."
          },
          "mcp_servers": {
            "description": "MCP servers to be utilized in this request",
            "items": {
              "$ref": "#/components/schemas/BetaRequestMCPServerURLDefinition"
            },
            "maxItems": 20,
            "title": "Mcp Servers",
            "type": "array"
          },
          "messages": {
            "description": "Input messages.\n\nOur models are trained to operate on alternating `user` and `assistant` conversational turns. When creating a new `Message`, you specify the prior conversational turns with the `messages` parameter, and the model then generates the next `Message` in the conversation. Consecutive `user` or `assistant` turns in your request will be combined into a single turn.\n\nEach input message must be an object with a `role` and `content`. You can specify a single `user`-role message, or you can include multiple `user` and `assistant` messages.\n\nIf the final message uses the `assistant` role, the response content will continue immediately from the content in that message. This can be used to constrain part of the model's response.\n\nExample with a single `user` message:\n\n```json\n[{\"role\": \"user\", \"content\": \"Hello, Claude\"}]\n```\n\nExample with multiple conversational turns:\n\n```json\n[\n  {\"role\": \"user\", \"content\": \"Hello there.\"},\n  {\"role\": \"assistant\", \"content\": \"Hi, I'm Claude. How can I help you?\"},\n  {\"role\": \"user\", \"content\": \"Can you explain LLMs in plain English?\"},\n]\n```\n\nExample with a partially-filled response from Claude:\n\n```json\n[\n  {\"role\": \"user\", \"content\": \"What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun\"},\n  {\"role\": \"assistant\", \"content\": \"The best answer is (\"},\n]\n```\n\nEach input message `content` may be either a single `string` or an array of content blocks, where each block has a specific `type`. Using a `string` for `content` is shorthand for an array of one content block of type `\"text\"`. The following input messages are equivalent:\n\n```json\n{\"role\": \"user\", \"content\": \"Hello, Claude\"}\n```\n\n```json\n{\"role\": \"user\", \"content\": [{\"type\": \"text\", \"text\": \"Hello, Claude\"}]}\n```\n\nSee [input examples](https://docs.anthropic.com/en/api/messages-examples).\n\nNote that if you want to include a [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use the top-level `system` parameter — there is no `\"system\"` role for input messages in the Messages API.\n\nThere is a limit of 100,000 messages in a single request.",
            "items": {
              "$ref": "#/components/schemas/BetaInputMessage"
            },
            "title": "Messages",
            "type": "array"
          },
          "model": {
            "$ref": "#/components/schemas/Model"
          },
          "system": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "$ref": "#/components/schemas/BetaRequestTextBlock"
                },
                "type": "array"
              }
            ],
            "description": "System prompt.\n\nA system prompt is a way of providing context and instructions to Claude, such as specifying a particular goal or role. See our [guide to system prompts](https://docs.anthropic.com/en/docs/system-prompts).",
            "examples": [
              [
                {
                  "text": "Today's date is 2024-06-01.",
                  "type": "text"
                }
              ],
              "Today's date is 2023-01-01."
            ],
            "title": "System"
          },
          "thinking": {
            "$ref": "#/components/schemas/BetaThinkingConfigParam"
          },
          "tool_choice": {
            "$ref": "#/components/schemas/BetaToolChoice"
          },
          "tools": {
            "description": "Definitions of tools that the model may use.\n\nIf you include `tools` in your API request, the model may return `tool_use` content blocks that represent the model's use of those tools. You can then run those tools using the tool input generated by the model and then optionally return results back to the model using `tool_result` content blocks.\n\nThere are two types of tools: **client tools** and **server tools**. The behavior described below applies to client tools. For [server tools](https://docs.anthropic.com/en/docs/agents-and-tools/tool-use/overview\\#server-tools), see their individual documentation as each has its own behavior (e.g., the [web search tool](https://docs.anthropic.com/en/docs/agents-and-tools/tool-use/web-search-tool)).\n\nEach tool definition includes:\n\n* `name`: Name of the tool.\n* `description`: Optional, but strongly-recommended description of the tool.\n* `input_schema`: [JSON schema](https://json-schema.org/draft/2020-12) for the tool `input` shape that the model will produce in `tool_use` output content blocks.\n\nFor example, if you defined `tools` as:\n\n```json\n[\n  {\n    \"name\": \"get_stock_price\",\n    \"description\": \"Get the current stock price for a given ticker symbol.\",\n    \"input_schema\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"ticker\": {\n          \"type\": \"string\",\n          \"description\": \"The stock ticker symbol, e.g. AAPL for Apple Inc.\"\n        }\n      },\n      \"required\": [\"ticker\"]\n    }\n  }\n]\n```\n\nAnd then asked the model \"What's the S&P 500 at today?\", the model might produce `tool_use` content blocks in the response like this:\n\n```json\n[\n  {\n    \"type\": \"tool_use\",\n    \"id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"name\": \"get_stock_price\",\n    \"input\": { \"ticker\": \"^GSPC\" }\n  }\n]\n```\n\nYou might then run your `get_stock_price` tool with `{\"ticker\": \"^GSPC\"}` as an input, and return the following back to the model in a subsequent `user` message:\n\n```json\n[\n  {\n    \"type\": \"tool_result\",\n    \"tool_use_id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"content\": \"259.75 USD\"\n  }\n]\n```\n\nTools can be used for workflows that include running client-side tools and functions, or more generally whenever you want the model to produce a particular JSON structure of output.\n\nSee our [guide](https://docs.anthropic.com/en/docs/tool-use) for more details.",
            "examples": [
              {
                "description": "Get the current weather in a given location",
                "input_schema": {
                  "properties": {
                    "location": {
                      "description": "The city and state, e.g. San Francisco, CA",
                      "type": "string"
                    },
                    "unit": {
                      "description": "Unit for the output - one of (celsius, fahrenheit)",
                      "type": "string"
                    }
                  },
                  "required": ["location"],
                  "type": "object"
                },
                "name": "get_weather"
              }
            ],
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BetaTool"
                },
                {
                  "$ref": "#/components/schemas/BetaBashTool_20241022"
                },
                {
                  "$ref": "#/components/schemas/BetaBashTool_20250124"
                },
                {
                  "$ref": "#/components/schemas/BetaCodeExecutionTool_20250522"
                },
                {
                  "$ref": "#/components/schemas/BetaCodeExecutionTool_20250825"
                },
                {
                  "$ref": "#/components/schemas/BetaComputerUseTool_20241022"
                },
                {
                  "$ref": "#/components/schemas/BetaMemoryTool_20250818"
                },
                {
                  "$ref": "#/components/schemas/BetaComputerUseTool_20250124"
                },
                {
                  "$ref": "#/components/schemas/BetaTextEditor_20241022"
                },
                {
                  "$ref": "#/components/schemas/BetaTextEditor_20250124"
                },
                {
                  "$ref": "#/components/schemas/BetaTextEditor_20250429"
                },
                {
                  "$ref": "#/components/schemas/BetaTextEditor_20250728"
                },
                {
                  "$ref": "#/components/schemas/BetaWebSearchTool_20250305"
                },
                {
                  "$ref": "#/components/schemas/BetaWebFetchTool_20250910"
                }
              ]
            },
            "title": "Tools",
            "type": "array"
          }
        },
        "required": ["messages", "model"],
        "title": "CountMessageTokensParams",
        "type": "object"
      },
      "BetaCountMessageTokensResponse": {
        "examples": [
          {
            "input_tokens": 2095
          }
        ],
        "properties": {
          "context_management": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BetaContextManagementResponse"
              },
              {
                "type": "null"
              }
            ],
            "description": "Information about context management applied to the message."
          },
          "input_tokens": {
            "description": "The total number of tokens across the provided list of messages, system prompt, and tools.",
            "examples": [2095],
            "title": "Input Tokens",
            "type": "integer"
          }
        },
        "required": ["context_management", "input_tokens"],
        "title": "CountMessageTokensResponse",
        "type": "object"
      },
      "BetaCreateMessageBatchParams": {
        "additionalProperties": false,
        "properties": {
          "requests": {
            "description": "List of requests for prompt completion. Each is an individual request to create a Message.",
            "items": {
              "$ref": "#/components/schemas/BetaMessageBatchIndividualRequestParams"
            },
            "maxItems": 10000,
            "minItems": 1,
            "title": "Requests",
            "type": "array"
          }
        },
        "required": ["requests"],
        "title": "CreateMessageBatchParams",
        "type": "object"
      },
      "BetaCreateMessageParams": {
        "additionalProperties": false,
        "example": {
          "max_tokens": 1024,
          "messages": [
            {
              "content": "Hello, world",
              "role": "user"
            }
          ],
          "model": "claude-sonnet-4-20250514"
        },
        "properties": {
          "container": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Container identifier for reuse across requests.",
            "title": "Container"
          },
          "context_management": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BetaContextManagementConfig"
              },
              {
                "type": "null"
              }
            ],
            "description": "Context management configuration.\n\nThis allows you to control how Claude manages context across multiple requests, such as whether to clear function results or not."
          },
          "max_tokens": {
            "description": "The maximum number of tokens to generate before stopping.\n\nNote that our models may stop _before_ reaching this maximum. This parameter only specifies the absolute maximum number of tokens to generate.\n\nDifferent models have different maximum values for this parameter.  See [models](https://docs.anthropic.com/en/docs/models-overview) for details.",
            "examples": [1024],
            "minimum": 1,
            "title": "Max Tokens",
            "type": "integer"
          },
          "mcp_servers": {
            "description": "MCP servers to be utilized in this request",
            "items": {
              "$ref": "#/components/schemas/BetaRequestMCPServerURLDefinition"
            },
            "maxItems": 20,
            "title": "Mcp Servers",
            "type": "array"
          },
          "messages": {
            "description": "Input messages.\n\nOur models are trained to operate on alternating `user` and `assistant` conversational turns. When creating a new `Message`, you specify the prior conversational turns with the `messages` parameter, and the model then generates the next `Message` in the conversation. Consecutive `user` or `assistant` turns in your request will be combined into a single turn.\n\nEach input message must be an object with a `role` and `content`. You can specify a single `user`-role message, or you can include multiple `user` and `assistant` messages.\n\nIf the final message uses the `assistant` role, the response content will continue immediately from the content in that message. This can be used to constrain part of the model's response.\n\nExample with a single `user` message:\n\n```json\n[{\"role\": \"user\", \"content\": \"Hello, Claude\"}]\n```\n\nExample with multiple conversational turns:\n\n```json\n[\n  {\"role\": \"user\", \"content\": \"Hello there.\"},\n  {\"role\": \"assistant\", \"content\": \"Hi, I'm Claude. How can I help you?\"},\n  {\"role\": \"user\", \"content\": \"Can you explain LLMs in plain English?\"},\n]\n```\n\nExample with a partially-filled response from Claude:\n\n```json\n[\n  {\"role\": \"user\", \"content\": \"What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun\"},\n  {\"role\": \"assistant\", \"content\": \"The best answer is (\"},\n]\n```\n\nEach input message `content` may be either a single `string` or an array of content blocks, where each block has a specific `type`. Using a `string` for `content` is shorthand for an array of one content block of type `\"text\"`. The following input messages are equivalent:\n\n```json\n{\"role\": \"user\", \"content\": \"Hello, Claude\"}\n```\n\n```json\n{\"role\": \"user\", \"content\": [{\"type\": \"text\", \"text\": \"Hello, Claude\"}]}\n```\n\nSee [input examples](https://docs.anthropic.com/en/api/messages-examples).\n\nNote that if you want to include a [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use the top-level `system` parameter — there is no `\"system\"` role for input messages in the Messages API.\n\nThere is a limit of 100,000 messages in a single request.",
            "items": {
              "$ref": "#/components/schemas/BetaInputMessage"
            },
            "title": "Messages",
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/BetaMetadata",
            "description": "An object describing metadata about the request."
          },
          "model": {
            "$ref": "#/components/schemas/Model"
          },
          "service_tier": {
            "description": "Determines whether to use priority capacity (if available) or standard capacity for this request.\n\nAnthropic offers different levels of service for your API requests. See [service-tiers](https://docs.anthropic.com/en/api/service-tiers) for details.",
            "enum": ["auto", "standard_only"],
            "title": "Service Tier",
            "type": "string"
          },
          "stop_sequences": {
            "description": "Custom text sequences that will cause the model to stop generating.\n\nOur models will normally stop when they have naturally completed their turn, which will result in a response `stop_reason` of `\"end_turn\"`.\n\nIf you want the model to stop generating when it encounters custom strings of text, you can use the `stop_sequences` parameter. If the model encounters one of the custom sequences, the response `stop_reason` value will be `\"stop_sequence\"` and the response `stop_sequence` value will contain the matched stop sequence.",
            "items": {
              "type": "string"
            },
            "title": "Stop Sequences",
            "type": "array"
          },
          "stream": {
            "description": "Whether to incrementally stream the response using server-sent events.\n\nSee [streaming](https://docs.anthropic.com/en/api/messages-streaming) for details.",
            "title": "Stream",
            "type": "boolean"
          },
          "system": {
            "anyOf": [
              {
                "type": "string",
                "x-stainless-skip": ["go", "cli"]
              },
              {
                "items": {
                  "$ref": "#/components/schemas/BetaRequestTextBlock"
                },
                "type": "array"
              }
            ],
            "description": "System prompt.\n\nA system prompt is a way of providing context and instructions to Claude, such as specifying a particular goal or role. See our [guide to system prompts](https://docs.anthropic.com/en/docs/system-prompts).",
            "examples": [
              [
                {
                  "text": "Today's date is 2024-06-01.",
                  "type": "text"
                }
              ],
              "Today's date is 2023-01-01."
            ],
            "title": "System"
          },
          "temperature": {
            "description": "Amount of randomness injected into the response.\n\nDefaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0` for analytical / multiple choice, and closer to `1.0` for creative and generative tasks.\n\nNote that even with `temperature` of `0.0`, the results will not be fully deterministic.",
            "examples": [1],
            "maximum": 1,
            "minimum": 0,
            "title": "Temperature",
            "type": "number"
          },
          "thinking": {
            "$ref": "#/components/schemas/BetaThinkingConfigParam"
          },
          "tool_choice": {
            "$ref": "#/components/schemas/BetaToolChoice"
          },
          "tools": {
            "description": "Definitions of tools that the model may use.\n\nIf you include `tools` in your API request, the model may return `tool_use` content blocks that represent the model's use of those tools. You can then run those tools using the tool input generated by the model and then optionally return results back to the model using `tool_result` content blocks.\n\nThere are two types of tools: **client tools** and **server tools**. The behavior described below applies to client tools. For [server tools](https://docs.anthropic.com/en/docs/agents-and-tools/tool-use/overview\\#server-tools), see their individual documentation as each has its own behavior (e.g., the [web search tool](https://docs.anthropic.com/en/docs/agents-and-tools/tool-use/web-search-tool)).\n\nEach tool definition includes:\n\n* `name`: Name of the tool.\n* `description`: Optional, but strongly-recommended description of the tool.\n* `input_schema`: [JSON schema](https://json-schema.org/draft/2020-12) for the tool `input` shape that the model will produce in `tool_use` output content blocks.\n\nFor example, if you defined `tools` as:\n\n```json\n[\n  {\n    \"name\": \"get_stock_price\",\n    \"description\": \"Get the current stock price for a given ticker symbol.\",\n    \"input_schema\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"ticker\": {\n          \"type\": \"string\",\n          \"description\": \"The stock ticker symbol, e.g. AAPL for Apple Inc.\"\n        }\n      },\n      \"required\": [\"ticker\"]\n    }\n  }\n]\n```\n\nAnd then asked the model \"What's the S&P 500 at today?\", the model might produce `tool_use` content blocks in the response like this:\n\n```json\n[\n  {\n    \"type\": \"tool_use\",\n    \"id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"name\": \"get_stock_price\",\n    \"input\": { \"ticker\": \"^GSPC\" }\n  }\n]\n```\n\nYou might then run your `get_stock_price` tool with `{\"ticker\": \"^GSPC\"}` as an input, and return the following back to the model in a subsequent `user` message:\n\n```json\n[\n  {\n    \"type\": \"tool_result\",\n    \"tool_use_id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"content\": \"259.75 USD\"\n  }\n]\n```\n\nTools can be used for workflows that include running client-side tools and functions, or more generally whenever you want the model to produce a particular JSON structure of output.\n\nSee our [guide](https://docs.anthropic.com/en/docs/tool-use) for more details.",
            "examples": [
              {
                "description": "Get the current weather in a given location",
                "input_schema": {
                  "properties": {
                    "location": {
                      "description": "The city and state, e.g. San Francisco, CA",
                      "type": "string"
                    },
                    "unit": {
                      "description": "Unit for the output - one of (celsius, fahrenheit)",
                      "type": "string"
                    }
                  },
                  "required": ["location"],
                  "type": "object"
                },
                "name": "get_weather"
              }
            ],
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BetaTool"
                },
                {
                  "$ref": "#/components/schemas/BetaBashTool_20241022"
                },
                {
                  "$ref": "#/components/schemas/BetaBashTool_20250124"
                },
                {
                  "$ref": "#/components/schemas/BetaCodeExecutionTool_20250522"
                },
                {
                  "$ref": "#/components/schemas/BetaCodeExecutionTool_20250825"
                },
                {
                  "$ref": "#/components/schemas/BetaComputerUseTool_20241022"
                },
                {
                  "$ref": "#/components/schemas/BetaMemoryTool_20250818"
                },
                {
                  "$ref": "#/components/schemas/BetaComputerUseTool_20250124"
                },
                {
                  "$ref": "#/components/schemas/BetaTextEditor_20241022"
                },
                {
                  "$ref": "#/components/schemas/BetaTextEditor_20250124"
                },
                {
                  "$ref": "#/components/schemas/BetaTextEditor_20250429"
                },
                {
                  "$ref": "#/components/schemas/BetaTextEditor_20250728"
                },
                {
                  "$ref": "#/components/schemas/BetaWebSearchTool_20250305"
                },
                {
                  "$ref": "#/components/schemas/BetaWebFetchTool_20250910"
                }
              ]
            },
            "title": "Tools",
            "type": "array"
          },
          "top_k": {
            "description": "Only sample from the top K options for each subsequent token.\n\nUsed to remove \"long tail\" low probability responses. [Learn more technical details here](https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\nRecommended for advanced use cases only. You usually only need to use `temperature`.",
            "examples": [5],
            "minimum": 0,
            "title": "Top K",
            "type": "integer"
          },
          "top_p": {
            "description": "Use nucleus sampling.\n\nIn nucleus sampling, we compute the cumulative distribution over all the options for each subsequent token in decreasing probability order and cut it off once it reaches a particular probability specified by `top_p`. You should either alter `temperature` or `top_p`, but not both.\n\nRecommended for advanced use cases only. You usually only need to use `temperature`.",
            "examples": [0.7],
            "maximum": 1,
            "minimum": 0,
            "title": "Top P",
            "type": "number"
          }
        },
        "required": ["model", "messages", "max_tokens"],
        "title": "CreateMessageParams",
        "type": "object"
      },
      "BetaDeleteMessageBatchResponse": {
        "properties": {
          "id": {
            "description": "ID of the Message Batch.",
            "examples": ["msgbatch_013Zva2CMHLNnXjNJJKqJ2EF"],
            "title": "Id",
            "type": "string"
          },
          "type": {
            "const": "message_batch_deleted",
            "default": "message_batch_deleted",
            "description": "Deleted object type.\n\nFor Message Batches, this is always `\"message_batch_deleted\"`.",
            "enum": ["message_batch_deleted"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["id", "type"],
        "title": "DeleteMessageBatchResponse",
        "type": "object"
      },
      "BetaErrorResponse": {
        "properties": {
          "error": {
            "discriminator": {
              "mapping": {
                "api_error": "#/components/schemas/BetaAPIError",
                "authentication_error": "#/components/schemas/BetaAuthenticationError",
                "billing_error": "#/components/schemas/BetaBillingError",
                "invalid_request_error": "#/components/schemas/BetaInvalidRequestError",
                "not_found_error": "#/components/schemas/BetaNotFoundError",
                "overloaded_error": "#/components/schemas/BetaOverloadedError",
                "permission_error": "#/components/schemas/BetaPermissionError",
                "rate_limit_error": "#/components/schemas/BetaRateLimitError",
                "timeout_error": "#/components/schemas/BetaGatewayTimeoutError"
              },
              "propertyName": "type"
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/BetaInvalidRequestError"
              },
              {
                "$ref": "#/components/schemas/BetaAuthenticationError"
              },
              {
                "$ref": "#/components/schemas/BetaBillingError"
              },
              {
                "$ref": "#/components/schemas/BetaPermissionError"
              },
              {
                "$ref": "#/components/schemas/BetaNotFoundError"
              },
              {
                "$ref": "#/components/schemas/BetaRateLimitError"
              },
              {
                "$ref": "#/components/schemas/BetaGatewayTimeoutError"
              },
              {
                "$ref": "#/components/schemas/BetaAPIError"
              },
              {
                "$ref": "#/components/schemas/BetaOverloadedError"
              }
            ],
            "title": "Error"
          },
          "request_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Request Id"
          },
          "type": {
            "const": "error",
            "default": "error",
            "enum": ["error"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["error", "request_id", "type"],
        "title": "ErrorResponse",
        "type": "object"
      },
      "BetaErroredResult": {
        "properties": {
          "error": {
            "$ref": "#/components/schemas/BetaErrorResponse"
          },
          "type": {
            "const": "errored",
            "default": "errored",
            "enum": ["errored"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["error", "type"],
        "title": "ErroredResult",
        "type": "object"
      },
      "BetaExpiredResult": {
        "properties": {
          "type": {
            "const": "expired",
            "default": "expired",
            "enum": ["expired"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "ExpiredResult",
        "type": "object"
      },
      "BetaFileDeleteResponse": {
        "properties": {
          "id": {
            "description": "ID of the deleted file.",
            "title": "Id",
            "type": "string"
          },
          "type": {
            "const": "file_deleted",
            "default": "file_deleted",
            "description": "Deleted object type.\n\nFor file deletion, this is always `\"file_deleted\"`.",
            "enum": ["file_deleted"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["id"],
        "title": "FileDeleteResponse",
        "type": "object"
      },
      "BetaFileDocumentSource": {
        "additionalProperties": false,
        "properties": {
          "file_id": {
            "title": "File Id",
            "type": "string"
          },
          "type": {
            "const": "file",
            "enum": ["file"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["file_id", "type"],
        "title": "FileDocumentSource",
        "type": "object"
      },
      "BetaFileImageSource": {
        "additionalProperties": false,
        "properties": {
          "file_id": {
            "title": "File Id",
            "type": "string"
          },
          "type": {
            "const": "file",
            "enum": ["file"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["file_id", "type"],
        "title": "FileImageSource",
        "type": "object"
      },
      "BetaFileListResponse": {
        "properties": {
          "data": {
            "description": "List of file metadata objects.",
            "items": {
              "$ref": "#/components/schemas/BetaFileMetadataSchema"
            },
            "title": "Data",
            "type": "array"
          },
          "first_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "ID of the first file in this page of results.",
            "title": "First Id"
          },
          "has_more": {
            "default": false,
            "description": "Whether there are more results available.",
            "title": "Has More",
            "type": "boolean"
          },
          "last_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "ID of the last file in this page of results.",
            "title": "Last Id"
          }
        },
        "required": ["data"],
        "title": "FileListResponse",
        "type": "object"
      },
      "BetaFileMetadataSchema": {
        "properties": {
          "created_at": {
            "description": "RFC 3339 datetime string representing when the file was created.",
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "downloadable": {
            "default": false,
            "description": "Whether the file can be downloaded.",
            "title": "Downloadable",
            "type": "boolean"
          },
          "filename": {
            "description": "Original filename of the uploaded file.",
            "maxLength": 500,
            "minLength": 1,
            "title": "Filename",
            "type": "string"
          },
          "id": {
            "description": "Unique object identifier.\n\nThe format and length of IDs may change over time.",
            "title": "Id",
            "type": "string"
          },
          "mime_type": {
            "description": "MIME type of the file.",
            "maxLength": 255,
            "minLength": 1,
            "title": "Mime Type",
            "type": "string"
          },
          "size_bytes": {
            "description": "Size of the file in bytes.",
            "minimum": 0,
            "title": "Size Bytes",
            "type": "integer"
          },
          "type": {
            "const": "file",
            "description": "Object type.\n\nFor files, this is always `\"file\"`.",
            "enum": ["file"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "created_at",
          "filename",
          "id",
          "mime_type",
          "size_bytes",
          "type"
        ],
        "title": "FileMetadataSchema",
        "type": "object"
      },
      "BetaGatewayTimeoutError": {
        "properties": {
          "message": {
            "default": "Request timeout",
            "title": "Message",
            "type": "string"
          },
          "type": {
            "const": "timeout_error",
            "default": "timeout_error",
            "enum": ["timeout_error"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["message", "type"],
        "title": "GatewayTimeoutError",
        "type": "object"
      },
      "BetaInputContentBlock": {
        "discriminator": {
          "mapping": {
            "bash_code_execution_tool_result": "#/components/schemas/BetaRequestBashCodeExecutionToolResultBlock",
            "code_execution_tool_result": "#/components/schemas/BetaRequestCodeExecutionToolResultBlock",
            "container_upload": "#/components/schemas/BetaRequestContainerUploadBlock",
            "document": "#/components/schemas/BetaRequestDocumentBlock",
            "image": "#/components/schemas/BetaRequestImageBlock",
            "mcp_tool_result": "#/components/schemas/BetaRequestMCPToolResultBlock",
            "mcp_tool_use": "#/components/schemas/BetaRequestMCPToolUseBlock",
            "redacted_thinking": "#/components/schemas/BetaRequestRedactedThinkingBlock",
            "search_result": "#/components/schemas/BetaRequestSearchResultBlock",
            "server_tool_use": "#/components/schemas/BetaRequestServerToolUseBlock",
            "text": "#/components/schemas/BetaRequestTextBlock",
            "text_editor_code_execution_tool_result": "#/components/schemas/BetaRequestTextEditorCodeExecutionToolResultBlock",
            "thinking": "#/components/schemas/BetaRequestThinkingBlock",
            "tool_result": "#/components/schemas/BetaRequestToolResultBlock",
            "tool_use": "#/components/schemas/BetaRequestToolUseBlock",
            "web_fetch_tool_result": "#/components/schemas/BetaRequestWebFetchToolResultBlock",
            "web_search_tool_result": "#/components/schemas/BetaRequestWebSearchToolResultBlock"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/BetaRequestTextBlock",
            "description": "Regular text content."
          },
          {
            "$ref": "#/components/schemas/BetaRequestImageBlock",
            "description": "Image content specified directly as base64 data or as a reference via a URL."
          },
          {
            "$ref": "#/components/schemas/BetaRequestDocumentBlock",
            "description": "Document content, either specified directly as base64 data, as text, or as a reference via a URL."
          },
          {
            "$ref": "#/components/schemas/BetaRequestSearchResultBlock",
            "description": "A search result block containing source, title, and content from search operations."
          },
          {
            "$ref": "#/components/schemas/BetaRequestThinkingBlock",
            "description": "A block specifying internal thinking by the model."
          },
          {
            "$ref": "#/components/schemas/BetaRequestRedactedThinkingBlock",
            "description": "A block specifying internal, redacted thinking by the model."
          },
          {
            "$ref": "#/components/schemas/BetaRequestToolUseBlock",
            "description": "A block indicating a tool use by the model."
          },
          {
            "$ref": "#/components/schemas/BetaRequestToolResultBlock",
            "description": "A block specifying the results of a tool use by the model."
          },
          {
            "$ref": "#/components/schemas/BetaRequestServerToolUseBlock"
          },
          {
            "$ref": "#/components/schemas/BetaRequestWebSearchToolResultBlock"
          },
          {
            "$ref": "#/components/schemas/BetaRequestWebFetchToolResultBlock"
          },
          {
            "$ref": "#/components/schemas/BetaRequestCodeExecutionToolResultBlock"
          },
          {
            "$ref": "#/components/schemas/BetaRequestBashCodeExecutionToolResultBlock"
          },
          {
            "$ref": "#/components/schemas/BetaRequestTextEditorCodeExecutionToolResultBlock"
          },
          {
            "$ref": "#/components/schemas/BetaRequestMCPToolUseBlock"
          },
          {
            "$ref": "#/components/schemas/BetaRequestMCPToolResultBlock"
          },
          {
            "$ref": "#/components/schemas/BetaRequestContainerUploadBlock"
          }
        ],
        "x-stainless-go-variant-constructor": {
          "naming": "new_beta_{variant}_block"
        }
      },
      "BetaInputJsonContentBlockDelta": {
        "properties": {
          "partial_json": {
            "title": "Partial Json",
            "type": "string"
          },
          "type": {
            "const": "input_json_delta",
            "default": "input_json_delta",
            "enum": ["input_json_delta"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["partial_json", "type"],
        "title": "InputJsonContentBlockDelta",
        "type": "object"
      },
      "BetaInputMessage": {
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "role"
        },
        "properties": {
          "content": {
            "anyOf": [
              {
                "type": "string",
                "x-stainless-skip": ["go", "cli"]
              },
              {
                "example": [
                  {
                    "text": "What is a quaternion?",
                    "type": "text"
                  }
                ],
                "items": {
                  "$ref": "#/components/schemas/BetaInputContentBlock"
                },
                "type": "array"
              }
            ],
            "title": "Content"
          },
          "role": {
            "enum": ["user", "assistant"],
            "title": "Role",
            "type": "string"
          }
        },
        "required": ["content", "role"],
        "title": "InputMessage",
        "type": "object"
      },
      "BetaInputSchema": {
        "additionalProperties": true,
        "properties": {
          "properties": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Properties"
          },
          "required": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Required"
          },
          "type": {
            "const": "object",
            "enum": ["object"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "InputSchema",
        "type": "object"
      },
      "BetaInputTokensClearAtLeast": {
        "additionalProperties": false,
        "properties": {
          "type": {
            "const": "input_tokens",
            "enum": ["input_tokens"],
            "title": "Type",
            "type": "string"
          },
          "value": {
            "minimum": 0,
            "title": "Value",
            "type": "integer"
          }
        },
        "required": ["type", "value"],
        "title": "InputTokensClearAtLeast",
        "type": "object"
      },
      "BetaInputTokensTrigger": {
        "additionalProperties": false,
        "properties": {
          "type": {
            "const": "input_tokens",
            "enum": ["input_tokens"],
            "title": "Type",
            "type": "string"
          },
          "value": {
            "minimum": 1,
            "title": "Value",
            "type": "integer"
          }
        },
        "required": ["type", "value"],
        "title": "InputTokensTrigger",
        "type": "object"
      },
      "BetaInvalidRequestError": {
        "properties": {
          "message": {
            "default": "Invalid request",
            "title": "Message",
            "type": "string"
          },
          "type": {
            "const": "invalid_request_error",
            "default": "invalid_request_error",
            "enum": ["invalid_request_error"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["message", "type"],
        "title": "InvalidRequestError",
        "type": "object"
      },
      "BetaListResponse_MessageBatch_": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/BetaMessageBatch"
            },
            "title": "Data",
            "type": "array"
          },
          "first_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "First ID in the `data` list. Can be used as the `before_id` for the previous page.",
            "title": "First Id"
          },
          "has_more": {
            "description": "Indicates if there are more results in the requested page direction.",
            "title": "Has More",
            "type": "boolean"
          },
          "last_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Last ID in the `data` list. Can be used as the `after_id` for the next page.",
            "title": "Last Id"
          }
        },
        "required": ["data", "first_id", "has_more", "last_id"],
        "title": "ListResponse[MessageBatch]",
        "type": "object"
      },
      "BetaListResponse_ModelInfo_": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/BetaModelInfo"
            },
            "title": "Data",
            "type": "array"
          },
          "first_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "First ID in the `data` list. Can be used as the `before_id` for the previous page.",
            "title": "First Id"
          },
          "has_more": {
            "description": "Indicates if there are more results in the requested page direction.",
            "title": "Has More",
            "type": "boolean"
          },
          "last_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Last ID in the `data` list. Can be used as the `after_id` for the next page.",
            "title": "Last Id"
          }
        },
        "required": ["data", "first_id", "has_more", "last_id"],
        "title": "ListResponse[ModelInfo]",
        "type": "object"
      },
      "BetaMemoryTool_20250818": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/BetaCacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BetaCacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "name": {
            "const": "memory",
            "description": "Name of the tool.\n\nThis is how the tool will be called by the model and in `tool_use` blocks.",
            "enum": ["memory"],
            "title": "Name",
            "type": "string"
          },
          "type": {
            "const": "memory_20250818",
            "enum": ["memory_20250818"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["name", "type"],
        "title": "MemoryTool_20250818",
        "type": "object"
      },
      "BetaMemoryTool_20250818_Command": {
        "discriminator": {
          "mapping": {
            "create": "#/components/schemas/BetaMemoryTool_20250818_CreateCommand",
            "delete": "#/components/schemas/BetaMemoryTool_20250818_DeleteCommand",
            "insert": "#/components/schemas/BetaMemoryTool_20250818_InsertCommand",
            "rename": "#/components/schemas/BetaMemoryTool_20250818_RenameCommand",
            "str_replace": "#/components/schemas/BetaMemoryTool_20250818_StrReplaceCommand",
            "view": "#/components/schemas/BetaMemoryTool_20250818_ViewCommand"
          },
          "propertyName": "command"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/BetaMemoryTool_20250818_ViewCommand"
          },
          {
            "$ref": "#/components/schemas/BetaMemoryTool_20250818_CreateCommand"
          },
          {
            "$ref": "#/components/schemas/BetaMemoryTool_20250818_StrReplaceCommand"
          },
          {
            "$ref": "#/components/schemas/BetaMemoryTool_20250818_InsertCommand"
          },
          {
            "$ref": "#/components/schemas/BetaMemoryTool_20250818_DeleteCommand"
          },
          {
            "$ref": "#/components/schemas/BetaMemoryTool_20250818_RenameCommand"
          }
        ]
      },
      "BetaMemoryTool_20250818_CreateCommand": {
        "properties": {
          "command": {
            "const": "create",
            "default": "create",
            "description": "Command type identifier",
            "enum": ["create"],
            "type": "string"
          },
          "file_text": {
            "description": "Content to write to the file",
            "example": "Meeting notes:\n- Discussed project timeline\n- Next steps defined\n",
            "type": "string"
          },
          "path": {
            "description": "Path where the file should be created",
            "example": "/memories/notes.txt",
            "type": "string"
          }
        },
        "required": ["command", "path", "file_text"],
        "type": "object"
      },
      "BetaMemoryTool_20250818_DeleteCommand": {
        "properties": {
          "command": {
            "const": "delete",
            "default": "delete",
            "description": "Command type identifier",
            "enum": ["delete"],
            "type": "string"
          },
          "path": {
            "description": "Path to the file or directory to delete",
            "example": "/memories/old_file.txt",
            "type": "string"
          }
        },
        "required": ["command", "path"],
        "type": "object"
      },
      "BetaMemoryTool_20250818_InsertCommand": {
        "properties": {
          "command": {
            "const": "insert",
            "default": "insert",
            "description": "Command type identifier",
            "enum": ["insert"],
            "type": "string"
          },
          "insert_line": {
            "description": "Line number where text should be inserted",
            "example": 2,
            "minimum": 1,
            "type": "integer"
          },
          "insert_text": {
            "description": "Text to insert at the specified line",
            "example": "- Review memory tool documentation\n",
            "type": "string"
          },
          "path": {
            "description": "Path to the file where text should be inserted",
            "example": "/memories/todo.txt",
            "type": "string"
          }
        },
        "required": ["command", "path", "insert_line", "insert_text"],
        "type": "object"
      },
      "BetaMemoryTool_20250818_RenameCommand": {
        "properties": {
          "command": {
            "const": "rename",
            "default": "rename",
            "description": "Command type identifier",
            "enum": ["rename"],
            "type": "string"
          },
          "new_path": {
            "description": "New path for the file or directory",
            "example": "/memories/final.txt",
            "type": "string"
          },
          "old_path": {
            "description": "Current path of the file or directory",
            "example": "/memories/draft.txt",
            "type": "string"
          }
        },
        "required": ["command", "old_path", "new_path"],
        "type": "object"
      },
      "BetaMemoryTool_20250818_StrReplaceCommand": {
        "properties": {
          "command": {
            "const": "str_replace",
            "default": "str_replace",
            "description": "Command type identifier",
            "enum": ["str_replace"],
            "type": "string"
          },
          "new_str": {
            "description": "Text to replace with",
            "example": "Favorite color: green",
            "type": "string"
          },
          "old_str": {
            "description": "Text to search for and replace",
            "example": "Favorite color: blue",
            "type": "string"
          },
          "path": {
            "description": "Path to the file where text should be replaced",
            "example": "/memories/preferences.txt",
            "type": "string"
          }
        },
        "required": ["command", "path", "old_str", "new_str"],
        "type": "object"
      },
      "BetaMemoryTool_20250818_ViewCommand": {
        "properties": {
          "command": {
            "const": "view",
            "default": "view",
            "description": "Command type identifier",
            "enum": ["view"],
            "type": "string"
          },
          "path": {
            "description": "Path to directory or file to view",
            "example": "/memories",
            "type": "string"
          },
          "view_range": {
            "description": "Optional line range for viewing specific lines",
            "example": [1, 10],
            "items": {
              "type": "integer"
            },
            "maxItems": 2,
            "minItems": 2,
            "type": "array"
          }
        },
        "required": ["command", "path"],
        "type": "object"
      },
      "BetaMessage": {
        "examples": [
          {
            "content": [
              {
                "citations": null,
                "text": "Hi! My name is Claude.",
                "type": "text"
              }
            ],
            "id": "msg_013Zva2CMHLNnXjNJJKqJ2EF",
            "model": "claude-sonnet-4-20250514",
            "role": "assistant",
            "stop_reason": "end_turn",
            "stop_sequence": null,
            "type": "message",
            "usage": {
              "input_tokens": 2095,
              "output_tokens": 503
            }
          }
        ],
        "properties": {
          "container": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BetaContainer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Information about the container used in this request.\n\nThis will be non-null if a container tool (e.g. code execution) was used."
          },
          "content": {
            "description": "Content generated by the model.\n\nThis is an array of content blocks, each of which has a `type` that determines its shape.\n\nExample:\n\n```json\n[{\"type\": \"text\", \"text\": \"Hi, I'm Claude.\"}]\n```\n\nIf the request input `messages` ended with an `assistant` turn, then the response `content` will continue directly from that last turn. You can use this to constrain the model's output.\n\nFor example, if the input `messages` were:\n```json\n[\n  {\"role\": \"user\", \"content\": \"What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun\"},\n  {\"role\": \"assistant\", \"content\": \"The best answer is (\"}\n]\n```\n\nThen the response `content` might be:\n\n```json\n[{\"type\": \"text\", \"text\": \"B)\"}]\n```",
            "examples": [
              [
                {
                  "citations": null,
                  "text": "Hi! My name is Claude.",
                  "type": "text"
                }
              ]
            ],
            "items": {
              "$ref": "#/components/schemas/BetaContentBlock"
            },
            "title": "Content",
            "type": "array"
          },
          "context_management": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BetaResponseContextManagement"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Information about context management strategies applied during the request"
          },
          "id": {
            "description": "Unique object identifier.\n\nThe format and length of IDs may change over time.",
            "examples": ["msg_013Zva2CMHLNnXjNJJKqJ2EF"],
            "title": "Id",
            "type": "string"
          },
          "model": {
            "$ref": "#/components/schemas/Model"
          },
          "role": {
            "const": "assistant",
            "default": "assistant",
            "description": "Conversational role of the generated message.\n\nThis will always be `\"assistant\"`.",
            "enum": ["assistant"],
            "title": "Role",
            "type": "string"
          },
          "stop_reason": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BetaStopReason"
              },
              {
                "type": "null"
              }
            ],
            "description": "The reason that we stopped.\n\nThis may be one the following values:\n* `\"end_turn\"`: the model reached a natural stopping point\n* `\"max_tokens\"`: we exceeded the requested `max_tokens` or the model's maximum\n* `\"stop_sequence\"`: one of your provided custom `stop_sequences` was generated\n* `\"tool_use\"`: the model invoked one or more tools\n* `\"pause_turn\"`: we paused a long-running turn. You may provide the response back as-is in a subsequent request to let the model continue.\n* `\"refusal\"`: when streaming classifiers intervene to handle potential policy violations\n\nIn non-streaming mode this value is always non-null. In streaming mode, it is null in the `message_start` event and non-null otherwise.",
            "title": "Stop Reason"
          },
          "stop_sequence": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Which custom stop sequence was generated, if any.\n\nThis value will be a non-null string if one of your custom stop sequences was generated.",
            "title": "Stop Sequence"
          },
          "type": {
            "const": "message",
            "default": "message",
            "description": "Object type.\n\nFor Messages, this is always `\"message\"`.",
            "enum": ["message"],
            "title": "Type",
            "type": "string"
          },
          "usage": {
            "$ref": "#/components/schemas/BetaUsage",
            "description": "Billing and rate-limit usage.\n\nAnthropic's API bills and rate-limits by token counts, as tokens represent the underlying cost to our systems.\n\nUnder the hood, the API transforms requests into a format suitable for the model. The model's output then goes through a parsing stage before becoming an API response. As a result, the token counts in `usage` will not match one-to-one with the exact visible content of an API request or response.\n\nFor example, `output_tokens` will be non-zero, even for an empty string response from Claude.\n\nTotal input tokens in a request is the summation of `input_tokens`, `cache_creation_input_tokens`, and `cache_read_input_tokens`.",
            "examples": [
              {
                "input_tokens": 2095,
                "output_tokens": 503
              }
            ]
          }
        },
        "required": [
          "id",
          "type",
          "role",
          "content",
          "model",
          "stop_reason",
          "stop_sequence",
          "usage",
          "context_management",
          "container"
        ],
        "title": "Message",
        "type": "object",
        "x-stainless-python-custom-imports": [
          "from .beta_content_block import BetaContentBlock as BetaContentBlock"
        ]
      },
      "BetaMessageBatch": {
        "properties": {
          "archived_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "RFC 3339 datetime string representing the time at which the Message Batch was archived and its results became unavailable.",
            "examples": ["2024-08-20T18:37:24.100435Z"],
            "title": "Archived At"
          },
          "cancel_initiated_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "RFC 3339 datetime string representing the time at which cancellation was initiated for the Message Batch. Specified only if cancellation was initiated.",
            "examples": ["2024-08-20T18:37:24.100435Z"],
            "title": "Cancel Initiated At"
          },
          "created_at": {
            "description": "RFC 3339 datetime string representing the time at which the Message Batch was created.",
            "examples": ["2024-08-20T18:37:24.100435Z"],
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "ended_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "RFC 3339 datetime string representing the time at which processing for the Message Batch ended. Specified only once processing ends.\n\nProcessing ends when every request in a Message Batch has either succeeded, errored, canceled, or expired.",
            "examples": ["2024-08-20T18:37:24.100435Z"],
            "title": "Ended At"
          },
          "expires_at": {
            "description": "RFC 3339 datetime string representing the time at which the Message Batch will expire and end processing, which is 24 hours after creation.",
            "examples": ["2024-08-20T18:37:24.100435Z"],
            "format": "date-time",
            "title": "Expires At",
            "type": "string"
          },
          "id": {
            "description": "Unique object identifier.\n\nThe format and length of IDs may change over time.",
            "examples": ["msgbatch_013Zva2CMHLNnXjNJJKqJ2EF"],
            "title": "Id",
            "type": "string"
          },
          "processing_status": {
            "description": "Processing status of the Message Batch.",
            "enum": ["in_progress", "canceling", "ended"],
            "title": "Processing Status",
            "type": "string"
          },
          "request_counts": {
            "$ref": "#/components/schemas/BetaRequestCounts",
            "description": "Tallies requests within the Message Batch, categorized by their status.\n\nRequests start as `processing` and move to one of the other statuses only once processing of the entire batch ends. The sum of all values always matches the total number of requests in the batch."
          },
          "results_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "URL to a `.jsonl` file containing the results of the Message Batch requests. Specified only once processing ends.\n\nResults in the file are not guaranteed to be in the same order as requests. Use the `custom_id` field to match results to requests.",
            "examples": [
              "https://api.anthropic.com/v1/messages/batches/msgbatch_013Zva2CMHLNnXjNJJKqJ2EF/results"
            ],
            "title": "Results Url"
          },
          "type": {
            "const": "message_batch",
            "default": "message_batch",
            "description": "Object type.\n\nFor Message Batches, this is always `\"message_batch\"`.",
            "enum": ["message_batch"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "archived_at",
          "cancel_initiated_at",
          "created_at",
          "ended_at",
          "expires_at",
          "id",
          "processing_status",
          "request_counts",
          "results_url",
          "type"
        ],
        "title": "MessageBatch",
        "type": "object"
      },
      "BetaMessageBatchIndividualRequestParams": {
        "additionalProperties": false,
        "properties": {
          "custom_id": {
            "description": "Developer-provided ID created for each request in a Message Batch. Useful for matching results to requests, as results may be given out of request order.\n\nMust be unique for each request within the Message Batch.",
            "examples": ["my-custom-id-1"],
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_-]{1,64}$",
            "title": "Custom Id",
            "type": "string"
          },
          "params": {
            "$ref": "#/components/schemas/BetaCreateMessageParams",
            "description": "Messages API creation parameters for the individual request. \n\nSee the [Messages API reference](/en/api/messages) for full documentation on available parameters."
          }
        },
        "required": ["custom_id", "params"],
        "title": "MessageBatchIndividualRequestParams",
        "type": "object"
      },
      "BetaMessageBatchIndividualResponse": {
        "description": "This is a single line in the response `.jsonl` file and does not represent the response as a whole.",
        "properties": {
          "custom_id": {
            "description": "Developer-provided ID created for each request in a Message Batch. Useful for matching results to requests, as results may be given out of request order.\n\nMust be unique for each request within the Message Batch.",
            "examples": ["my-custom-id-1"],
            "title": "Custom Id",
            "type": "string"
          },
          "result": {
            "description": "Processing result for this request.\n\nContains a Message output if processing was successful, an error response if processing failed, or the reason why processing was not attempted, such as cancellation or expiration.",
            "discriminator": {
              "mapping": {
                "canceled": "#/components/schemas/BetaCanceledResult",
                "errored": "#/components/schemas/BetaErroredResult",
                "expired": "#/components/schemas/BetaExpiredResult",
                "succeeded": "#/components/schemas/BetaSucceededResult"
              },
              "propertyName": "type"
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/BetaSucceededResult"
              },
              {
                "$ref": "#/components/schemas/BetaErroredResult"
              },
              {
                "$ref": "#/components/schemas/BetaCanceledResult"
              },
              {
                "$ref": "#/components/schemas/BetaExpiredResult"
              }
            ],
            "title": "Result"
          }
        },
        "required": ["custom_id", "result"],
        "title": "MessageBatchIndividualResponse",
        "type": "object"
      },
      "BetaMessageDelta": {
        "properties": {
          "container": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BetaContainer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Information about the container used in this request.\n\nThis will be non-null if a container tool (e.g. code execution) was used."
          },
          "stop_reason": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BetaStopReason"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Stop Reason"
          },
          "stop_sequence": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Stop Sequence"
          }
        },
        "required": ["container", "stop_reason", "stop_sequence"],
        "title": "MessageDelta",
        "type": "object"
      },
      "BetaMessageDeltaEvent": {
        "properties": {
          "context_management": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BetaResponseContextManagement"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Information about context management strategies applied during the request"
          },
          "delta": {
            "$ref": "#/components/schemas/BetaMessageDelta"
          },
          "type": {
            "const": "message_delta",
            "default": "message_delta",
            "enum": ["message_delta"],
            "title": "Type",
            "type": "string"
          },
          "usage": {
            "$ref": "#/components/schemas/BetaMessageDeltaUsage",
            "description": "Billing and rate-limit usage.\n\nAnthropic's API bills and rate-limits by token counts, as tokens represent the underlying cost to our systems.\n\nUnder the hood, the API transforms requests into a format suitable for the model. The model's output then goes through a parsing stage before becoming an API response. As a result, the token counts in `usage` will not match one-to-one with the exact visible content of an API request or response.\n\nFor example, `output_tokens` will be non-zero, even for an empty string response from Claude.\n\nTotal input tokens in a request is the summation of `input_tokens`, `cache_creation_input_tokens`, and `cache_read_input_tokens`.",
            "examples": [
              {
                "output_tokens": 503
              }
            ]
          }
        },
        "required": ["context_management", "delta", "type", "usage"],
        "title": "MessageDeltaEvent",
        "type": "object"
      },
      "BetaMessageDeltaUsage": {
        "properties": {
          "cache_creation_input_tokens": {
            "anyOf": [
              {
                "minimum": 0,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "The cumulative number of input tokens used to create the cache entry.",
            "examples": [2051],
            "title": "Cache Creation Input Tokens"
          },
          "cache_read_input_tokens": {
            "anyOf": [
              {
                "minimum": 0,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "The cumulative number of input tokens read from the cache.",
            "examples": [2051],
            "title": "Cache Read Input Tokens"
          },
          "input_tokens": {
            "anyOf": [
              {
                "minimum": 0,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "The cumulative number of input tokens which were used.",
            "examples": [2095],
            "title": "Input Tokens"
          },
          "output_tokens": {
            "description": "The cumulative number of output tokens which were used.",
            "examples": [503],
            "title": "Output Tokens",
            "type": "integer"
          },
          "server_tool_use": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BetaServerToolUsage"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "The number of server tool requests."
          }
        },
        "required": [
          "cache_creation_input_tokens",
          "cache_read_input_tokens",
          "input_tokens",
          "output_tokens",
          "server_tool_use"
        ],
        "title": "MessageDeltaUsage",
        "type": "object"
      },
      "BetaMessageStartEvent": {
        "properties": {
          "message": {
            "$ref": "#/components/schemas/BetaMessage"
          },
          "type": {
            "const": "message_start",
            "default": "message_start",
            "enum": ["message_start"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["message", "type"],
        "title": "MessageStartEvent",
        "type": "object"
      },
      "BetaMessageStopEvent": {
        "properties": {
          "type": {
            "const": "message_stop",
            "default": "message_stop",
            "enum": ["message_stop"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "MessageStopEvent",
        "type": "object"
      },
      "BetaMessageStreamEvent": {
        "discriminator": {
          "mapping": {
            "content_block_delta": "#/components/schemas/BetaContentBlockDeltaEvent",
            "content_block_start": "#/components/schemas/BetaContentBlockStartEvent",
            "content_block_stop": "#/components/schemas/BetaContentBlockStopEvent",
            "message_delta": "#/components/schemas/BetaMessageDeltaEvent",
            "message_start": "#/components/schemas/BetaMessageStartEvent",
            "message_stop": "#/components/schemas/BetaMessageStopEvent"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/BetaMessageStartEvent"
          },
          {
            "$ref": "#/components/schemas/BetaMessageDeltaEvent"
          },
          {
            "$ref": "#/components/schemas/BetaMessageStopEvent"
          },
          {
            "$ref": "#/components/schemas/BetaContentBlockStartEvent"
          },
          {
            "$ref": "#/components/schemas/BetaContentBlockDeltaEvent"
          },
          {
            "$ref": "#/components/schemas/BetaContentBlockStopEvent"
          }
        ],
        "title": "MessageStreamEvent"
      },
      "BetaMetadata": {
        "additionalProperties": false,
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "maxLength": 256,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "An external identifier for the user who is associated with the request.\n\nThis should be a uuid, hash value, or other opaque identifier. Anthropic may use this id to help detect abuse. Do not include any identifying information such as name, email address, or phone number.",
            "examples": ["13803d75-b4b5-4c3e-b2a2-6f21399b021b"],
            "title": "User Id"
          }
        },
        "title": "Metadata",
        "type": "object"
      },
      "BetaModelInfo": {
        "properties": {
          "created_at": {
            "description": "RFC 3339 datetime string representing the time at which the model was released. May be set to an epoch value if the release date is unknown.",
            "examples": ["2025-02-19T00:00:00Z"],
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "display_name": {
            "description": "A human-readable name for the model.",
            "examples": ["Claude Sonnet 4"],
            "title": "Display Name",
            "type": "string"
          },
          "id": {
            "description": "Unique model identifier.",
            "examples": ["claude-sonnet-4-20250514"],
            "title": "Id",
            "type": "string"
          },
          "type": {
            "const": "model",
            "default": "model",
            "description": "Object type.\n\nFor Models, this is always `\"model\"`.",
            "enum": ["model"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["created_at", "display_name", "id", "type"],
        "title": "ModelInfo",
        "type": "object"
      },
      "BetaNotFoundError": {
        "properties": {
          "message": {
            "default": "Not found",
            "title": "Message",
            "type": "string"
          },
          "type": {
            "const": "not_found_error",
            "default": "not_found_error",
            "enum": ["not_found_error"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["message", "type"],
        "title": "NotFoundError",
        "type": "object"
      },
      "BetaOverloadedError": {
        "properties": {
          "message": {
            "default": "Overloaded",
            "title": "Message",
            "type": "string"
          },
          "type": {
            "const": "overloaded_error",
            "default": "overloaded_error",
            "enum": ["overloaded_error"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["message", "type"],
        "title": "OverloadedError",
        "type": "object"
      },
      "BetaPermissionError": {
        "properties": {
          "message": {
            "default": "Permission denied",
            "title": "Message",
            "type": "string"
          },
          "type": {
            "const": "permission_error",
            "default": "permission_error",
            "enum": ["permission_error"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["message", "type"],
        "title": "PermissionError",
        "type": "object"
      },
      "BetaPlainTextSource": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "title": "Data",
            "type": "string"
          },
          "media_type": {
            "const": "text/plain",
            "enum": ["text/plain"],
            "title": "Media Type",
            "type": "string"
          },
          "type": {
            "const": "text",
            "enum": ["text"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["data", "media_type", "type"],
        "title": "PlainTextSource",
        "type": "object"
      },
      "BetaRateLimitError": {
        "properties": {
          "message": {
            "default": "Rate limited",
            "title": "Message",
            "type": "string"
          },
          "type": {
            "const": "rate_limit_error",
            "default": "rate_limit_error",
            "enum": ["rate_limit_error"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["message", "type"],
        "title": "RateLimitError",
        "type": "object"
      },
      "BetaRequestBashCodeExecutionOutputBlock": {
        "additionalProperties": false,
        "properties": {
          "file_id": {
            "title": "File Id",
            "type": "string"
          },
          "type": {
            "const": "bash_code_execution_output",
            "enum": ["bash_code_execution_output"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["file_id", "type"],
        "title": "RequestBashCodeExecutionOutputBlock",
        "type": "object"
      },
      "BetaRequestBashCodeExecutionResultBlock": {
        "additionalProperties": false,
        "properties": {
          "content": {
            "items": {
              "$ref": "#/components/schemas/BetaRequestBashCodeExecutionOutputBlock"
            },
            "title": "Content",
            "type": "array"
          },
          "return_code": {
            "title": "Return Code",
            "type": "integer"
          },
          "stderr": {
            "title": "Stderr",
            "type": "string"
          },
          "stdout": {
            "title": "Stdout",
            "type": "string"
          },
          "type": {
            "const": "bash_code_execution_result",
            "enum": ["bash_code_execution_result"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["content", "return_code", "stderr", "stdout", "type"],
        "title": "RequestBashCodeExecutionResultBlock",
        "type": "object"
      },
      "BetaRequestBashCodeExecutionToolResultBlock": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/BetaCacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BetaCacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "content": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BetaRequestBashCodeExecutionToolResultError"
              },
              {
                "$ref": "#/components/schemas/BetaRequestBashCodeExecutionResultBlock"
              }
            ],
            "title": "Content"
          },
          "tool_use_id": {
            "pattern": "^srvtoolu_[a-zA-Z0-9_]+$",
            "title": "Tool Use Id",
            "type": "string"
          },
          "type": {
            "const": "bash_code_execution_tool_result",
            "enum": ["bash_code_execution_tool_result"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["content", "tool_use_id", "type"],
        "title": "RequestBashCodeExecutionToolResultBlock",
        "type": "object"
      },
      "BetaRequestBashCodeExecutionToolResultError": {
        "additionalProperties": false,
        "properties": {
          "error_code": {
            "$ref": "#/components/schemas/BetaBashCodeExecutionToolResultErrorCode"
          },
          "type": {
            "const": "bash_code_execution_tool_result_error",
            "enum": ["bash_code_execution_tool_result_error"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["error_code", "type"],
        "title": "RequestBashCodeExecutionToolResultError",
        "type": "object"
      },
      "BetaRequestCharLocationCitation": {
        "additionalProperties": false,
        "properties": {
          "cited_text": {
            "title": "Cited Text",
            "type": "string"
          },
          "document_index": {
            "minimum": 0,
            "title": "Document Index",
            "type": "integer"
          },
          "document_title": {
            "anyOf": [
              {
                "maxLength": 255,
                "minLength": 1,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Title"
          },
          "end_char_index": {
            "title": "End Char Index",
            "type": "integer"
          },
          "start_char_index": {
            "minimum": 0,
            "title": "Start Char Index",
            "type": "integer"
          },
          "type": {
            "const": "char_location",
            "enum": ["char_location"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "cited_text",
          "document_index",
          "document_title",
          "end_char_index",
          "start_char_index",
          "type"
        ],
        "title": "RequestCharLocationCitation",
        "type": "object"
      },
      "BetaRequestCitationsConfig": {
        "additionalProperties": false,
        "properties": {
          "enabled": {
            "title": "Enabled",
            "type": "boolean"
          }
        },
        "title": "RequestCitationsConfig",
        "type": "object"
      },
      "BetaRequestCodeExecutionOutputBlock": {
        "additionalProperties": false,
        "properties": {
          "file_id": {
            "title": "File Id",
            "type": "string"
          },
          "type": {
            "const": "code_execution_output",
            "enum": ["code_execution_output"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["file_id", "type"],
        "title": "RequestCodeExecutionOutputBlock",
        "type": "object"
      },
      "BetaRequestCodeExecutionResultBlock": {
        "additionalProperties": false,
        "properties": {
          "content": {
            "items": {
              "$ref": "#/components/schemas/BetaRequestCodeExecutionOutputBlock"
            },
            "title": "Content",
            "type": "array"
          },
          "return_code": {
            "title": "Return Code",
            "type": "integer"
          },
          "stderr": {
            "title": "Stderr",
            "type": "string"
          },
          "stdout": {
            "title": "Stdout",
            "type": "string"
          },
          "type": {
            "const": "code_execution_result",
            "enum": ["code_execution_result"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["content", "return_code", "stderr", "stdout", "type"],
        "title": "Result Block",
        "type": "object"
      },
      "BetaRequestCodeExecutionToolResultBlock": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/BetaCacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BetaCacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "content": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BetaRequestCodeExecutionToolResultError",
                "x-stainless-naming": {
                  "go": {
                    "variant_constructor": "BetaNewCodeExecutionToolRequestError"
                  }
                }
              },
              {
                "$ref": "#/components/schemas/BetaRequestCodeExecutionResultBlock"
              }
            ],
            "title": "Content"
          },
          "tool_use_id": {
            "pattern": "^srvtoolu_[a-zA-Z0-9_]+$",
            "title": "Tool Use Id",
            "type": "string"
          },
          "type": {
            "const": "code_execution_tool_result",
            "enum": ["code_execution_tool_result"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["content", "tool_use_id", "type"],
        "title": "RequestCodeExecutionToolResultBlock",
        "type": "object"
      },
      "BetaRequestCodeExecutionToolResultError": {
        "additionalProperties": false,
        "properties": {
          "error_code": {
            "$ref": "#/components/schemas/BetaCodeExecutionToolResultErrorCode"
          },
          "type": {
            "const": "code_execution_tool_result_error",
            "enum": ["code_execution_tool_result_error"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["error_code", "type"],
        "title": "Error",
        "type": "object"
      },
      "BetaRequestContainerUploadBlock": {
        "additionalProperties": false,
        "description": "A content block that represents a file to be uploaded to the container\nFiles uploaded via this block will be available in the container's input directory.",
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/BetaCacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BetaCacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "file_id": {
            "title": "File Id",
            "type": "string"
          },
          "type": {
            "const": "container_upload",
            "enum": ["container_upload"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["file_id", "type"],
        "title": "RequestContainerUploadBlock",
        "type": "object"
      },
      "BetaRequestContentBlockLocationCitation": {
        "additionalProperties": false,
        "properties": {
          "cited_text": {
            "title": "Cited Text",
            "type": "string"
          },
          "document_index": {
            "minimum": 0,
            "title": "Document Index",
            "type": "integer"
          },
          "document_title": {
            "anyOf": [
              {
                "maxLength": 255,
                "minLength": 1,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Title"
          },
          "end_block_index": {
            "title": "End Block Index",
            "type": "integer"
          },
          "start_block_index": {
            "minimum": 0,
            "title": "Start Block Index",
            "type": "integer"
          },
          "type": {
            "const": "content_block_location",
            "enum": ["content_block_location"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "cited_text",
          "document_index",
          "document_title",
          "end_block_index",
          "start_block_index",
          "type"
        ],
        "title": "RequestContentBlockLocationCitation",
        "type": "object"
      },
      "BetaRequestCounts": {
        "properties": {
          "canceled": {
            "default": 0,
            "description": "Number of requests in the Message Batch that have been canceled.\n\nThis is zero until processing of the entire Message Batch has ended.",
            "examples": [10],
            "title": "Canceled",
            "type": "integer"
          },
          "errored": {
            "default": 0,
            "description": "Number of requests in the Message Batch that encountered an error.\n\nThis is zero until processing of the entire Message Batch has ended.",
            "examples": [30],
            "title": "Errored",
            "type": "integer"
          },
          "expired": {
            "default": 0,
            "description": "Number of requests in the Message Batch that have expired.\n\nThis is zero until processing of the entire Message Batch has ended.",
            "examples": [10],
            "title": "Expired",
            "type": "integer"
          },
          "processing": {
            "default": 0,
            "description": "Number of requests in the Message Batch that are processing.",
            "examples": [100],
            "title": "Processing",
            "type": "integer"
          },
          "succeeded": {
            "default": 0,
            "description": "Number of requests in the Message Batch that have completed successfully.\n\nThis is zero until processing of the entire Message Batch has ended.",
            "examples": [50],
            "title": "Succeeded",
            "type": "integer"
          }
        },
        "required": [
          "canceled",
          "errored",
          "expired",
          "processing",
          "succeeded"
        ],
        "title": "RequestCounts",
        "type": "object"
      },
      "BetaRequestDocumentBlock": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/BetaCacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BetaCacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "citations": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BetaRequestCitationsConfig"
              },
              {
                "type": "null"
              }
            ]
          },
          "context": {
            "anyOf": [
              {
                "minLength": 1,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Context"
          },
          "source": {
            "discriminator": {
              "mapping": {
                "base64": "#/components/schemas/BetaBase64PDFSource",
                "content": "#/components/schemas/BetaContentBlockSource",
                "file": "#/components/schemas/BetaFileDocumentSource",
                "text": "#/components/schemas/BetaPlainTextSource",
                "url": "#/components/schemas/BetaURLPDFSource"
              },
              "propertyName": "type"
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/BetaBase64PDFSource"
              },
              {
                "$ref": "#/components/schemas/BetaPlainTextSource"
              },
              {
                "$ref": "#/components/schemas/BetaContentBlockSource"
              },
              {
                "$ref": "#/components/schemas/BetaURLPDFSource"
              },
              {
                "$ref": "#/components/schemas/BetaFileDocumentSource"
              }
            ],
            "title": "Source"
          },
          "title": {
            "anyOf": [
              {
                "maxLength": 500,
                "minLength": 1,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "type": {
            "const": "document",
            "enum": ["document"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["source", "type"],
        "title": "RequestDocumentBlock",
        "type": "object"
      },
      "BetaRequestImageBlock": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/BetaCacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BetaCacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "source": {
            "discriminator": {
              "mapping": {
                "base64": "#/components/schemas/BetaBase64ImageSource",
                "file": "#/components/schemas/BetaFileImageSource",
                "url": "#/components/schemas/BetaURLImageSource"
              },
              "propertyName": "type"
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/BetaBase64ImageSource"
              },
              {
                "$ref": "#/components/schemas/BetaURLImageSource"
              },
              {
                "$ref": "#/components/schemas/BetaFileImageSource"
              }
            ],
            "title": "Source"
          },
          "type": {
            "const": "image",
            "enum": ["image"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["source", "type"],
        "title": "RequestImageBlock",
        "type": "object"
      },
      "BetaRequestMCPServerToolConfiguration": {
        "additionalProperties": false,
        "properties": {
          "allowed_tools": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Allowed Tools"
          },
          "enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Enabled"
          }
        },
        "title": "RequestMCPServerToolConfiguration",
        "type": "object"
      },
      "BetaRequestMCPServerURLDefinition": {
        "additionalProperties": false,
        "properties": {
          "authorization_token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Authorization Token"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "tool_configuration": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BetaRequestMCPServerToolConfiguration"
              },
              {
                "type": "null"
              }
            ]
          },
          "type": {
            "const": "url",
            "enum": ["url"],
            "title": "Type",
            "type": "string"
          },
          "url": {
            "title": "Url",
            "type": "string"
          }
        },
        "required": ["name", "type", "url"],
        "title": "RequestMCPServerURLDefinition",
        "type": "object"
      },
      "BetaRequestMCPToolResultBlock": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/BetaCacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BetaCacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "$ref": "#/components/schemas/BetaRequestTextBlock",
                  "title": "beta_mcp_tool_result_block_param_content_item"
                },
                "title": "beta_mcp_tool_result_block_param_content",
                "type": "array"
              }
            ],
            "title": "Content"
          },
          "is_error": {
            "title": "Is Error",
            "type": "boolean"
          },
          "tool_use_id": {
            "pattern": "^[a-zA-Z0-9_-]+$",
            "title": "Tool Use Id",
            "type": "string"
          },
          "type": {
            "const": "mcp_tool_result",
            "enum": ["mcp_tool_result"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["tool_use_id", "type"],
        "title": "RequestMCPToolResultBlock",
        "type": "object"
      },
      "BetaRequestMCPToolUseBlock": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/BetaCacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BetaCacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "id": {
            "pattern": "^[a-zA-Z0-9_-]+$",
            "title": "Id",
            "type": "string"
          },
          "input": {
            "title": "Input",
            "type": "object"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "server_name": {
            "description": "The name of the MCP server",
            "title": "Server Name",
            "type": "string"
          },
          "type": {
            "const": "mcp_tool_use",
            "enum": ["mcp_tool_use"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["id", "input", "name", "server_name", "type"],
        "title": "RequestMCPToolUseBlock",
        "type": "object"
      },
      "BetaRequestPageLocationCitation": {
        "additionalProperties": false,
        "properties": {
          "cited_text": {
            "title": "Cited Text",
            "type": "string"
          },
          "document_index": {
            "minimum": 0,
            "title": "Document Index",
            "type": "integer"
          },
          "document_title": {
            "anyOf": [
              {
                "maxLength": 255,
                "minLength": 1,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Title"
          },
          "end_page_number": {
            "title": "End Page Number",
            "type": "integer"
          },
          "start_page_number": {
            "minimum": 1,
            "title": "Start Page Number",
            "type": "integer"
          },
          "type": {
            "const": "page_location",
            "enum": ["page_location"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "cited_text",
          "document_index",
          "document_title",
          "end_page_number",
          "start_page_number",
          "type"
        ],
        "title": "RequestPageLocationCitation",
        "type": "object"
      },
      "BetaRequestRedactedThinkingBlock": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "title": "Data",
            "type": "string"
          },
          "type": {
            "const": "redacted_thinking",
            "enum": ["redacted_thinking"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["data", "type"],
        "title": "RequestRedactedThinkingBlock",
        "type": "object"
      },
      "BetaRequestSearchResultBlock": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/BetaCacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BetaCacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "citations": {
            "$ref": "#/components/schemas/BetaRequestCitationsConfig"
          },
          "content": {
            "items": {
              "$ref": "#/components/schemas/BetaRequestTextBlock"
            },
            "title": "Content",
            "type": "array"
          },
          "source": {
            "title": "Source",
            "type": "string"
          },
          "title": {
            "title": "Title",
            "type": "string"
          },
          "type": {
            "const": "search_result",
            "enum": ["search_result"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["content", "source", "title", "type"],
        "title": "RequestSearchResultBlock",
        "type": "object"
      },
      "BetaRequestSearchResultLocationCitation": {
        "additionalProperties": false,
        "properties": {
          "cited_text": {
            "title": "Cited Text",
            "type": "string"
          },
          "end_block_index": {
            "title": "End Block Index",
            "type": "integer"
          },
          "search_result_index": {
            "minimum": 0,
            "title": "Search Result Index",
            "type": "integer"
          },
          "source": {
            "title": "Source",
            "type": "string"
          },
          "start_block_index": {
            "minimum": 0,
            "title": "Start Block Index",
            "type": "integer"
          },
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "type": {
            "const": "search_result_location",
            "enum": ["search_result_location"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "cited_text",
          "end_block_index",
          "search_result_index",
          "source",
          "start_block_index",
          "title",
          "type"
        ],
        "title": "RequestSearchResultLocationCitation",
        "type": "object"
      },
      "BetaRequestServerToolUseBlock": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/BetaCacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BetaCacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "id": {
            "pattern": "^srvtoolu_[a-zA-Z0-9_]+$",
            "title": "Id",
            "type": "string"
          },
          "input": {
            "title": "Input",
            "type": "object"
          },
          "name": {
            "enum": [
              "web_search",
              "web_fetch",
              "code_execution",
              "bash_code_execution",
              "text_editor_code_execution"
            ],
            "title": "Name",
            "type": "string"
          },
          "type": {
            "const": "server_tool_use",
            "enum": ["server_tool_use"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["id", "input", "name", "type"],
        "title": "RequestServerToolUseBlock",
        "type": "object"
      },
      "BetaRequestTextBlock": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/BetaCacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BetaCacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "citations": {
            "anyOf": [
              {
                "items": {
                  "discriminator": {
                    "mapping": {
                      "char_location": "#/components/schemas/BetaRequestCharLocationCitation",
                      "content_block_location": "#/components/schemas/BetaRequestContentBlockLocationCitation",
                      "page_location": "#/components/schemas/BetaRequestPageLocationCitation",
                      "search_result_location": "#/components/schemas/BetaRequestSearchResultLocationCitation",
                      "web_search_result_location": "#/components/schemas/BetaRequestWebSearchResultLocationCitation"
                    },
                    "propertyName": "type"
                  },
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BetaRequestCharLocationCitation"
                    },
                    {
                      "$ref": "#/components/schemas/BetaRequestPageLocationCitation"
                    },
                    {
                      "$ref": "#/components/schemas/BetaRequestContentBlockLocationCitation"
                    },
                    {
                      "$ref": "#/components/schemas/BetaRequestWebSearchResultLocationCitation"
                    },
                    {
                      "$ref": "#/components/schemas/BetaRequestSearchResultLocationCitation"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Citations"
          },
          "text": {
            "minLength": 1,
            "title": "Text",
            "type": "string"
          },
          "type": {
            "const": "text",
            "enum": ["text"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["text", "type"],
        "title": "RequestTextBlock",
        "type": "object"
      },
      "BetaRequestTextEditorCodeExecutionCreateResultBlock": {
        "additionalProperties": false,
        "properties": {
          "is_file_update": {
            "title": "Is File Update",
            "type": "boolean"
          },
          "type": {
            "const": "text_editor_code_execution_create_result",
            "enum": ["text_editor_code_execution_create_result"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["is_file_update", "type"],
        "title": "RequestTextEditorCodeExecutionCreateResultBlock",
        "type": "object"
      },
      "BetaRequestTextEditorCodeExecutionStrReplaceResultBlock": {
        "additionalProperties": false,
        "properties": {
          "lines": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Lines"
          },
          "new_lines": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "New Lines"
          },
          "new_start": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "New Start"
          },
          "old_lines": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Old Lines"
          },
          "old_start": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Old Start"
          },
          "type": {
            "const": "text_editor_code_execution_str_replace_result",
            "enum": ["text_editor_code_execution_str_replace_result"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "RequestTextEditorCodeExecutionStrReplaceResultBlock",
        "type": "object"
      },
      "BetaRequestTextEditorCodeExecutionToolResultBlock": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/BetaCacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BetaCacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "content": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BetaRequestTextEditorCodeExecutionToolResultError"
              },
              {
                "$ref": "#/components/schemas/BetaRequestTextEditorCodeExecutionViewResultBlock"
              },
              {
                "$ref": "#/components/schemas/BetaRequestTextEditorCodeExecutionCreateResultBlock"
              },
              {
                "$ref": "#/components/schemas/BetaRequestTextEditorCodeExecutionStrReplaceResultBlock"
              }
            ],
            "title": "Content"
          },
          "tool_use_id": {
            "pattern": "^srvtoolu_[a-zA-Z0-9_]+$",
            "title": "Tool Use Id",
            "type": "string"
          },
          "type": {
            "const": "text_editor_code_execution_tool_result",
            "enum": ["text_editor_code_execution_tool_result"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["content", "tool_use_id", "type"],
        "title": "RequestTextEditorCodeExecutionToolResultBlock",
        "type": "object"
      },
      "BetaRequestTextEditorCodeExecutionToolResultError": {
        "additionalProperties": false,
        "properties": {
          "error_code": {
            "$ref": "#/components/schemas/BetaTextEditorCodeExecutionToolResultErrorCode"
          },
          "error_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Message"
          },
          "type": {
            "const": "text_editor_code_execution_tool_result_error",
            "enum": ["text_editor_code_execution_tool_result_error"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["error_code", "type"],
        "title": "RequestTextEditorCodeExecutionToolResultError",
        "type": "object"
      },
      "BetaRequestTextEditorCodeExecutionViewResultBlock": {
        "additionalProperties": false,
        "properties": {
          "content": {
            "title": "Content",
            "type": "string"
          },
          "file_type": {
            "enum": ["text", "image", "pdf"],
            "title": "File Type",
            "type": "string"
          },
          "num_lines": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Num Lines"
          },
          "start_line": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Line"
          },
          "total_lines": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Lines"
          },
          "type": {
            "const": "text_editor_code_execution_view_result",
            "enum": ["text_editor_code_execution_view_result"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["content", "file_type", "type"],
        "title": "RequestTextEditorCodeExecutionViewResultBlock",
        "type": "object"
      },
      "BetaRequestThinkingBlock": {
        "additionalProperties": false,
        "properties": {
          "signature": {
            "title": "Signature",
            "type": "string"
          },
          "thinking": {
            "title": "Thinking",
            "type": "string"
          },
          "type": {
            "const": "thinking",
            "enum": ["thinking"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["signature", "thinking", "type"],
        "title": "RequestThinkingBlock",
        "type": "object"
      },
      "BetaRequestToolResultBlock": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/BetaCacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BetaCacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "content": {
            "anyOf": [
              {
                "type": "string",
                "x-stainless-skip": ["go", "cli"]
              },
              {
                "items": {
                  "discriminator": {
                    "mapping": {
                      "document": "#/components/schemas/BetaRequestDocumentBlock",
                      "image": "#/components/schemas/BetaRequestImageBlock",
                      "search_result": "#/components/schemas/BetaRequestSearchResultBlock",
                      "text": "#/components/schemas/BetaRequestTextBlock"
                    },
                    "propertyName": "type"
                  },
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BetaRequestTextBlock"
                    },
                    {
                      "$ref": "#/components/schemas/BetaRequestImageBlock"
                    },
                    {
                      "$ref": "#/components/schemas/BetaRequestSearchResultBlock"
                    },
                    {
                      "$ref": "#/components/schemas/BetaRequestDocumentBlock"
                    }
                  ],
                  "title": "Block"
                },
                "type": "array",
                "x-stainless-naming": {
                  "python": {
                    "type_name": "Content"
                  },
                  "ruby": {
                    "type_name": "Content"
                  }
                }
              }
            ],
            "title": "Content"
          },
          "is_error": {
            "title": "Is Error",
            "type": "boolean"
          },
          "tool_use_id": {
            "pattern": "^[a-zA-Z0-9_-]+$",
            "title": "Tool Use Id",
            "type": "string"
          },
          "type": {
            "const": "tool_result",
            "enum": ["tool_result"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["tool_use_id", "type"],
        "title": "RequestToolResultBlock",
        "type": "object"
      },
      "BetaRequestToolUseBlock": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/BetaCacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BetaCacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "id": {
            "pattern": "^[a-zA-Z0-9_-]+$",
            "title": "Id",
            "type": "string"
          },
          "input": {
            "title": "Input",
            "type": "object"
          },
          "name": {
            "maxLength": 200,
            "minLength": 1,
            "title": "Name",
            "type": "string"
          },
          "type": {
            "const": "tool_use",
            "enum": ["tool_use"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["id", "input", "name", "type"],
        "title": "RequestToolUseBlock",
        "type": "object"
      },
      "BetaRequestWebFetchResultBlock": {
        "additionalProperties": false,
        "properties": {
          "content": {
            "$ref": "#/components/schemas/BetaRequestDocumentBlock"
          },
          "retrieved_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "ISO 8601 timestamp when the content was retrieved",
            "title": "Retrieved At"
          },
          "type": {
            "const": "web_fetch_result",
            "enum": ["web_fetch_result"],
            "title": "Type",
            "type": "string"
          },
          "url": {
            "description": "Fetched content URL",
            "title": "Url",
            "type": "string"
          }
        },
        "required": ["content", "type", "url"],
        "title": "RequestWebFetchResultBlock",
        "type": "object"
      },
      "BetaRequestWebFetchToolResultBlock": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/BetaCacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BetaCacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "content": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BetaRequestWebFetchToolResultError"
              },
              {
                "$ref": "#/components/schemas/BetaRequestWebFetchResultBlock"
              }
            ],
            "title": "Content"
          },
          "tool_use_id": {
            "pattern": "^srvtoolu_[a-zA-Z0-9_]+$",
            "title": "Tool Use Id",
            "type": "string"
          },
          "type": {
            "const": "web_fetch_tool_result",
            "enum": ["web_fetch_tool_result"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["content", "tool_use_id", "type"],
        "title": "RequestWebFetchToolResultBlock",
        "type": "object"
      },
      "BetaRequestWebFetchToolResultError": {
        "additionalProperties": false,
        "properties": {
          "error_code": {
            "$ref": "#/components/schemas/BetaWebFetchToolResultErrorCode"
          },
          "type": {
            "const": "web_fetch_tool_result_error",
            "enum": ["web_fetch_tool_result_error"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["error_code", "type"],
        "title": "RequestWebFetchToolResultError",
        "type": "object"
      },
      "BetaRequestWebSearchResultBlock": {
        "additionalProperties": false,
        "properties": {
          "encrypted_content": {
            "title": "Encrypted Content",
            "type": "string"
          },
          "page_age": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Page Age"
          },
          "title": {
            "title": "Title",
            "type": "string"
          },
          "type": {
            "const": "web_search_result",
            "enum": ["web_search_result"],
            "title": "Type",
            "type": "string"
          },
          "url": {
            "title": "Url",
            "type": "string"
          }
        },
        "required": ["encrypted_content", "title", "type", "url"],
        "title": "RequestWebSearchResultBlock",
        "type": "object"
      },
      "BetaRequestWebSearchResultLocationCitation": {
        "additionalProperties": false,
        "properties": {
          "cited_text": {
            "title": "Cited Text",
            "type": "string"
          },
          "encrypted_index": {
            "title": "Encrypted Index",
            "type": "string"
          },
          "title": {
            "anyOf": [
              {
                "maxLength": 512,
                "minLength": 1,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "type": {
            "const": "web_search_result_location",
            "enum": ["web_search_result_location"],
            "title": "Type",
            "type": "string"
          },
          "url": {
            "maxLength": 2048,
            "minLength": 1,
            "title": "Url",
            "type": "string"
          }
        },
        "required": ["cited_text", "encrypted_index", "title", "type", "url"],
        "title": "RequestWebSearchResultLocationCitation",
        "type": "object"
      },
      "BetaRequestWebSearchToolResultBlock": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/BetaCacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BetaCacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "content": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/BetaRequestWebSearchResultBlock"
                },
                "title": "Result Block",
                "type": "array"
              },
              {
                "$ref": "#/components/schemas/BetaRequestWebSearchToolResultError",
                "x-stainless-naming": {
                  "go": {
                    "variant_constructor": "BetaNewWebSearchToolRequestError"
                  }
                }
              }
            ],
            "title": "Content"
          },
          "tool_use_id": {
            "pattern": "^srvtoolu_[a-zA-Z0-9_]+$",
            "title": "Tool Use Id",
            "type": "string"
          },
          "type": {
            "const": "web_search_tool_result",
            "enum": ["web_search_tool_result"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["content", "tool_use_id", "type"],
        "title": "RequestWebSearchToolResultBlock",
        "type": "object"
      },
      "BetaRequestWebSearchToolResultError": {
        "additionalProperties": false,
        "properties": {
          "error_code": {
            "$ref": "#/components/schemas/BetaWebSearchToolResultErrorCode"
          },
          "type": {
            "const": "web_search_tool_result_error",
            "enum": ["web_search_tool_result_error"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["error_code", "type"],
        "title": "Error",
        "type": "object"
      },
      "BetaResponseBashCodeExecutionOutputBlock": {
        "properties": {
          "file_id": {
            "title": "File Id",
            "type": "string"
          },
          "type": {
            "const": "bash_code_execution_output",
            "default": "bash_code_execution_output",
            "enum": ["bash_code_execution_output"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["file_id", "type"],
        "title": "ResponseBashCodeExecutionOutputBlock",
        "type": "object"
      },
      "BetaResponseBashCodeExecutionResultBlock": {
        "properties": {
          "content": {
            "items": {
              "$ref": "#/components/schemas/BetaResponseBashCodeExecutionOutputBlock"
            },
            "title": "Content",
            "type": "array"
          },
          "return_code": {
            "title": "Return Code",
            "type": "integer"
          },
          "stderr": {
            "title": "Stderr",
            "type": "string"
          },
          "stdout": {
            "title": "Stdout",
            "type": "string"
          },
          "type": {
            "const": "bash_code_execution_result",
            "default": "bash_code_execution_result",
            "enum": ["bash_code_execution_result"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["content", "return_code", "stderr", "stdout", "type"],
        "title": "ResponseBashCodeExecutionResultBlock",
        "type": "object"
      },
      "BetaResponseBashCodeExecutionToolResultBlock": {
        "properties": {
          "content": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BetaResponseBashCodeExecutionToolResultError"
              },
              {
                "$ref": "#/components/schemas/BetaResponseBashCodeExecutionResultBlock"
              }
            ],
            "title": "Content"
          },
          "tool_use_id": {
            "pattern": "^srvtoolu_[a-zA-Z0-9_]+$",
            "title": "Tool Use Id",
            "type": "string"
          },
          "type": {
            "const": "bash_code_execution_tool_result",
            "default": "bash_code_execution_tool_result",
            "enum": ["bash_code_execution_tool_result"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["content", "tool_use_id", "type"],
        "title": "ResponseBashCodeExecutionToolResultBlock",
        "type": "object"
      },
      "BetaResponseBashCodeExecutionToolResultError": {
        "properties": {
          "error_code": {
            "$ref": "#/components/schemas/BetaBashCodeExecutionToolResultErrorCode"
          },
          "type": {
            "const": "bash_code_execution_tool_result_error",
            "default": "bash_code_execution_tool_result_error",
            "enum": ["bash_code_execution_tool_result_error"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["error_code", "type"],
        "title": "ResponseBashCodeExecutionToolResultError",
        "type": "object"
      },
      "BetaResponseCharLocationCitation": {
        "properties": {
          "cited_text": {
            "title": "Cited Text",
            "type": "string"
          },
          "document_index": {
            "minimum": 0,
            "title": "Document Index",
            "type": "integer"
          },
          "document_title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Title"
          },
          "end_char_index": {
            "title": "End Char Index",
            "type": "integer"
          },
          "file_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "File Id"
          },
          "start_char_index": {
            "minimum": 0,
            "title": "Start Char Index",
            "type": "integer"
          },
          "type": {
            "const": "char_location",
            "default": "char_location",
            "enum": ["char_location"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "cited_text",
          "document_index",
          "document_title",
          "end_char_index",
          "file_id",
          "start_char_index",
          "type"
        ],
        "title": "ResponseCharLocationCitation",
        "type": "object"
      },
      "BetaResponseCitationsConfig": {
        "properties": {
          "enabled": {
            "default": false,
            "title": "Enabled",
            "type": "boolean"
          }
        },
        "required": ["enabled"],
        "title": "ResponseCitationsConfig",
        "type": "object"
      },
      "BetaResponseClearToolUses20250919Edit": {
        "description": "Results for clear_tool_uses_20250919 edit.",
        "properties": {
          "cleared_input_tokens": {
            "description": "Number of input tokens cleared by this edit.",
            "minimum": 0,
            "title": "Cleared Input Tokens",
            "type": "integer"
          },
          "cleared_tool_uses": {
            "description": "Number of tool uses that were cleared.",
            "minimum": 0,
            "title": "Cleared Tool Uses",
            "type": "integer"
          },
          "type": {
            "const": "clear_tool_uses_20250919",
            "default": "clear_tool_uses_20250919",
            "description": "The type of context management edit applied.",
            "enum": ["clear_tool_uses_20250919"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["cleared_input_tokens", "cleared_tool_uses", "type"],
        "title": "ResponseClearToolUses20250919Edit",
        "type": "object"
      },
      "BetaResponseCodeExecutionOutputBlock": {
        "properties": {
          "file_id": {
            "title": "File Id",
            "type": "string"
          },
          "type": {
            "const": "code_execution_output",
            "default": "code_execution_output",
            "enum": ["code_execution_output"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["file_id", "type"],
        "title": "ResponseCodeExecutionOutputBlock",
        "type": "object"
      },
      "BetaResponseCodeExecutionResultBlock": {
        "properties": {
          "content": {
            "items": {
              "$ref": "#/components/schemas/BetaResponseCodeExecutionOutputBlock"
            },
            "title": "Content",
            "type": "array"
          },
          "return_code": {
            "title": "Return Code",
            "type": "integer"
          },
          "stderr": {
            "title": "Stderr",
            "type": "string"
          },
          "stdout": {
            "title": "Stdout",
            "type": "string"
          },
          "type": {
            "const": "code_execution_result",
            "default": "code_execution_result",
            "enum": ["code_execution_result"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["content", "return_code", "stderr", "stdout", "type"],
        "title": "ResponseCodeExecutionResultBlock",
        "type": "object"
      },
      "BetaResponseCodeExecutionToolResultBlock": {
        "properties": {
          "content": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BetaResponseCodeExecutionToolResultError"
              },
              {
                "$ref": "#/components/schemas/BetaResponseCodeExecutionResultBlock"
              }
            ],
            "title": "Content"
          },
          "tool_use_id": {
            "pattern": "^srvtoolu_[a-zA-Z0-9_]+$",
            "title": "Tool Use Id",
            "type": "string"
          },
          "type": {
            "const": "code_execution_tool_result",
            "default": "code_execution_tool_result",
            "enum": ["code_execution_tool_result"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["content", "tool_use_id", "type"],
        "title": "ResponseCodeExecutionToolResultBlock",
        "type": "object"
      },
      "BetaResponseCodeExecutionToolResultError": {
        "properties": {
          "error_code": {
            "$ref": "#/components/schemas/BetaCodeExecutionToolResultErrorCode"
          },
          "type": {
            "const": "code_execution_tool_result_error",
            "default": "code_execution_tool_result_error",
            "enum": ["code_execution_tool_result_error"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["error_code", "type"],
        "title": "ResponseCodeExecutionToolResultError",
        "type": "object"
      },
      "BetaResponseContainerUploadBlock": {
        "description": "Response model for a file uploaded to the container.",
        "properties": {
          "file_id": {
            "title": "File Id",
            "type": "string"
          },
          "type": {
            "const": "container_upload",
            "default": "container_upload",
            "enum": ["container_upload"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["file_id", "type"],
        "title": "ResponseContainerUploadBlock",
        "type": "object"
      },
      "BetaResponseContentBlockLocationCitation": {
        "properties": {
          "cited_text": {
            "title": "Cited Text",
            "type": "string"
          },
          "document_index": {
            "minimum": 0,
            "title": "Document Index",
            "type": "integer"
          },
          "document_title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Title"
          },
          "end_block_index": {
            "title": "End Block Index",
            "type": "integer"
          },
          "file_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "File Id"
          },
          "start_block_index": {
            "minimum": 0,
            "title": "Start Block Index",
            "type": "integer"
          },
          "type": {
            "const": "content_block_location",
            "default": "content_block_location",
            "enum": ["content_block_location"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "cited_text",
          "document_index",
          "document_title",
          "end_block_index",
          "file_id",
          "start_block_index",
          "type"
        ],
        "title": "ResponseContentBlockLocationCitation",
        "type": "object"
      },
      "BetaResponseContextManagement": {
        "description": "Information about context management operations applied during the request.",
        "properties": {
          "applied_edits": {
            "description": "List of context management edits that were applied.",
            "items": {
              "$ref": "#/components/schemas/BetaResponseClearToolUses20250919Edit"
            },
            "title": "Applied Edits",
            "type": "array"
          }
        },
        "required": ["applied_edits"],
        "title": "ResponseContextManagement",
        "type": "object"
      },
      "BetaResponseDocumentBlock": {
        "properties": {
          "citations": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BetaResponseCitationsConfig"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Citation configuration for the document"
          },
          "source": {
            "discriminator": {
              "mapping": {
                "base64": "#/components/schemas/BetaBase64PDFSource",
                "text": "#/components/schemas/BetaPlainTextSource"
              },
              "propertyName": "type"
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/BetaBase64PDFSource"
              },
              {
                "$ref": "#/components/schemas/BetaPlainTextSource"
              }
            ],
            "title": "Source"
          },
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "The title of the document",
            "title": "Title"
          },
          "type": {
            "const": "document",
            "default": "document",
            "enum": ["document"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["citations", "source", "title", "type"],
        "title": "ResponseDocumentBlock",
        "type": "object"
      },
      "BetaResponseMCPToolResultBlock": {
        "properties": {
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "$ref": "#/components/schemas/BetaResponseTextBlock",
                  "title": "beta_mcp_tool_result_block_content_item"
                },
                "title": "beta_mcp_tool_result_block_content",
                "type": "array"
              }
            ],
            "title": "Content"
          },
          "is_error": {
            "default": false,
            "title": "Is Error",
            "type": "boolean"
          },
          "tool_use_id": {
            "pattern": "^[a-zA-Z0-9_-]+$",
            "title": "Tool Use Id",
            "type": "string"
          },
          "type": {
            "const": "mcp_tool_result",
            "default": "mcp_tool_result",
            "enum": ["mcp_tool_result"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["content", "is_error", "tool_use_id", "type"],
        "title": "ResponseMCPToolResultBlock",
        "type": "object"
      },
      "BetaResponseMCPToolUseBlock": {
        "properties": {
          "id": {
            "pattern": "^[a-zA-Z0-9_-]+$",
            "title": "Id",
            "type": "string"
          },
          "input": {
            "title": "Input",
            "type": "object"
          },
          "name": {
            "description": "The name of the MCP tool",
            "title": "Name",
            "type": "string"
          },
          "server_name": {
            "description": "The name of the MCP server",
            "title": "Server Name",
            "type": "string"
          },
          "type": {
            "const": "mcp_tool_use",
            "default": "mcp_tool_use",
            "enum": ["mcp_tool_use"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["id", "input", "name", "server_name", "type"],
        "title": "ResponseMCPToolUseBlock",
        "type": "object"
      },
      "BetaResponsePageLocationCitation": {
        "properties": {
          "cited_text": {
            "title": "Cited Text",
            "type": "string"
          },
          "document_index": {
            "minimum": 0,
            "title": "Document Index",
            "type": "integer"
          },
          "document_title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Title"
          },
          "end_page_number": {
            "title": "End Page Number",
            "type": "integer"
          },
          "file_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "File Id"
          },
          "start_page_number": {
            "minimum": 1,
            "title": "Start Page Number",
            "type": "integer"
          },
          "type": {
            "const": "page_location",
            "default": "page_location",
            "enum": ["page_location"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "cited_text",
          "document_index",
          "document_title",
          "end_page_number",
          "file_id",
          "start_page_number",
          "type"
        ],
        "title": "ResponsePageLocationCitation",
        "type": "object"
      },
      "BetaResponseRedactedThinkingBlock": {
        "properties": {
          "data": {
            "title": "Data",
            "type": "string"
          },
          "type": {
            "const": "redacted_thinking",
            "default": "redacted_thinking",
            "enum": ["redacted_thinking"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["data", "type"],
        "title": "ResponseRedactedThinkingBlock",
        "type": "object"
      },
      "BetaResponseSearchResultLocationCitation": {
        "properties": {
          "cited_text": {
            "title": "Cited Text",
            "type": "string"
          },
          "end_block_index": {
            "title": "End Block Index",
            "type": "integer"
          },
          "search_result_index": {
            "minimum": 0,
            "title": "Search Result Index",
            "type": "integer"
          },
          "source": {
            "title": "Source",
            "type": "string"
          },
          "start_block_index": {
            "minimum": 0,
            "title": "Start Block Index",
            "type": "integer"
          },
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "type": {
            "const": "search_result_location",
            "default": "search_result_location",
            "enum": ["search_result_location"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "cited_text",
          "end_block_index",
          "search_result_index",
          "source",
          "start_block_index",
          "title",
          "type"
        ],
        "title": "ResponseSearchResultLocationCitation",
        "type": "object"
      },
      "BetaResponseServerToolUseBlock": {
        "properties": {
          "id": {
            "pattern": "^srvtoolu_[a-zA-Z0-9_]+$",
            "title": "Id",
            "type": "string"
          },
          "input": {
            "title": "Input",
            "type": "object"
          },
          "name": {
            "enum": [
              "web_search",
              "web_fetch",
              "code_execution",
              "bash_code_execution",
              "text_editor_code_execution"
            ],
            "title": "Name",
            "type": "string"
          },
          "type": {
            "const": "server_tool_use",
            "default": "server_tool_use",
            "enum": ["server_tool_use"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["id", "input", "name", "type"],
        "title": "ResponseServerToolUseBlock",
        "type": "object"
      },
      "BetaResponseTextBlock": {
        "properties": {
          "citations": {
            "anyOf": [
              {
                "items": {
                  "discriminator": {
                    "mapping": {
                      "char_location": "#/components/schemas/BetaResponseCharLocationCitation",
                      "content_block_location": "#/components/schemas/BetaResponseContentBlockLocationCitation",
                      "page_location": "#/components/schemas/BetaResponsePageLocationCitation",
                      "search_result_location": "#/components/schemas/BetaResponseSearchResultLocationCitation",
                      "web_search_result_location": "#/components/schemas/BetaResponseWebSearchResultLocationCitation"
                    },
                    "propertyName": "type"
                  },
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BetaResponseCharLocationCitation"
                    },
                    {
                      "$ref": "#/components/schemas/BetaResponsePageLocationCitation"
                    },
                    {
                      "$ref": "#/components/schemas/BetaResponseContentBlockLocationCitation"
                    },
                    {
                      "$ref": "#/components/schemas/BetaResponseWebSearchResultLocationCitation"
                    },
                    {
                      "$ref": "#/components/schemas/BetaResponseSearchResultLocationCitation"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Citations supporting the text block.\n\nThe type of citation returned will depend on the type of document being cited. Citing a PDF results in `page_location`, plain text results in `char_location`, and content document results in `content_block_location`.",
            "title": "Citations"
          },
          "text": {
            "maxLength": 5000000,
            "minLength": 0,
            "title": "Text",
            "type": "string"
          },
          "type": {
            "const": "text",
            "default": "text",
            "enum": ["text"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["citations", "text", "type"],
        "title": "ResponseTextBlock",
        "type": "object"
      },
      "BetaResponseTextEditorCodeExecutionCreateResultBlock": {
        "properties": {
          "is_file_update": {
            "title": "Is File Update",
            "type": "boolean"
          },
          "type": {
            "const": "text_editor_code_execution_create_result",
            "default": "text_editor_code_execution_create_result",
            "enum": ["text_editor_code_execution_create_result"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["is_file_update", "type"],
        "title": "ResponseTextEditorCodeExecutionCreateResultBlock",
        "type": "object"
      },
      "BetaResponseTextEditorCodeExecutionStrReplaceResultBlock": {
        "properties": {
          "lines": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Lines"
          },
          "new_lines": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "New Lines"
          },
          "new_start": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "New Start"
          },
          "old_lines": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Old Lines"
          },
          "old_start": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Old Start"
          },
          "type": {
            "const": "text_editor_code_execution_str_replace_result",
            "default": "text_editor_code_execution_str_replace_result",
            "enum": ["text_editor_code_execution_str_replace_result"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "lines",
          "new_lines",
          "new_start",
          "old_lines",
          "old_start",
          "type"
        ],
        "title": "ResponseTextEditorCodeExecutionStrReplaceResultBlock",
        "type": "object"
      },
      "BetaResponseTextEditorCodeExecutionToolResultBlock": {
        "properties": {
          "content": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BetaResponseTextEditorCodeExecutionToolResultError"
              },
              {
                "$ref": "#/components/schemas/BetaResponseTextEditorCodeExecutionViewResultBlock"
              },
              {
                "$ref": "#/components/schemas/BetaResponseTextEditorCodeExecutionCreateResultBlock"
              },
              {
                "$ref": "#/components/schemas/BetaResponseTextEditorCodeExecutionStrReplaceResultBlock"
              }
            ],
            "title": "Content"
          },
          "tool_use_id": {
            "pattern": "^srvtoolu_[a-zA-Z0-9_]+$",
            "title": "Tool Use Id",
            "type": "string"
          },
          "type": {
            "const": "text_editor_code_execution_tool_result",
            "default": "text_editor_code_execution_tool_result",
            "enum": ["text_editor_code_execution_tool_result"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["content", "tool_use_id", "type"],
        "title": "ResponseTextEditorCodeExecutionToolResultBlock",
        "type": "object"
      },
      "BetaResponseTextEditorCodeExecutionToolResultError": {
        "properties": {
          "error_code": {
            "$ref": "#/components/schemas/BetaTextEditorCodeExecutionToolResultErrorCode"
          },
          "error_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Error Message"
          },
          "type": {
            "const": "text_editor_code_execution_tool_result_error",
            "default": "text_editor_code_execution_tool_result_error",
            "enum": ["text_editor_code_execution_tool_result_error"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["error_code", "error_message", "type"],
        "title": "ResponseTextEditorCodeExecutionToolResultError",
        "type": "object"
      },
      "BetaResponseTextEditorCodeExecutionViewResultBlock": {
        "properties": {
          "content": {
            "title": "Content",
            "type": "string"
          },
          "file_type": {
            "enum": ["text", "image", "pdf"],
            "title": "File Type",
            "type": "string"
          },
          "num_lines": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Num Lines"
          },
          "start_line": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Start Line"
          },
          "total_lines": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Total Lines"
          },
          "type": {
            "const": "text_editor_code_execution_view_result",
            "default": "text_editor_code_execution_view_result",
            "enum": ["text_editor_code_execution_view_result"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "content",
          "file_type",
          "num_lines",
          "start_line",
          "total_lines",
          "type"
        ],
        "title": "ResponseTextEditorCodeExecutionViewResultBlock",
        "type": "object"
      },
      "BetaResponseThinkingBlock": {
        "properties": {
          "signature": {
            "title": "Signature",
            "type": "string"
          },
          "thinking": {
            "title": "Thinking",
            "type": "string"
          },
          "type": {
            "const": "thinking",
            "default": "thinking",
            "enum": ["thinking"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["signature", "thinking", "type"],
        "title": "ResponseThinkingBlock",
        "type": "object"
      },
      "BetaResponseToolUseBlock": {
        "properties": {
          "id": {
            "pattern": "^[a-zA-Z0-9_-]+$",
            "title": "Id",
            "type": "string"
          },
          "input": {
            "title": "Input",
            "type": "object"
          },
          "name": {
            "minLength": 1,
            "title": "Name",
            "type": "string"
          },
          "type": {
            "const": "tool_use",
            "default": "tool_use",
            "enum": ["tool_use"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["id", "input", "name", "type"],
        "title": "ResponseToolUseBlock",
        "type": "object"
      },
      "BetaResponseWebFetchResultBlock": {
        "properties": {
          "content": {
            "$ref": "#/components/schemas/BetaResponseDocumentBlock"
          },
          "retrieved_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "ISO 8601 timestamp when the content was retrieved",
            "title": "Retrieved At"
          },
          "type": {
            "const": "web_fetch_result",
            "default": "web_fetch_result",
            "enum": ["web_fetch_result"],
            "title": "Type",
            "type": "string"
          },
          "url": {
            "description": "Fetched content URL",
            "title": "Url",
            "type": "string"
          }
        },
        "required": ["content", "retrieved_at", "type", "url"],
        "title": "ResponseWebFetchResultBlock",
        "type": "object"
      },
      "BetaResponseWebFetchToolResultBlock": {
        "properties": {
          "content": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BetaResponseWebFetchToolResultError"
              },
              {
                "$ref": "#/components/schemas/BetaResponseWebFetchResultBlock"
              }
            ],
            "title": "Content"
          },
          "tool_use_id": {
            "pattern": "^srvtoolu_[a-zA-Z0-9_]+$",
            "title": "Tool Use Id",
            "type": "string"
          },
          "type": {
            "const": "web_fetch_tool_result",
            "default": "web_fetch_tool_result",
            "enum": ["web_fetch_tool_result"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["content", "tool_use_id", "type"],
        "title": "ResponseWebFetchToolResultBlock",
        "type": "object"
      },
      "BetaResponseWebFetchToolResultError": {
        "properties": {
          "error_code": {
            "$ref": "#/components/schemas/BetaWebFetchToolResultErrorCode"
          },
          "type": {
            "const": "web_fetch_tool_result_error",
            "default": "web_fetch_tool_result_error",
            "enum": ["web_fetch_tool_result_error"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["error_code", "type"],
        "title": "ResponseWebFetchToolResultError",
        "type": "object"
      },
      "BetaResponseWebSearchResultBlock": {
        "properties": {
          "encrypted_content": {
            "title": "Encrypted Content",
            "type": "string"
          },
          "page_age": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Page Age"
          },
          "title": {
            "title": "Title",
            "type": "string"
          },
          "type": {
            "const": "web_search_result",
            "default": "web_search_result",
            "enum": ["web_search_result"],
            "title": "Type",
            "type": "string"
          },
          "url": {
            "title": "Url",
            "type": "string"
          }
        },
        "required": ["encrypted_content", "page_age", "title", "type", "url"],
        "title": "ResponseWebSearchResultBlock",
        "type": "object"
      },
      "BetaResponseWebSearchResultLocationCitation": {
        "properties": {
          "cited_text": {
            "title": "Cited Text",
            "type": "string"
          },
          "encrypted_index": {
            "title": "Encrypted Index",
            "type": "string"
          },
          "title": {
            "anyOf": [
              {
                "maxLength": 512,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "type": {
            "const": "web_search_result_location",
            "default": "web_search_result_location",
            "enum": ["web_search_result_location"],
            "title": "Type",
            "type": "string"
          },
          "url": {
            "title": "Url",
            "type": "string"
          }
        },
        "required": ["cited_text", "encrypted_index", "title", "type", "url"],
        "title": "ResponseWebSearchResultLocationCitation",
        "type": "object"
      },
      "BetaResponseWebSearchToolResultBlock": {
        "properties": {
          "content": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BetaResponseWebSearchToolResultError"
              },
              {
                "items": {
                  "$ref": "#/components/schemas/BetaResponseWebSearchResultBlock"
                },
                "type": "array"
              }
            ],
            "title": "Content"
          },
          "tool_use_id": {
            "pattern": "^srvtoolu_[a-zA-Z0-9_]+$",
            "title": "Tool Use Id",
            "type": "string"
          },
          "type": {
            "const": "web_search_tool_result",
            "default": "web_search_tool_result",
            "enum": ["web_search_tool_result"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["content", "tool_use_id", "type"],
        "title": "ResponseWebSearchToolResultBlock",
        "type": "object"
      },
      "BetaResponseWebSearchToolResultError": {
        "properties": {
          "error_code": {
            "$ref": "#/components/schemas/BetaWebSearchToolResultErrorCode"
          },
          "type": {
            "const": "web_search_tool_result_error",
            "default": "web_search_tool_result_error",
            "enum": ["web_search_tool_result_error"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["error_code", "type"],
        "title": "ResponseWebSearchToolResultError",
        "type": "object"
      },
      "BetaServerToolUsage": {
        "properties": {
          "web_fetch_requests": {
            "default": 0,
            "description": "The number of web fetch tool requests.",
            "examples": [2],
            "minimum": 0,
            "title": "Web Fetch Requests",
            "type": "integer"
          },
          "web_search_requests": {
            "default": 0,
            "description": "The number of web search tool requests.",
            "examples": [0],
            "minimum": 0,
            "title": "Web Search Requests",
            "type": "integer"
          }
        },
        "required": ["web_fetch_requests", "web_search_requests"],
        "title": "ServerToolUsage",
        "type": "object"
      },
      "BetaSignatureContentBlockDelta": {
        "properties": {
          "signature": {
            "title": "Signature",
            "type": "string"
          },
          "type": {
            "const": "signature_delta",
            "default": "signature_delta",
            "enum": ["signature_delta"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["signature", "type"],
        "title": "SignatureContentBlockDelta",
        "type": "object"
      },
      "BetaStopReason": {
        "enum": [
          "end_turn",
          "max_tokens",
          "stop_sequence",
          "tool_use",
          "pause_turn",
          "refusal",
          "model_context_window_exceeded"
        ],
        "type": "string"
      },
      "BetaSucceededResult": {
        "properties": {
          "message": {
            "$ref": "#/components/schemas/BetaMessage"
          },
          "type": {
            "const": "succeeded",
            "default": "succeeded",
            "enum": ["succeeded"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["message", "type"],
        "title": "SucceededResult",
        "type": "object"
      },
      "BetaTextContentBlockDelta": {
        "properties": {
          "text": {
            "title": "Text",
            "type": "string"
          },
          "type": {
            "const": "text_delta",
            "default": "text_delta",
            "enum": ["text_delta"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["text", "type"],
        "title": "TextContentBlockDelta",
        "type": "object"
      },
      "BetaTextEditorCodeExecutionToolResultErrorCode": {
        "enum": [
          "invalid_tool_input",
          "unavailable",
          "too_many_requests",
          "execution_time_exceeded",
          "file_not_found"
        ],
        "title": "TextEditorCodeExecutionToolResultErrorCode",
        "type": "string"
      },
      "BetaTextEditor_20241022": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/BetaCacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BetaCacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "name": {
            "const": "str_replace_editor",
            "description": "Name of the tool.\n\nThis is how the tool will be called by the model and in `tool_use` blocks.",
            "enum": ["str_replace_editor"],
            "title": "Name",
            "type": "string"
          },
          "type": {
            "const": "text_editor_20241022",
            "enum": ["text_editor_20241022"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["name", "type"],
        "title": "TextEditor_20241022",
        "type": "object"
      },
      "BetaTextEditor_20250124": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/BetaCacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BetaCacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "name": {
            "const": "str_replace_editor",
            "description": "Name of the tool.\n\nThis is how the tool will be called by the model and in `tool_use` blocks.",
            "enum": ["str_replace_editor"],
            "title": "Name",
            "type": "string"
          },
          "type": {
            "const": "text_editor_20250124",
            "enum": ["text_editor_20250124"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["name", "type"],
        "title": "TextEditor_20250124",
        "type": "object"
      },
      "BetaTextEditor_20250429": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/BetaCacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BetaCacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "name": {
            "const": "str_replace_based_edit_tool",
            "description": "Name of the tool.\n\nThis is how the tool will be called by the model and in `tool_use` blocks.",
            "enum": ["str_replace_based_edit_tool"],
            "title": "Name",
            "type": "string"
          },
          "type": {
            "const": "text_editor_20250429",
            "enum": ["text_editor_20250429"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["name", "type"],
        "title": "TextEditor_20250429",
        "type": "object"
      },
      "BetaTextEditor_20250728": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/BetaCacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BetaCacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "max_characters": {
            "anyOf": [
              {
                "minimum": 1,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Maximum number of characters to display when viewing a file. If not specified, defaults to displaying the full file.",
            "title": "Max Characters"
          },
          "name": {
            "const": "str_replace_based_edit_tool",
            "description": "Name of the tool.\n\nThis is how the tool will be called by the model and in `tool_use` blocks.",
            "enum": ["str_replace_based_edit_tool"],
            "title": "Name",
            "type": "string"
          },
          "type": {
            "const": "text_editor_20250728",
            "enum": ["text_editor_20250728"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["name", "type"],
        "title": "TextEditor_20250728",
        "type": "object"
      },
      "BetaThinkingConfigDisabled": {
        "additionalProperties": false,
        "properties": {
          "type": {
            "const": "disabled",
            "enum": ["disabled"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "ThinkingConfigDisabled",
        "type": "object",
        "x-stainless-go-constant-constructor": true
      },
      "BetaThinkingConfigEnabled": {
        "additionalProperties": false,
        "properties": {
          "budget_tokens": {
            "description": "Determines how many tokens Claude can use for its internal reasoning process. Larger budgets can enable more thorough analysis for complex problems, improving response quality. \n\nMust be ≥1024 and less than `max_tokens`.\n\nSee [extended thinking](https://docs.anthropic.com/en/docs/build-with-claude/extended-thinking) for details.",
            "minimum": 1024,
            "title": "Budget Tokens",
            "type": "integer"
          },
          "type": {
            "const": "enabled",
            "enum": ["enabled"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["budget_tokens", "type"],
        "title": "ThinkingConfigEnabled",
        "type": "object"
      },
      "BetaThinkingConfigParam": {
        "description": "Configuration for enabling Claude's extended thinking. \n\nWhen enabled, responses include `thinking` content blocks showing Claude's thinking process before the final answer. Requires a minimum budget of 1,024 tokens and counts towards your `max_tokens` limit.\n\nSee [extended thinking](https://docs.anthropic.com/en/docs/build-with-claude/extended-thinking) for details.",
        "discriminator": {
          "mapping": {
            "disabled": "#/components/schemas/BetaThinkingConfigDisabled",
            "enabled": "#/components/schemas/BetaThinkingConfigEnabled"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/BetaThinkingConfigEnabled"
          },
          {
            "$ref": "#/components/schemas/BetaThinkingConfigDisabled"
          }
        ],
        "title": "Thinking"
      },
      "BetaThinkingContentBlockDelta": {
        "properties": {
          "thinking": {
            "title": "Thinking",
            "type": "string"
          },
          "type": {
            "const": "thinking_delta",
            "default": "thinking_delta",
            "enum": ["thinking_delta"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["thinking", "type"],
        "title": "ThinkingContentBlockDelta",
        "type": "object"
      },
      "BetaTool": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/BetaCacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BetaCacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "description": {
            "description": "Description of what this tool does.\n\nTool descriptions should be as detailed as possible. The more information that the model has about what the tool is and how to use it, the better it will perform. You can use natural language descriptions to reinforce important aspects of the tool input JSON schema.",
            "examples": ["Get the current weather in a given location"],
            "title": "Description",
            "type": "string"
          },
          "input_schema": {
            "$ref": "#/components/schemas/BetaInputSchema",
            "description": "[JSON schema](https://json-schema.org/draft/2020-12) for this tool's input.\n\nThis defines the shape of the `input` that your tool accepts and that the model will produce.",
            "examples": [
              {
                "properties": {
                  "location": {
                    "description": "The city and state, e.g. San Francisco, CA",
                    "type": "string"
                  },
                  "unit": {
                    "description": "Unit for the output - one of (celsius, fahrenheit)",
                    "type": "string"
                  }
                },
                "required": ["location"],
                "type": "object"
              }
            ]
          },
          "name": {
            "description": "Name of the tool.\n\nThis is how the tool will be called by the model and in `tool_use` blocks.",
            "maxLength": 128,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_-]{1,128}$",
            "title": "Name",
            "type": "string"
          },
          "type": {
            "anyOf": [
              {
                "type": "null"
              },
              {
                "const": "custom",
                "enum": ["custom"],
                "type": "string"
              }
            ],
            "title": "Type"
          }
        },
        "required": ["name", "input_schema"],
        "title": "Tool",
        "type": "object"
      },
      "BetaToolChoice": {
        "description": "How the model should use the provided tools. The model can use a specific tool, any available tool, decide by itself, or not use tools at all.",
        "discriminator": {
          "mapping": {
            "any": "#/components/schemas/BetaToolChoiceAny",
            "auto": "#/components/schemas/BetaToolChoiceAuto",
            "none": "#/components/schemas/BetaToolChoiceNone",
            "tool": "#/components/schemas/BetaToolChoiceTool"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/BetaToolChoiceAuto"
          },
          {
            "$ref": "#/components/schemas/BetaToolChoiceAny"
          },
          {
            "$ref": "#/components/schemas/BetaToolChoiceTool"
          },
          {
            "$ref": "#/components/schemas/BetaToolChoiceNone"
          }
        ],
        "title": "Tool Choice"
      },
      "BetaToolChoiceAny": {
        "additionalProperties": false,
        "description": "The model will use any available tools.",
        "properties": {
          "disable_parallel_tool_use": {
            "description": "Whether to disable parallel tool use.\n\nDefaults to `false`. If set to `true`, the model will output exactly one tool use.",
            "title": "Disable Parallel Tool Use",
            "type": "boolean"
          },
          "type": {
            "const": "any",
            "enum": ["any"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "ToolChoiceAny",
        "type": "object"
      },
      "BetaToolChoiceAuto": {
        "additionalProperties": false,
        "description": "The model will automatically decide whether to use tools.",
        "properties": {
          "disable_parallel_tool_use": {
            "description": "Whether to disable parallel tool use.\n\nDefaults to `false`. If set to `true`, the model will output at most one tool use.",
            "title": "Disable Parallel Tool Use",
            "type": "boolean"
          },
          "type": {
            "const": "auto",
            "enum": ["auto"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "ToolChoiceAuto",
        "type": "object"
      },
      "BetaToolChoiceNone": {
        "additionalProperties": false,
        "description": "The model will not be allowed to use tools.",
        "properties": {
          "type": {
            "const": "none",
            "enum": ["none"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "ToolChoiceNone",
        "type": "object",
        "x-stainless-go-constant-constructor": true
      },
      "BetaToolChoiceTool": {
        "additionalProperties": false,
        "description": "The model will use the specified tool with `tool_choice.name`.",
        "properties": {
          "disable_parallel_tool_use": {
            "description": "Whether to disable parallel tool use.\n\nDefaults to `false`. If set to `true`, the model will output exactly one tool use.",
            "title": "Disable Parallel Tool Use",
            "type": "boolean"
          },
          "name": {
            "description": "The name of the tool to use.",
            "title": "Name",
            "type": "string"
          },
          "type": {
            "const": "tool",
            "enum": ["tool"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["name", "type"],
        "title": "ToolChoiceTool",
        "type": "object"
      },
      "BetaToolUsesKeep": {
        "additionalProperties": false,
        "properties": {
          "type": {
            "const": "tool_uses",
            "enum": ["tool_uses"],
            "title": "Type",
            "type": "string"
          },
          "value": {
            "minimum": 0,
            "title": "Value",
            "type": "integer"
          }
        },
        "required": ["type", "value"],
        "title": "ToolUsesKeep",
        "type": "object"
      },
      "BetaToolUsesTrigger": {
        "additionalProperties": false,
        "properties": {
          "type": {
            "const": "tool_uses",
            "enum": ["tool_uses"],
            "title": "Type",
            "type": "string"
          },
          "value": {
            "minimum": 1,
            "title": "Value",
            "type": "integer"
          }
        },
        "required": ["type", "value"],
        "title": "ToolUsesTrigger",
        "type": "object"
      },
      "BetaURLImageSource": {
        "additionalProperties": false,
        "properties": {
          "type": {
            "const": "url",
            "enum": ["url"],
            "title": "Type",
            "type": "string"
          },
          "url": {
            "title": "Url",
            "type": "string"
          }
        },
        "required": ["type", "url"],
        "title": "URLImageSource",
        "type": "object"
      },
      "BetaURLPDFSource": {
        "additionalProperties": false,
        "properties": {
          "type": {
            "const": "url",
            "enum": ["url"],
            "title": "Type",
            "type": "string"
          },
          "url": {
            "title": "Url",
            "type": "string"
          }
        },
        "required": ["type", "url"],
        "title": "URLPDFSource",
        "type": "object"
      },
      "BetaUsage": {
        "properties": {
          "cache_creation": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BetaCacheCreation"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Breakdown of cached tokens by TTL"
          },
          "cache_creation_input_tokens": {
            "anyOf": [
              {
                "minimum": 0,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "The number of input tokens used to create the cache entry.",
            "examples": [2051],
            "title": "Cache Creation Input Tokens"
          },
          "cache_read_input_tokens": {
            "anyOf": [
              {
                "minimum": 0,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "The number of input tokens read from the cache.",
            "examples": [2051],
            "title": "Cache Read Input Tokens"
          },
          "input_tokens": {
            "description": "The number of input tokens which were used.",
            "examples": [2095],
            "minimum": 0,
            "title": "Input Tokens",
            "type": "integer"
          },
          "output_tokens": {
            "description": "The number of output tokens which were used.",
            "examples": [503],
            "minimum": 0,
            "title": "Output Tokens",
            "type": "integer"
          },
          "server_tool_use": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BetaServerToolUsage"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "The number of server tool requests."
          },
          "service_tier": {
            "anyOf": [
              {
                "enum": ["standard", "priority", "batch"],
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "If the request used the priority, standard, or batch tier.",
            "title": "Service Tier"
          }
        },
        "required": [
          "cache_creation",
          "cache_creation_input_tokens",
          "cache_read_input_tokens",
          "input_tokens",
          "output_tokens",
          "server_tool_use",
          "service_tier"
        ],
        "title": "Usage",
        "type": "object"
      },
      "BetaUserLocation": {
        "additionalProperties": false,
        "properties": {
          "city": {
            "anyOf": [
              {
                "maxLength": 255,
                "minLength": 1,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The city of the user.",
            "examples": ["New York", "Tokyo", "Los Angeles"],
            "title": "City"
          },
          "country": {
            "anyOf": [
              {
                "maxLength": 2,
                "minLength": 2,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The two letter [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the user.",
            "examples": ["US", "JP", "GB"],
            "title": "Country"
          },
          "region": {
            "anyOf": [
              {
                "maxLength": 255,
                "minLength": 1,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The region of the user.",
            "examples": ["California", "Ontario", "Wales"],
            "title": "Region"
          },
          "timezone": {
            "anyOf": [
              {
                "maxLength": 255,
                "minLength": 1,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The [IANA timezone](https://nodatime.org/TimeZones) of the user.",
            "examples": ["America/New_York", "Asia/Tokyo", "Europe/London"],
            "title": "Timezone"
          },
          "type": {
            "const": "approximate",
            "enum": ["approximate"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "UserLocation",
        "type": "object"
      },
      "BetaWebFetchToolResultErrorCode": {
        "enum": [
          "invalid_tool_input",
          "url_too_long",
          "url_not_allowed",
          "url_not_accessible",
          "unsupported_content_type",
          "too_many_requests",
          "max_uses_exceeded",
          "unavailable"
        ],
        "title": "WebFetchToolResultErrorCode",
        "type": "string"
      },
      "BetaWebFetchTool_20250910": {
        "additionalProperties": false,
        "properties": {
          "allowed_domains": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "List of domains to allow fetching from",
            "title": "Allowed Domains"
          },
          "blocked_domains": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "List of domains to block fetching from",
            "title": "Blocked Domains"
          },
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/BetaCacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BetaCacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "citations": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BetaRequestCitationsConfig"
              },
              {
                "type": "null"
              }
            ],
            "description": "Citations configuration for fetched documents. Citations are disabled by default."
          },
          "max_content_tokens": {
            "anyOf": [
              {
                "exclusiveMinimum": 0,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Maximum number of tokens used by including web page text content in the context. The limit is approximate and does not apply to binary content such as PDFs.",
            "title": "Max Content Tokens"
          },
          "max_uses": {
            "anyOf": [
              {
                "exclusiveMinimum": 0,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Maximum number of times the tool can be used in the API request.",
            "title": "Max Uses"
          },
          "name": {
            "const": "web_fetch",
            "description": "Name of the tool.\n\nThis is how the tool will be called by the model and in `tool_use` blocks.",
            "enum": ["web_fetch"],
            "title": "Name",
            "type": "string"
          },
          "type": {
            "const": "web_fetch_20250910",
            "enum": ["web_fetch_20250910"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["name", "type"],
        "title": "WebFetchTool_20250910",
        "type": "object"
      },
      "BetaWebSearchToolResultErrorCode": {
        "enum": [
          "invalid_tool_input",
          "unavailable",
          "max_uses_exceeded",
          "too_many_requests",
          "query_too_long"
        ],
        "title": "WebSearchToolResultErrorCode",
        "type": "string"
      },
      "BetaWebSearchTool_20250305": {
        "additionalProperties": false,
        "properties": {
          "allowed_domains": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "If provided, only these domains will be included in results. Cannot be used alongside `blocked_domains`.",
            "title": "Allowed Domains"
          },
          "blocked_domains": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "If provided, these domains will never appear in results. Cannot be used alongside `allowed_domains`.",
            "title": "Blocked Domains"
          },
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/BetaCacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BetaCacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "max_uses": {
            "anyOf": [
              {
                "exclusiveMinimum": 0,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Maximum number of times the tool can be used in the API request.",
            "title": "Max Uses"
          },
          "name": {
            "const": "web_search",
            "description": "Name of the tool.\n\nThis is how the tool will be called by the model and in `tool_use` blocks.",
            "enum": ["web_search"],
            "title": "Name",
            "type": "string"
          },
          "type": {
            "const": "web_search_20250305",
            "enum": ["web_search_20250305"],
            "title": "Type",
            "type": "string"
          },
          "user_location": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BetaUserLocation"
              },
              {
                "type": "null"
              }
            ],
            "description": "Parameters for the user's location. Used to provide more relevant search results."
          }
        },
        "required": ["name", "type"],
        "title": "WebSearchTool_20250305",
        "type": "object"
      },
      "BillingError": {
        "properties": {
          "message": {
            "default": "Billing error",
            "title": "Message",
            "type": "string"
          },
          "type": {
            "const": "billing_error",
            "default": "billing_error",
            "enum": ["billing_error"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["message", "type"],
        "title": "BillingError",
        "type": "object"
      },
      "CacheControlEphemeral": {
        "additionalProperties": false,
        "properties": {
          "ttl": {
            "description": "The time-to-live for the cache control breakpoint.\n\nThis may be one the following values:\n- `5m`: 5 minutes\n- `1h`: 1 hour\n\nDefaults to `5m`.",
            "enum": ["5m", "1h"],
            "title": "Ttl",
            "type": "string",
            "x-stainless-renameMap": {
              "ttl_1h": "1h",
              "ttl_5m": "5m"
            }
          },
          "type": {
            "const": "ephemeral",
            "enum": ["ephemeral"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "CacheControlEphemeral",
        "type": "object",
        "x-stainless-go-constant-constructor": true
      },
      "CacheCreation": {
        "properties": {
          "ephemeral_1h_input_tokens": {
            "default": 0,
            "description": "The number of input tokens used to create the 1 hour cache entry.",
            "minimum": 0,
            "title": "Ephemeral 1H Input Tokens",
            "type": "integer"
          },
          "ephemeral_5m_input_tokens": {
            "default": 0,
            "description": "The number of input tokens used to create the 5 minute cache entry.",
            "minimum": 0,
            "title": "Ephemeral 5M Input Tokens",
            "type": "integer"
          }
        },
        "required": ["ephemeral_1h_input_tokens", "ephemeral_5m_input_tokens"],
        "title": "CacheCreation",
        "type": "object"
      },
      "CanceledResult": {
        "properties": {
          "type": {
            "const": "canceled",
            "default": "canceled",
            "enum": ["canceled"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "CanceledResult",
        "type": "object"
      },
      "CitationsDelta": {
        "properties": {
          "citation": {
            "discriminator": {
              "mapping": {
                "char_location": "#/components/schemas/ResponseCharLocationCitation",
                "content_block_location": "#/components/schemas/ResponseContentBlockLocationCitation",
                "page_location": "#/components/schemas/ResponsePageLocationCitation",
                "search_result_location": "#/components/schemas/ResponseSearchResultLocationCitation",
                "web_search_result_location": "#/components/schemas/ResponseWebSearchResultLocationCitation"
              },
              "propertyName": "type"
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/ResponseCharLocationCitation"
              },
              {
                "$ref": "#/components/schemas/ResponsePageLocationCitation"
              },
              {
                "$ref": "#/components/schemas/ResponseContentBlockLocationCitation"
              },
              {
                "$ref": "#/components/schemas/ResponseWebSearchResultLocationCitation"
              },
              {
                "$ref": "#/components/schemas/ResponseSearchResultLocationCitation"
              }
            ],
            "title": "Citation"
          },
          "type": {
            "const": "citations_delta",
            "default": "citations_delta",
            "enum": ["citations_delta"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["citation", "type"],
        "title": "CitationsDelta",
        "type": "object"
      },
      "CompletionRequest": {
        "additionalProperties": false,
        "examples": [
          {
            "max_tokens_to_sample": 256,
            "model": "claude-2.1",
            "prompt": "\n\nHuman: Hello, world!\n\nAssistant:"
          }
        ],
        "properties": {
          "max_tokens_to_sample": {
            "description": "The maximum number of tokens to generate before stopping.\n\nNote that our models may stop _before_ reaching this maximum. This parameter only specifies the absolute maximum number of tokens to generate.",
            "examples": [256],
            "minimum": 1,
            "title": "Max Tokens To Sample",
            "type": "integer"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata",
            "description": "An object describing metadata about the request."
          },
          "model": {
            "$ref": "#/components/schemas/Model"
          },
          "prompt": {
            "description": "The prompt that you want Claude to complete.\n\nFor proper response generation you will need to format your prompt using alternating `\\n\\nHuman:` and `\\n\\nAssistant:` conversational turns. For example:\n\n```\n\"\\n\\nHuman: {userQuestion}\\n\\nAssistant:\"\n```\n\nSee [prompt validation](https://docs.anthropic.com/en/api/prompt-validation) and our guide to [prompt design](https://docs.anthropic.com/en/docs/intro-to-prompting) for more details.",
            "examples": ["\n\nHuman: Hello, world!\n\nAssistant:"],
            "minLength": 1,
            "title": "Prompt",
            "type": "string"
          },
          "stop_sequences": {
            "description": "Sequences that will cause the model to stop generating.\n\nOur models stop on `\"\\n\\nHuman:\"`, and may include additional built-in stop sequences in the future. By providing the stop_sequences parameter, you may include additional strings that will cause the model to stop generating.",
            "items": {
              "type": "string"
            },
            "title": "Stop Sequences",
            "type": "array"
          },
          "stream": {
            "description": "Whether to incrementally stream the response using server-sent events.\n\nSee [streaming](https://docs.anthropic.com/en/api/streaming) for details.",
            "title": "Stream",
            "type": "boolean"
          },
          "temperature": {
            "description": "Amount of randomness injected into the response.\n\nDefaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0` for analytical / multiple choice, and closer to `1.0` for creative and generative tasks.\n\nNote that even with `temperature` of `0.0`, the results will not be fully deterministic.",
            "examples": [1],
            "maximum": 1,
            "minimum": 0,
            "title": "Temperature",
            "type": "number"
          },
          "top_k": {
            "description": "Only sample from the top K options for each subsequent token.\n\nUsed to remove \"long tail\" low probability responses. [Learn more technical details here](https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\nRecommended for advanced use cases only. You usually only need to use `temperature`.",
            "examples": [5],
            "minimum": 0,
            "title": "Top K",
            "type": "integer"
          },
          "top_p": {
            "description": "Use nucleus sampling.\n\nIn nucleus sampling, we compute the cumulative distribution over all the options for each subsequent token in decreasing probability order and cut it off once it reaches a particular probability specified by `top_p`. You should either alter `temperature` or `top_p`, but not both.\n\nRecommended for advanced use cases only. You usually only need to use `temperature`.",
            "examples": [0.7],
            "maximum": 1,
            "minimum": 0,
            "title": "Top P",
            "type": "number"
          }
        },
        "required": ["max_tokens_to_sample", "model", "prompt"],
        "title": "CompletionRequest",
        "type": "object"
      },
      "CompletionResponse": {
        "example": {
          "completion": " Hello! My name is Claude.",
          "id": "compl_018CKm6gsux7P8yMcwZbeCPw",
          "model": "claude-2.1",
          "stop_reason": "stop_sequence",
          "type": "completion"
        },
        "properties": {
          "completion": {
            "description": "The resulting completion up to and excluding the stop sequences.",
            "examples": [" Hello! My name is Claude."],
            "title": "Completion",
            "type": "string"
          },
          "id": {
            "description": "Unique object identifier.\n\nThe format and length of IDs may change over time.",
            "title": "Id",
            "type": "string"
          },
          "model": {
            "$ref": "#/components/schemas/Model"
          },
          "stop_reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The reason that we stopped.\n\nThis may be one the following values:\n* `\"stop_sequence\"`: we reached a stop sequence — either provided by you via the `stop_sequences` parameter, or a stop sequence built into the model\n* `\"max_tokens\"`: we exceeded `max_tokens_to_sample` or the model's maximum",
            "examples": ["stop_sequence"],
            "title": "Stop Reason"
          },
          "type": {
            "const": "completion",
            "default": "completion",
            "description": "Object type.\n\nFor Text Completions, this is always `\"completion\"`.",
            "enum": ["completion"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["completion", "id", "model", "stop_reason", "type"],
        "title": "CompletionResponse",
        "type": "object"
      },
      "ContentBlock": {
        "discriminator": {
          "mapping": {
            "redacted_thinking": "#/components/schemas/ResponseRedactedThinkingBlock",
            "server_tool_use": "#/components/schemas/ResponseServerToolUseBlock",
            "text": "#/components/schemas/ResponseTextBlock",
            "thinking": "#/components/schemas/ResponseThinkingBlock",
            "tool_use": "#/components/schemas/ResponseToolUseBlock",
            "web_search_tool_result": "#/components/schemas/ResponseWebSearchToolResultBlock"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ResponseTextBlock"
          },
          {
            "$ref": "#/components/schemas/ResponseThinkingBlock"
          },
          {
            "$ref": "#/components/schemas/ResponseRedactedThinkingBlock"
          },
          {
            "$ref": "#/components/schemas/ResponseToolUseBlock"
          },
          {
            "$ref": "#/components/schemas/ResponseServerToolUseBlock"
          },
          {
            "$ref": "#/components/schemas/ResponseWebSearchToolResultBlock"
          }
        ]
      },
      "ContentBlockDeltaEvent": {
        "properties": {
          "delta": {
            "discriminator": {
              "mapping": {
                "citations_delta": "#/components/schemas/CitationsDelta",
                "input_json_delta": "#/components/schemas/InputJsonContentBlockDelta",
                "signature_delta": "#/components/schemas/SignatureContentBlockDelta",
                "text_delta": "#/components/schemas/TextContentBlockDelta",
                "thinking_delta": "#/components/schemas/ThinkingContentBlockDelta"
              },
              "propertyName": "type"
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/TextContentBlockDelta"
              },
              {
                "$ref": "#/components/schemas/InputJsonContentBlockDelta"
              },
              {
                "$ref": "#/components/schemas/CitationsDelta"
              },
              {
                "$ref": "#/components/schemas/ThinkingContentBlockDelta"
              },
              {
                "$ref": "#/components/schemas/SignatureContentBlockDelta"
              }
            ],
            "title": "Delta"
          },
          "index": {
            "title": "Index",
            "type": "integer"
          },
          "type": {
            "const": "content_block_delta",
            "default": "content_block_delta",
            "enum": ["content_block_delta"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["delta", "index", "type"],
        "title": "ContentBlockDeltaEvent",
        "type": "object",
        "x-stainless-naming": {
          "go": {
            "model_name": "ContentBlockDeltaEvent"
          }
        }
      },
      "ContentBlockSource": {
        "additionalProperties": false,
        "properties": {
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "discriminator": {
                    "mapping": {
                      "image": "#/components/schemas/RequestImageBlock",
                      "text": "#/components/schemas/RequestTextBlock"
                    },
                    "propertyName": "type"
                  },
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/RequestTextBlock"
                    },
                    {
                      "$ref": "#/components/schemas/RequestImageBlock"
                    }
                  ],
                  "title": "content_block_source_content_item",
                  "x-stainless-naming": {
                    "go": {
                      "type_name": "ContentBlockSourceContentItem"
                    }
                  }
                },
                "title": "content_block_source_content",
                "type": "array"
              }
            ],
            "title": "Content"
          },
          "type": {
            "const": "content",
            "enum": ["content"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["content", "type"],
        "title": "ContentBlockSource",
        "type": "object"
      },
      "ContentBlockStartEvent": {
        "properties": {
          "content_block": {
            "discriminator": {
              "mapping": {
                "redacted_thinking": "#/components/schemas/ResponseRedactedThinkingBlock",
                "server_tool_use": "#/components/schemas/ResponseServerToolUseBlock",
                "text": "#/components/schemas/ResponseTextBlock",
                "thinking": "#/components/schemas/ResponseThinkingBlock",
                "tool_use": "#/components/schemas/ResponseToolUseBlock",
                "web_search_tool_result": "#/components/schemas/ResponseWebSearchToolResultBlock"
              },
              "propertyName": "type"
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/ResponseTextBlock"
              },
              {
                "$ref": "#/components/schemas/ResponseThinkingBlock"
              },
              {
                "$ref": "#/components/schemas/ResponseRedactedThinkingBlock"
              },
              {
                "$ref": "#/components/schemas/ResponseToolUseBlock"
              },
              {
                "$ref": "#/components/schemas/ResponseServerToolUseBlock"
              },
              {
                "$ref": "#/components/schemas/ResponseWebSearchToolResultBlock"
              }
            ],
            "title": "Content Block"
          },
          "index": {
            "title": "Index",
            "type": "integer"
          },
          "type": {
            "const": "content_block_start",
            "default": "content_block_start",
            "enum": ["content_block_start"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["content_block", "index", "type"],
        "title": "ContentBlockStartEvent",
        "type": "object",
        "x-stainless-naming": {
          "go": {
            "model_name": "ContentBlockStartEvent"
          }
        }
      },
      "ContentBlockStopEvent": {
        "properties": {
          "index": {
            "title": "Index",
            "type": "integer"
          },
          "type": {
            "const": "content_block_stop",
            "default": "content_block_stop",
            "enum": ["content_block_stop"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["index", "type"],
        "title": "ContentBlockStopEvent",
        "type": "object",
        "x-stainless-naming": {
          "go": {
            "model_name": "ContentBlockStopEvent"
          }
        }
      },
      "CountMessageTokensParams": {
        "additionalProperties": false,
        "examples": [
          {
            "messages": [
              {
                "content": "Hello, world",
                "role": "user"
              }
            ],
            "model": "claude-sonnet-4-20250514"
          }
        ],
        "properties": {
          "messages": {
            "description": "Input messages.\n\nOur models are trained to operate on alternating `user` and `assistant` conversational turns. When creating a new `Message`, you specify the prior conversational turns with the `messages` parameter, and the model then generates the next `Message` in the conversation. Consecutive `user` or `assistant` turns in your request will be combined into a single turn.\n\nEach input message must be an object with a `role` and `content`. You can specify a single `user`-role message, or you can include multiple `user` and `assistant` messages.\n\nIf the final message uses the `assistant` role, the response content will continue immediately from the content in that message. This can be used to constrain part of the model's response.\n\nExample with a single `user` message:\n\n```json\n[{\"role\": \"user\", \"content\": \"Hello, Claude\"}]\n```\n\nExample with multiple conversational turns:\n\n```json\n[\n  {\"role\": \"user\", \"content\": \"Hello there.\"},\n  {\"role\": \"assistant\", \"content\": \"Hi, I'm Claude. How can I help you?\"},\n  {\"role\": \"user\", \"content\": \"Can you explain LLMs in plain English?\"},\n]\n```\n\nExample with a partially-filled response from Claude:\n\n```json\n[\n  {\"role\": \"user\", \"content\": \"What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun\"},\n  {\"role\": \"assistant\", \"content\": \"The best answer is (\"},\n]\n```\n\nEach input message `content` may be either a single `string` or an array of content blocks, where each block has a specific `type`. Using a `string` for `content` is shorthand for an array of one content block of type `\"text\"`. The following input messages are equivalent:\n\n```json\n{\"role\": \"user\", \"content\": \"Hello, Claude\"}\n```\n\n```json\n{\"role\": \"user\", \"content\": [{\"type\": \"text\", \"text\": \"Hello, Claude\"}]}\n```\n\nSee [input examples](https://docs.anthropic.com/en/api/messages-examples).\n\nNote that if you want to include a [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use the top-level `system` parameter — there is no `\"system\"` role for input messages in the Messages API.\n\nThere is a limit of 100,000 messages in a single request.",
            "items": {
              "$ref": "#/components/schemas/InputMessage"
            },
            "title": "Messages",
            "type": "array"
          },
          "model": {
            "$ref": "#/components/schemas/Model"
          },
          "system": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "$ref": "#/components/schemas/RequestTextBlock"
                },
                "type": "array"
              }
            ],
            "description": "System prompt.\n\nA system prompt is a way of providing context and instructions to Claude, such as specifying a particular goal or role. See our [guide to system prompts](https://docs.anthropic.com/en/docs/system-prompts).",
            "examples": [
              [
                {
                  "text": "Today's date is 2024-06-01.",
                  "type": "text"
                }
              ],
              "Today's date is 2023-01-01."
            ],
            "title": "System"
          },
          "thinking": {
            "$ref": "#/components/schemas/ThinkingConfigParam"
          },
          "tool_choice": {
            "$ref": "#/components/schemas/ToolChoice"
          },
          "tools": {
            "description": "Definitions of tools that the model may use.\n\nIf you include `tools` in your API request, the model may return `tool_use` content blocks that represent the model's use of those tools. You can then run those tools using the tool input generated by the model and then optionally return results back to the model using `tool_result` content blocks.\n\nThere are two types of tools: **client tools** and **server tools**. The behavior described below applies to client tools. For [server tools](https://docs.anthropic.com/en/docs/agents-and-tools/tool-use/overview\\#server-tools), see their individual documentation as each has its own behavior (e.g., the [web search tool](https://docs.anthropic.com/en/docs/agents-and-tools/tool-use/web-search-tool)).\n\nEach tool definition includes:\n\n* `name`: Name of the tool.\n* `description`: Optional, but strongly-recommended description of the tool.\n* `input_schema`: [JSON schema](https://json-schema.org/draft/2020-12) for the tool `input` shape that the model will produce in `tool_use` output content blocks.\n\nFor example, if you defined `tools` as:\n\n```json\n[\n  {\n    \"name\": \"get_stock_price\",\n    \"description\": \"Get the current stock price for a given ticker symbol.\",\n    \"input_schema\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"ticker\": {\n          \"type\": \"string\",\n          \"description\": \"The stock ticker symbol, e.g. AAPL for Apple Inc.\"\n        }\n      },\n      \"required\": [\"ticker\"]\n    }\n  }\n]\n```\n\nAnd then asked the model \"What's the S&P 500 at today?\", the model might produce `tool_use` content blocks in the response like this:\n\n```json\n[\n  {\n    \"type\": \"tool_use\",\n    \"id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"name\": \"get_stock_price\",\n    \"input\": { \"ticker\": \"^GSPC\" }\n  }\n]\n```\n\nYou might then run your `get_stock_price` tool with `{\"ticker\": \"^GSPC\"}` as an input, and return the following back to the model in a subsequent `user` message:\n\n```json\n[\n  {\n    \"type\": \"tool_result\",\n    \"tool_use_id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"content\": \"259.75 USD\"\n  }\n]\n```\n\nTools can be used for workflows that include running client-side tools and functions, or more generally whenever you want the model to produce a particular JSON structure of output.\n\nSee our [guide](https://docs.anthropic.com/en/docs/tool-use) for more details.",
            "examples": [
              {
                "description": "Get the current weather in a given location",
                "input_schema": {
                  "properties": {
                    "location": {
                      "description": "The city and state, e.g. San Francisco, CA",
                      "type": "string"
                    },
                    "unit": {
                      "description": "Unit for the output - one of (celsius, fahrenheit)",
                      "type": "string"
                    }
                  },
                  "required": ["location"],
                  "type": "object"
                },
                "name": "get_weather"
              }
            ],
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Tool"
                },
                {
                  "$ref": "#/components/schemas/BashTool_20250124"
                },
                {
                  "$ref": "#/components/schemas/TextEditor_20250124"
                },
                {
                  "$ref": "#/components/schemas/TextEditor_20250429"
                },
                {
                  "$ref": "#/components/schemas/TextEditor_20250728"
                },
                {
                  "$ref": "#/components/schemas/WebSearchTool_20250305"
                }
              ]
            },
            "title": "Tools",
            "type": "array"
          }
        },
        "required": ["messages", "model"],
        "title": "CountMessageTokensParams",
        "type": "object"
      },
      "CountMessageTokensResponse": {
        "examples": [
          {
            "input_tokens": 2095
          }
        ],
        "properties": {
          "input_tokens": {
            "description": "The total number of tokens across the provided list of messages, system prompt, and tools.",
            "examples": [2095],
            "title": "Input Tokens",
            "type": "integer"
          }
        },
        "required": ["input_tokens"],
        "title": "CountMessageTokensResponse",
        "type": "object"
      },
      "CreateMessageBatchParams": {
        "additionalProperties": false,
        "properties": {
          "requests": {
            "description": "List of requests for prompt completion. Each is an individual request to create a Message.",
            "items": {
              "$ref": "#/components/schemas/MessageBatchIndividualRequestParams"
            },
            "maxItems": 10000,
            "minItems": 1,
            "title": "Requests",
            "type": "array"
          }
        },
        "required": ["requests"],
        "title": "CreateMessageBatchParams",
        "type": "object"
      },
      "CreateMessageParams": {
        "additionalProperties": false,
        "example": {
          "max_tokens": 1024,
          "messages": [
            {
              "content": "Hello, world",
              "role": "user"
            }
          ],
          "model": "claude-sonnet-4-20250514"
        },
        "properties": {
          "max_tokens": {
            "description": "The maximum number of tokens to generate before stopping.\n\nNote that our models may stop _before_ reaching this maximum. This parameter only specifies the absolute maximum number of tokens to generate.\n\nDifferent models have different maximum values for this parameter.  See [models](https://docs.anthropic.com/en/docs/models-overview) for details.",
            "examples": [1024],
            "minimum": 1,
            "title": "Max Tokens",
            "type": "integer"
          },
          "messages": {
            "description": "Input messages.\n\nOur models are trained to operate on alternating `user` and `assistant` conversational turns. When creating a new `Message`, you specify the prior conversational turns with the `messages` parameter, and the model then generates the next `Message` in the conversation. Consecutive `user` or `assistant` turns in your request will be combined into a single turn.\n\nEach input message must be an object with a `role` and `content`. You can specify a single `user`-role message, or you can include multiple `user` and `assistant` messages.\n\nIf the final message uses the `assistant` role, the response content will continue immediately from the content in that message. This can be used to constrain part of the model's response.\n\nExample with a single `user` message:\n\n```json\n[{\"role\": \"user\", \"content\": \"Hello, Claude\"}]\n```\n\nExample with multiple conversational turns:\n\n```json\n[\n  {\"role\": \"user\", \"content\": \"Hello there.\"},\n  {\"role\": \"assistant\", \"content\": \"Hi, I'm Claude. How can I help you?\"},\n  {\"role\": \"user\", \"content\": \"Can you explain LLMs in plain English?\"},\n]\n```\n\nExample with a partially-filled response from Claude:\n\n```json\n[\n  {\"role\": \"user\", \"content\": \"What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun\"},\n  {\"role\": \"assistant\", \"content\": \"The best answer is (\"},\n]\n```\n\nEach input message `content` may be either a single `string` or an array of content blocks, where each block has a specific `type`. Using a `string` for `content` is shorthand for an array of one content block of type `\"text\"`. The following input messages are equivalent:\n\n```json\n{\"role\": \"user\", \"content\": \"Hello, Claude\"}\n```\n\n```json\n{\"role\": \"user\", \"content\": [{\"type\": \"text\", \"text\": \"Hello, Claude\"}]}\n```\n\nSee [input examples](https://docs.anthropic.com/en/api/messages-examples).\n\nNote that if you want to include a [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use the top-level `system` parameter — there is no `\"system\"` role for input messages in the Messages API.\n\nThere is a limit of 100,000 messages in a single request.",
            "items": {
              "$ref": "#/components/schemas/InputMessage"
            },
            "title": "Messages",
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata",
            "description": "An object describing metadata about the request."
          },
          "model": {
            "$ref": "#/components/schemas/Model"
          },
          "service_tier": {
            "description": "Determines whether to use priority capacity (if available) or standard capacity for this request.\n\nAnthropic offers different levels of service for your API requests. See [service-tiers](https://docs.anthropic.com/en/api/service-tiers) for details.",
            "enum": ["auto", "standard_only"],
            "title": "Service Tier",
            "type": "string"
          },
          "stop_sequences": {
            "description": "Custom text sequences that will cause the model to stop generating.\n\nOur models will normally stop when they have naturally completed their turn, which will result in a response `stop_reason` of `\"end_turn\"`.\n\nIf you want the model to stop generating when it encounters custom strings of text, you can use the `stop_sequences` parameter. If the model encounters one of the custom sequences, the response `stop_reason` value will be `\"stop_sequence\"` and the response `stop_sequence` value will contain the matched stop sequence.",
            "items": {
              "type": "string"
            },
            "title": "Stop Sequences",
            "type": "array"
          },
          "stream": {
            "description": "Whether to incrementally stream the response using server-sent events.\n\nSee [streaming](https://docs.anthropic.com/en/api/messages-streaming) for details.",
            "title": "Stream",
            "type": "boolean"
          },
          "system": {
            "anyOf": [
              {
                "type": "string",
                "x-stainless-skip": ["go", "cli"]
              },
              {
                "items": {
                  "$ref": "#/components/schemas/RequestTextBlock"
                },
                "type": "array"
              }
            ],
            "description": "System prompt.\n\nA system prompt is a way of providing context and instructions to Claude, such as specifying a particular goal or role. See our [guide to system prompts](https://docs.anthropic.com/en/docs/system-prompts).",
            "examples": [
              [
                {
                  "text": "Today's date is 2024-06-01.",
                  "type": "text"
                }
              ],
              "Today's date is 2023-01-01."
            ],
            "title": "System"
          },
          "temperature": {
            "description": "Amount of randomness injected into the response.\n\nDefaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0` for analytical / multiple choice, and closer to `1.0` for creative and generative tasks.\n\nNote that even with `temperature` of `0.0`, the results will not be fully deterministic.",
            "examples": [1],
            "maximum": 1,
            "minimum": 0,
            "title": "Temperature",
            "type": "number"
          },
          "thinking": {
            "$ref": "#/components/schemas/ThinkingConfigParam"
          },
          "tool_choice": {
            "$ref": "#/components/schemas/ToolChoice"
          },
          "tools": {
            "description": "Definitions of tools that the model may use.\n\nIf you include `tools` in your API request, the model may return `tool_use` content blocks that represent the model's use of those tools. You can then run those tools using the tool input generated by the model and then optionally return results back to the model using `tool_result` content blocks.\n\nThere are two types of tools: **client tools** and **server tools**. The behavior described below applies to client tools. For [server tools](https://docs.anthropic.com/en/docs/agents-and-tools/tool-use/overview\\#server-tools), see their individual documentation as each has its own behavior (e.g., the [web search tool](https://docs.anthropic.com/en/docs/agents-and-tools/tool-use/web-search-tool)).\n\nEach tool definition includes:\n\n* `name`: Name of the tool.\n* `description`: Optional, but strongly-recommended description of the tool.\n* `input_schema`: [JSON schema](https://json-schema.org/draft/2020-12) for the tool `input` shape that the model will produce in `tool_use` output content blocks.\n\nFor example, if you defined `tools` as:\n\n```json\n[\n  {\n    \"name\": \"get_stock_price\",\n    \"description\": \"Get the current stock price for a given ticker symbol.\",\n    \"input_schema\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"ticker\": {\n          \"type\": \"string\",\n          \"description\": \"The stock ticker symbol, e.g. AAPL for Apple Inc.\"\n        }\n      },\n      \"required\": [\"ticker\"]\n    }\n  }\n]\n```\n\nAnd then asked the model \"What's the S&P 500 at today?\", the model might produce `tool_use` content blocks in the response like this:\n\n```json\n[\n  {\n    \"type\": \"tool_use\",\n    \"id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"name\": \"get_stock_price\",\n    \"input\": { \"ticker\": \"^GSPC\" }\n  }\n]\n```\n\nYou might then run your `get_stock_price` tool with `{\"ticker\": \"^GSPC\"}` as an input, and return the following back to the model in a subsequent `user` message:\n\n```json\n[\n  {\n    \"type\": \"tool_result\",\n    \"tool_use_id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"content\": \"259.75 USD\"\n  }\n]\n```\n\nTools can be used for workflows that include running client-side tools and functions, or more generally whenever you want the model to produce a particular JSON structure of output.\n\nSee our [guide](https://docs.anthropic.com/en/docs/tool-use) for more details.",
            "examples": [
              {
                "description": "Get the current weather in a given location",
                "input_schema": {
                  "properties": {
                    "location": {
                      "description": "The city and state, e.g. San Francisco, CA",
                      "type": "string"
                    },
                    "unit": {
                      "description": "Unit for the output - one of (celsius, fahrenheit)",
                      "type": "string"
                    }
                  },
                  "required": ["location"],
                  "type": "object"
                },
                "name": "get_weather"
              }
            ],
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Tool"
                },
                {
                  "$ref": "#/components/schemas/BashTool_20250124"
                },
                {
                  "$ref": "#/components/schemas/TextEditor_20250124"
                },
                {
                  "$ref": "#/components/schemas/TextEditor_20250429"
                },
                {
                  "$ref": "#/components/schemas/TextEditor_20250728"
                },
                {
                  "$ref": "#/components/schemas/WebSearchTool_20250305"
                }
              ]
            },
            "title": "Tools",
            "type": "array"
          },
          "top_k": {
            "description": "Only sample from the top K options for each subsequent token.\n\nUsed to remove \"long tail\" low probability responses. [Learn more technical details here](https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\nRecommended for advanced use cases only. You usually only need to use `temperature`.",
            "examples": [5],
            "minimum": 0,
            "title": "Top K",
            "type": "integer"
          },
          "top_p": {
            "description": "Use nucleus sampling.\n\nIn nucleus sampling, we compute the cumulative distribution over all the options for each subsequent token in decreasing probability order and cut it off once it reaches a particular probability specified by `top_p`. You should either alter `temperature` or `top_p`, but not both.\n\nRecommended for advanced use cases only. You usually only need to use `temperature`.",
            "examples": [0.7],
            "maximum": 1,
            "minimum": 0,
            "title": "Top P",
            "type": "number"
          }
        },
        "required": ["model", "messages", "max_tokens"],
        "title": "CreateMessageParams",
        "type": "object"
      },
      "CreateMessageParamsWithoutStream": {
        "additionalProperties": false,
        "example": {
          "max_tokens": 1024,
          "messages": [
            {
              "content": "Hello, world",
              "role": "user"
            }
          ],
          "model": "claude-sonnet-4-20250514"
        },
        "properties": {
          "max_tokens": {
            "description": "The maximum number of tokens to generate before stopping.\n\nNote that our models may stop _before_ reaching this maximum. This parameter only specifies the absolute maximum number of tokens to generate.\n\nDifferent models have different maximum values for this parameter.  See [models](https://docs.anthropic.com/en/docs/models-overview) for details.",
            "examples": [1024],
            "minimum": 1,
            "title": "Max Tokens",
            "type": "integer"
          },
          "messages": {
            "description": "Input messages.\n\nOur models are trained to operate on alternating `user` and `assistant` conversational turns. When creating a new `Message`, you specify the prior conversational turns with the `messages` parameter, and the model then generates the next `Message` in the conversation. Consecutive `user` or `assistant` turns in your request will be combined into a single turn.\n\nEach input message must be an object with a `role` and `content`. You can specify a single `user`-role message, or you can include multiple `user` and `assistant` messages.\n\nIf the final message uses the `assistant` role, the response content will continue immediately from the content in that message. This can be used to constrain part of the model's response.\n\nExample with a single `user` message:\n\n```json\n[{\"role\": \"user\", \"content\": \"Hello, Claude\"}]\n```\n\nExample with multiple conversational turns:\n\n```json\n[\n  {\"role\": \"user\", \"content\": \"Hello there.\"},\n  {\"role\": \"assistant\", \"content\": \"Hi, I'm Claude. How can I help you?\"},\n  {\"role\": \"user\", \"content\": \"Can you explain LLMs in plain English?\"},\n]\n```\n\nExample with a partially-filled response from Claude:\n\n```json\n[\n  {\"role\": \"user\", \"content\": \"What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun\"},\n  {\"role\": \"assistant\", \"content\": \"The best answer is (\"},\n]\n```\n\nEach input message `content` may be either a single `string` or an array of content blocks, where each block has a specific `type`. Using a `string` for `content` is shorthand for an array of one content block of type `\"text\"`. The following input messages are equivalent:\n\n```json\n{\"role\": \"user\", \"content\": \"Hello, Claude\"}\n```\n\n```json\n{\"role\": \"user\", \"content\": [{\"type\": \"text\", \"text\": \"Hello, Claude\"}]}\n```\n\nSee [input examples](https://docs.anthropic.com/en/api/messages-examples).\n\nNote that if you want to include a [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use the top-level `system` parameter — there is no `\"system\"` role for input messages in the Messages API.\n\nThere is a limit of 100,000 messages in a single request.",
            "items": {
              "$ref": "#/components/schemas/InputMessage"
            },
            "title": "Messages",
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata",
            "description": "An object describing metadata about the request."
          },
          "model": {
            "$ref": "#/components/schemas/Model"
          },
          "service_tier": {
            "description": "Determines whether to use priority capacity (if available) or standard capacity for this request.\n\nAnthropic offers different levels of service for your API requests. See [service-tiers](https://docs.anthropic.com/en/api/service-tiers) for details.",
            "enum": ["auto", "standard_only"],
            "title": "Service Tier",
            "type": "string"
          },
          "stop_sequences": {
            "description": "Custom text sequences that will cause the model to stop generating.\n\nOur models will normally stop when they have naturally completed their turn, which will result in a response `stop_reason` of `\"end_turn\"`.\n\nIf you want the model to stop generating when it encounters custom strings of text, you can use the `stop_sequences` parameter. If the model encounters one of the custom sequences, the response `stop_reason` value will be `\"stop_sequence\"` and the response `stop_sequence` value will contain the matched stop sequence.",
            "items": {
              "type": "string"
            },
            "title": "Stop Sequences",
            "type": "array"
          },
          "system": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "$ref": "#/components/schemas/RequestTextBlock"
                },
                "type": "array"
              }
            ],
            "description": "System prompt.\n\nA system prompt is a way of providing context and instructions to Claude, such as specifying a particular goal or role. See our [guide to system prompts](https://docs.anthropic.com/en/docs/system-prompts).",
            "examples": [
              [
                {
                  "text": "Today's date is 2024-06-01.",
                  "type": "text"
                }
              ],
              "Today's date is 2023-01-01."
            ],
            "title": "System"
          },
          "temperature": {
            "description": "Amount of randomness injected into the response.\n\nDefaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0` for analytical / multiple choice, and closer to `1.0` for creative and generative tasks.\n\nNote that even with `temperature` of `0.0`, the results will not be fully deterministic.",
            "examples": [1],
            "maximum": 1,
            "minimum": 0,
            "title": "Temperature",
            "type": "number"
          },
          "thinking": {
            "$ref": "#/components/schemas/ThinkingConfigParam"
          },
          "tool_choice": {
            "$ref": "#/components/schemas/ToolChoice"
          },
          "tools": {
            "description": "Definitions of tools that the model may use.\n\nIf you include `tools` in your API request, the model may return `tool_use` content blocks that represent the model's use of those tools. You can then run those tools using the tool input generated by the model and then optionally return results back to the model using `tool_result` content blocks.\n\nThere are two types of tools: **client tools** and **server tools**. The behavior described below applies to client tools. For [server tools](https://docs.anthropic.com/en/docs/agents-and-tools/tool-use/overview\\#server-tools), see their individual documentation as each has its own behavior (e.g., the [web search tool](https://docs.anthropic.com/en/docs/agents-and-tools/tool-use/web-search-tool)).\n\nEach tool definition includes:\n\n* `name`: Name of the tool.\n* `description`: Optional, but strongly-recommended description of the tool.\n* `input_schema`: [JSON schema](https://json-schema.org/draft/2020-12) for the tool `input` shape that the model will produce in `tool_use` output content blocks.\n\nFor example, if you defined `tools` as:\n\n```json\n[\n  {\n    \"name\": \"get_stock_price\",\n    \"description\": \"Get the current stock price for a given ticker symbol.\",\n    \"input_schema\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"ticker\": {\n          \"type\": \"string\",\n          \"description\": \"The stock ticker symbol, e.g. AAPL for Apple Inc.\"\n        }\n      },\n      \"required\": [\"ticker\"]\n    }\n  }\n]\n```\n\nAnd then asked the model \"What's the S&P 500 at today?\", the model might produce `tool_use` content blocks in the response like this:\n\n```json\n[\n  {\n    \"type\": \"tool_use\",\n    \"id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"name\": \"get_stock_price\",\n    \"input\": { \"ticker\": \"^GSPC\" }\n  }\n]\n```\n\nYou might then run your `get_stock_price` tool with `{\"ticker\": \"^GSPC\"}` as an input, and return the following back to the model in a subsequent `user` message:\n\n```json\n[\n  {\n    \"type\": \"tool_result\",\n    \"tool_use_id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"content\": \"259.75 USD\"\n  }\n]\n```\n\nTools can be used for workflows that include running client-side tools and functions, or more generally whenever you want the model to produce a particular JSON structure of output.\n\nSee our [guide](https://docs.anthropic.com/en/docs/tool-use) for more details.",
            "examples": [
              {
                "description": "Get the current weather in a given location",
                "input_schema": {
                  "properties": {
                    "location": {
                      "description": "The city and state, e.g. San Francisco, CA",
                      "type": "string"
                    },
                    "unit": {
                      "description": "Unit for the output - one of (celsius, fahrenheit)",
                      "type": "string"
                    }
                  },
                  "required": ["location"],
                  "type": "object"
                },
                "name": "get_weather"
              }
            ],
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Tool"
                },
                {
                  "$ref": "#/components/schemas/BashTool_20250124"
                },
                {
                  "$ref": "#/components/schemas/TextEditor_20250124"
                },
                {
                  "$ref": "#/components/schemas/TextEditor_20250429"
                },
                {
                  "$ref": "#/components/schemas/TextEditor_20250728"
                },
                {
                  "$ref": "#/components/schemas/WebSearchTool_20250305"
                }
              ]
            },
            "title": "Tools",
            "type": "array"
          },
          "top_k": {
            "description": "Only sample from the top K options for each subsequent token.\n\nUsed to remove \"long tail\" low probability responses. [Learn more technical details here](https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\nRecommended for advanced use cases only. You usually only need to use `temperature`.",
            "examples": [5],
            "minimum": 0,
            "title": "Top K",
            "type": "integer"
          },
          "top_p": {
            "description": "Use nucleus sampling.\n\nIn nucleus sampling, we compute the cumulative distribution over all the options for each subsequent token in decreasing probability order and cut it off once it reaches a particular probability specified by `top_p`. You should either alter `temperature` or `top_p`, but not both.\n\nRecommended for advanced use cases only. You usually only need to use `temperature`.",
            "examples": [0.7],
            "maximum": 1,
            "minimum": 0,
            "title": "Top P",
            "type": "number"
          }
        },
        "required": ["model", "messages", "max_tokens"],
        "title": "CreateMessageParams",
        "type": "object"
      },
      "DeleteMessageBatchResponse": {
        "properties": {
          "id": {
            "description": "ID of the Message Batch.",
            "examples": ["msgbatch_013Zva2CMHLNnXjNJJKqJ2EF"],
            "title": "Id",
            "type": "string"
          },
          "type": {
            "const": "message_batch_deleted",
            "default": "message_batch_deleted",
            "description": "Deleted object type.\n\nFor Message Batches, this is always `\"message_batch_deleted\"`.",
            "enum": ["message_batch_deleted"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["id", "type"],
        "title": "DeleteMessageBatchResponse",
        "type": "object"
      },
      "ErrorResponse": {
        "properties": {
          "error": {
            "discriminator": {
              "mapping": {
                "api_error": "#/components/schemas/APIError",
                "authentication_error": "#/components/schemas/AuthenticationError",
                "billing_error": "#/components/schemas/BillingError",
                "invalid_request_error": "#/components/schemas/InvalidRequestError",
                "not_found_error": "#/components/schemas/NotFoundError",
                "overloaded_error": "#/components/schemas/OverloadedError",
                "permission_error": "#/components/schemas/PermissionError",
                "rate_limit_error": "#/components/schemas/RateLimitError",
                "timeout_error": "#/components/schemas/GatewayTimeoutError"
              },
              "propertyName": "type"
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/InvalidRequestError"
              },
              {
                "$ref": "#/components/schemas/AuthenticationError"
              },
              {
                "$ref": "#/components/schemas/BillingError"
              },
              {
                "$ref": "#/components/schemas/PermissionError"
              },
              {
                "$ref": "#/components/schemas/NotFoundError"
              },
              {
                "$ref": "#/components/schemas/RateLimitError"
              },
              {
                "$ref": "#/components/schemas/GatewayTimeoutError"
              },
              {
                "$ref": "#/components/schemas/APIError"
              },
              {
                "$ref": "#/components/schemas/OverloadedError"
              }
            ],
            "title": "Error"
          },
          "request_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Request Id"
          },
          "type": {
            "const": "error",
            "default": "error",
            "enum": ["error"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["error", "request_id", "type"],
        "title": "ErrorResponse",
        "type": "object"
      },
      "ErroredResult": {
        "properties": {
          "error": {
            "$ref": "#/components/schemas/ErrorResponse"
          },
          "type": {
            "const": "errored",
            "default": "errored",
            "enum": ["errored"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["error", "type"],
        "title": "ErroredResult",
        "type": "object"
      },
      "ExpiredResult": {
        "properties": {
          "type": {
            "const": "expired",
            "default": "expired",
            "enum": ["expired"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "ExpiredResult",
        "type": "object"
      },
      "FileDeleteResponse": {
        "properties": {
          "id": {
            "description": "ID of the deleted file.",
            "title": "Id",
            "type": "string"
          },
          "type": {
            "const": "file_deleted",
            "default": "file_deleted",
            "description": "Deleted object type.\n\nFor file deletion, this is always `\"file_deleted\"`.",
            "enum": ["file_deleted"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["id"],
        "title": "FileDeleteResponse",
        "type": "object"
      },
      "FileListResponse": {
        "properties": {
          "data": {
            "description": "List of file metadata objects.",
            "items": {
              "$ref": "#/components/schemas/FileMetadataSchema"
            },
            "title": "Data",
            "type": "array"
          },
          "first_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "ID of the first file in this page of results.",
            "title": "First Id"
          },
          "has_more": {
            "default": false,
            "description": "Whether there are more results available.",
            "title": "Has More",
            "type": "boolean"
          },
          "last_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "ID of the last file in this page of results.",
            "title": "Last Id"
          }
        },
        "required": ["data"],
        "title": "FileListResponse",
        "type": "object"
      },
      "FileMetadataSchema": {
        "properties": {
          "created_at": {
            "description": "RFC 3339 datetime string representing when the file was created.",
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "downloadable": {
            "default": false,
            "description": "Whether the file can be downloaded.",
            "title": "Downloadable",
            "type": "boolean"
          },
          "filename": {
            "description": "Original filename of the uploaded file.",
            "maxLength": 500,
            "minLength": 1,
            "title": "Filename",
            "type": "string"
          },
          "id": {
            "description": "Unique object identifier.\n\nThe format and length of IDs may change over time.",
            "title": "Id",
            "type": "string"
          },
          "mime_type": {
            "description": "MIME type of the file.",
            "maxLength": 255,
            "minLength": 1,
            "title": "Mime Type",
            "type": "string"
          },
          "size_bytes": {
            "description": "Size of the file in bytes.",
            "minimum": 0,
            "title": "Size Bytes",
            "type": "integer"
          },
          "type": {
            "const": "file",
            "description": "Object type.\n\nFor files, this is always `\"file\"`.",
            "enum": ["file"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "created_at",
          "filename",
          "id",
          "mime_type",
          "size_bytes",
          "type"
        ],
        "title": "FileMetadataSchema",
        "type": "object"
      },
      "GatewayTimeoutError": {
        "properties": {
          "message": {
            "default": "Request timeout",
            "title": "Message",
            "type": "string"
          },
          "type": {
            "const": "timeout_error",
            "default": "timeout_error",
            "enum": ["timeout_error"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["message", "type"],
        "title": "GatewayTimeoutError",
        "type": "object"
      },
      "InputContentBlock": {
        "discriminator": {
          "mapping": {
            "document": "#/components/schemas/RequestDocumentBlock",
            "image": "#/components/schemas/RequestImageBlock",
            "redacted_thinking": "#/components/schemas/RequestRedactedThinkingBlock",
            "search_result": "#/components/schemas/RequestSearchResultBlock",
            "server_tool_use": "#/components/schemas/RequestServerToolUseBlock",
            "text": "#/components/schemas/RequestTextBlock",
            "thinking": "#/components/schemas/RequestThinkingBlock",
            "tool_result": "#/components/schemas/RequestToolResultBlock",
            "tool_use": "#/components/schemas/RequestToolUseBlock",
            "web_search_tool_result": "#/components/schemas/RequestWebSearchToolResultBlock"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/RequestTextBlock",
            "description": "Regular text content."
          },
          {
            "$ref": "#/components/schemas/RequestImageBlock",
            "description": "Image content specified directly as base64 data or as a reference via a URL."
          },
          {
            "$ref": "#/components/schemas/RequestDocumentBlock",
            "description": "Document content, either specified directly as base64 data, as text, or as a reference via a URL."
          },
          {
            "$ref": "#/components/schemas/RequestSearchResultBlock",
            "description": "A search result block containing source, title, and content from search operations."
          },
          {
            "$ref": "#/components/schemas/RequestThinkingBlock",
            "description": "A block specifying internal thinking by the model."
          },
          {
            "$ref": "#/components/schemas/RequestRedactedThinkingBlock",
            "description": "A block specifying internal, redacted thinking by the model."
          },
          {
            "$ref": "#/components/schemas/RequestToolUseBlock",
            "description": "A block indicating a tool use by the model."
          },
          {
            "$ref": "#/components/schemas/RequestToolResultBlock",
            "description": "A block specifying the results of a tool use by the model."
          },
          {
            "$ref": "#/components/schemas/RequestServerToolUseBlock"
          },
          {
            "$ref": "#/components/schemas/RequestWebSearchToolResultBlock"
          }
        ],
        "x-stainless-go-variant-constructor": {
          "naming": "new_{variant}_block"
        },
        "x-stainless-python-extend-union": ["ContentBlock"],
        "x-stainless-python-extend-union-imports": [
          "from .content_block import ContentBlock"
        ]
      },
      "InputJsonContentBlockDelta": {
        "properties": {
          "partial_json": {
            "title": "Partial Json",
            "type": "string"
          },
          "type": {
            "const": "input_json_delta",
            "default": "input_json_delta",
            "enum": ["input_json_delta"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["partial_json", "type"],
        "title": "InputJsonContentBlockDelta",
        "type": "object"
      },
      "InputMessage": {
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "role"
        },
        "properties": {
          "content": {
            "anyOf": [
              {
                "type": "string",
                "x-stainless-skip": ["go", "cli"]
              },
              {
                "example": [
                  {
                    "text": "What is a quaternion?",
                    "type": "text"
                  }
                ],
                "items": {
                  "$ref": "#/components/schemas/InputContentBlock"
                },
                "type": "array"
              }
            ],
            "title": "Content"
          },
          "role": {
            "enum": ["user", "assistant"],
            "title": "Role",
            "type": "string"
          }
        },
        "required": ["content", "role"],
        "title": "InputMessage",
        "type": "object"
      },
      "InputSchema": {
        "additionalProperties": true,
        "properties": {
          "properties": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Properties"
          },
          "required": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Required"
          },
          "type": {
            "const": "object",
            "enum": ["object"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "InputSchema",
        "type": "object"
      },
      "InvalidRequestError": {
        "properties": {
          "message": {
            "default": "Invalid request",
            "title": "Message",
            "type": "string"
          },
          "type": {
            "const": "invalid_request_error",
            "default": "invalid_request_error",
            "enum": ["invalid_request_error"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["message", "type"],
        "title": "InvalidRequestError",
        "type": "object"
      },
      "ListResponse_MessageBatch_": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/MessageBatch"
            },
            "title": "Data",
            "type": "array"
          },
          "first_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "First ID in the `data` list. Can be used as the `before_id` for the previous page.",
            "title": "First Id"
          },
          "has_more": {
            "description": "Indicates if there are more results in the requested page direction.",
            "title": "Has More",
            "type": "boolean"
          },
          "last_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Last ID in the `data` list. Can be used as the `after_id` for the next page.",
            "title": "Last Id"
          }
        },
        "required": ["data", "first_id", "has_more", "last_id"],
        "title": "ListResponse[MessageBatch]",
        "type": "object"
      },
      "ListResponse_ModelInfo_": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ModelInfo"
            },
            "title": "Data",
            "type": "array"
          },
          "first_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "First ID in the `data` list. Can be used as the `before_id` for the previous page.",
            "title": "First Id"
          },
          "has_more": {
            "description": "Indicates if there are more results in the requested page direction.",
            "title": "Has More",
            "type": "boolean"
          },
          "last_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Last ID in the `data` list. Can be used as the `after_id` for the next page.",
            "title": "Last Id"
          }
        },
        "required": ["data", "first_id", "has_more", "last_id"],
        "title": "ListResponse[ModelInfo]",
        "type": "object"
      },
      "Message": {
        "examples": [
          {
            "content": [
              {
                "citations": null,
                "text": "Hi! My name is Claude.",
                "type": "text"
              }
            ],
            "id": "msg_013Zva2CMHLNnXjNJJKqJ2EF",
            "model": "claude-sonnet-4-20250514",
            "role": "assistant",
            "stop_reason": "end_turn",
            "stop_sequence": null,
            "type": "message",
            "usage": {
              "input_tokens": 2095,
              "output_tokens": 503
            }
          }
        ],
        "properties": {
          "content": {
            "description": "Content generated by the model.\n\nThis is an array of content blocks, each of which has a `type` that determines its shape.\n\nExample:\n\n```json\n[{\"type\": \"text\", \"text\": \"Hi, I'm Claude.\"}]\n```\n\nIf the request input `messages` ended with an `assistant` turn, then the response `content` will continue directly from that last turn. You can use this to constrain the model's output.\n\nFor example, if the input `messages` were:\n```json\n[\n  {\"role\": \"user\", \"content\": \"What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun\"},\n  {\"role\": \"assistant\", \"content\": \"The best answer is (\"}\n]\n```\n\nThen the response `content` might be:\n\n```json\n[{\"type\": \"text\", \"text\": \"B)\"}]\n```",
            "examples": [
              [
                {
                  "citations": null,
                  "text": "Hi! My name is Claude.",
                  "type": "text"
                }
              ]
            ],
            "items": {
              "$ref": "#/components/schemas/ContentBlock"
            },
            "title": "Content",
            "type": "array"
          },
          "id": {
            "description": "Unique object identifier.\n\nThe format and length of IDs may change over time.",
            "examples": ["msg_013Zva2CMHLNnXjNJJKqJ2EF"],
            "title": "Id",
            "type": "string"
          },
          "model": {
            "$ref": "#/components/schemas/Model"
          },
          "role": {
            "const": "assistant",
            "default": "assistant",
            "description": "Conversational role of the generated message.\n\nThis will always be `\"assistant\"`.",
            "enum": ["assistant"],
            "title": "Role",
            "type": "string"
          },
          "stop_reason": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/StopReason"
              },
              {
                "type": "null"
              }
            ],
            "description": "The reason that we stopped.\n\nThis may be one the following values:\n* `\"end_turn\"`: the model reached a natural stopping point\n* `\"max_tokens\"`: we exceeded the requested `max_tokens` or the model's maximum\n* `\"stop_sequence\"`: one of your provided custom `stop_sequences` was generated\n* `\"tool_use\"`: the model invoked one or more tools\n* `\"pause_turn\"`: we paused a long-running turn. You may provide the response back as-is in a subsequent request to let the model continue.\n* `\"refusal\"`: when streaming classifiers intervene to handle potential policy violations\n\nIn non-streaming mode this value is always non-null. In streaming mode, it is null in the `message_start` event and non-null otherwise.",
            "title": "Stop Reason"
          },
          "stop_sequence": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Which custom stop sequence was generated, if any.\n\nThis value will be a non-null string if one of your custom stop sequences was generated.",
            "title": "Stop Sequence"
          },
          "type": {
            "const": "message",
            "default": "message",
            "description": "Object type.\n\nFor Messages, this is always `\"message\"`.",
            "enum": ["message"],
            "title": "Type",
            "type": "string"
          },
          "usage": {
            "$ref": "#/components/schemas/Usage",
            "description": "Billing and rate-limit usage.\n\nAnthropic's API bills and rate-limits by token counts, as tokens represent the underlying cost to our systems.\n\nUnder the hood, the API transforms requests into a format suitable for the model. The model's output then goes through a parsing stage before becoming an API response. As a result, the token counts in `usage` will not match one-to-one with the exact visible content of an API request or response.\n\nFor example, `output_tokens` will be non-zero, even for an empty string response from Claude.\n\nTotal input tokens in a request is the summation of `input_tokens`, `cache_creation_input_tokens`, and `cache_read_input_tokens`.",
            "examples": [
              {
                "input_tokens": 2095,
                "output_tokens": 503
              }
            ]
          }
        },
        "required": [
          "id",
          "type",
          "role",
          "content",
          "model",
          "stop_reason",
          "stop_sequence",
          "usage"
        ],
        "title": "Message",
        "type": "object",
        "x-stainless-python-custom-imports": [
          "from .content_block import ContentBlock as ContentBlock"
        ]
      },
      "MessageBatch": {
        "properties": {
          "archived_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "RFC 3339 datetime string representing the time at which the Message Batch was archived and its results became unavailable.",
            "examples": ["2024-08-20T18:37:24.100435Z"],
            "title": "Archived At"
          },
          "cancel_initiated_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "RFC 3339 datetime string representing the time at which cancellation was initiated for the Message Batch. Specified only if cancellation was initiated.",
            "examples": ["2024-08-20T18:37:24.100435Z"],
            "title": "Cancel Initiated At"
          },
          "created_at": {
            "description": "RFC 3339 datetime string representing the time at which the Message Batch was created.",
            "examples": ["2024-08-20T18:37:24.100435Z"],
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "ended_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "RFC 3339 datetime string representing the time at which processing for the Message Batch ended. Specified only once processing ends.\n\nProcessing ends when every request in a Message Batch has either succeeded, errored, canceled, or expired.",
            "examples": ["2024-08-20T18:37:24.100435Z"],
            "title": "Ended At"
          },
          "expires_at": {
            "description": "RFC 3339 datetime string representing the time at which the Message Batch will expire and end processing, which is 24 hours after creation.",
            "examples": ["2024-08-20T18:37:24.100435Z"],
            "format": "date-time",
            "title": "Expires At",
            "type": "string"
          },
          "id": {
            "description": "Unique object identifier.\n\nThe format and length of IDs may change over time.",
            "examples": ["msgbatch_013Zva2CMHLNnXjNJJKqJ2EF"],
            "title": "Id",
            "type": "string"
          },
          "processing_status": {
            "description": "Processing status of the Message Batch.",
            "enum": ["in_progress", "canceling", "ended"],
            "title": "Processing Status",
            "type": "string"
          },
          "request_counts": {
            "$ref": "#/components/schemas/RequestCounts",
            "description": "Tallies requests within the Message Batch, categorized by their status.\n\nRequests start as `processing` and move to one of the other statuses only once processing of the entire batch ends. The sum of all values always matches the total number of requests in the batch."
          },
          "results_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "URL to a `.jsonl` file containing the results of the Message Batch requests. Specified only once processing ends.\n\nResults in the file are not guaranteed to be in the same order as requests. Use the `custom_id` field to match results to requests.",
            "examples": [
              "https://api.anthropic.com/v1/messages/batches/msgbatch_013Zva2CMHLNnXjNJJKqJ2EF/results"
            ],
            "title": "Results Url"
          },
          "type": {
            "const": "message_batch",
            "default": "message_batch",
            "description": "Object type.\n\nFor Message Batches, this is always `\"message_batch\"`.",
            "enum": ["message_batch"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "archived_at",
          "cancel_initiated_at",
          "created_at",
          "ended_at",
          "expires_at",
          "id",
          "processing_status",
          "request_counts",
          "results_url",
          "type"
        ],
        "title": "MessageBatch",
        "type": "object"
      },
      "MessageBatchIndividualRequestParams": {
        "additionalProperties": false,
        "properties": {
          "custom_id": {
            "description": "Developer-provided ID created for each request in a Message Batch. Useful for matching results to requests, as results may be given out of request order.\n\nMust be unique for each request within the Message Batch.",
            "examples": ["my-custom-id-1"],
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_-]{1,64}$",
            "title": "Custom Id",
            "type": "string"
          },
          "params": {
            "$ref": "#/components/schemas/CreateMessageParams",
            "description": "Messages API creation parameters for the individual request. \n\nSee the [Messages API reference](/en/api/messages) for full documentation on available parameters."
          }
        },
        "required": ["custom_id", "params"],
        "title": "MessageBatchIndividualRequestParams",
        "type": "object"
      },
      "MessageBatchIndividualResponse": {
        "description": "This is a single line in the response `.jsonl` file and does not represent the response as a whole.",
        "properties": {
          "custom_id": {
            "description": "Developer-provided ID created for each request in a Message Batch. Useful for matching results to requests, as results may be given out of request order.\n\nMust be unique for each request within the Message Batch.",
            "examples": ["my-custom-id-1"],
            "title": "Custom Id",
            "type": "string"
          },
          "result": {
            "description": "Processing result for this request.\n\nContains a Message output if processing was successful, an error response if processing failed, or the reason why processing was not attempted, such as cancellation or expiration.",
            "discriminator": {
              "mapping": {
                "canceled": "#/components/schemas/CanceledResult",
                "errored": "#/components/schemas/ErroredResult",
                "expired": "#/components/schemas/ExpiredResult",
                "succeeded": "#/components/schemas/SucceededResult"
              },
              "propertyName": "type"
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/SucceededResult"
              },
              {
                "$ref": "#/components/schemas/ErroredResult"
              },
              {
                "$ref": "#/components/schemas/CanceledResult"
              },
              {
                "$ref": "#/components/schemas/ExpiredResult"
              }
            ],
            "title": "Result"
          }
        },
        "required": ["custom_id", "result"],
        "title": "MessageBatchIndividualResponse",
        "type": "object"
      },
      "MessageDelta": {
        "properties": {
          "stop_reason": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/StopReason"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Stop Reason"
          },
          "stop_sequence": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Stop Sequence"
          }
        },
        "required": ["stop_reason", "stop_sequence"],
        "title": "MessageDelta",
        "type": "object"
      },
      "MessageDeltaEvent": {
        "properties": {
          "delta": {
            "$ref": "#/components/schemas/MessageDelta"
          },
          "type": {
            "const": "message_delta",
            "default": "message_delta",
            "enum": ["message_delta"],
            "title": "Type",
            "type": "string"
          },
          "usage": {
            "$ref": "#/components/schemas/MessageDeltaUsage",
            "description": "Billing and rate-limit usage.\n\nAnthropic's API bills and rate-limits by token counts, as tokens represent the underlying cost to our systems.\n\nUnder the hood, the API transforms requests into a format suitable for the model. The model's output then goes through a parsing stage before becoming an API response. As a result, the token counts in `usage` will not match one-to-one with the exact visible content of an API request or response.\n\nFor example, `output_tokens` will be non-zero, even for an empty string response from Claude.\n\nTotal input tokens in a request is the summation of `input_tokens`, `cache_creation_input_tokens`, and `cache_read_input_tokens`.",
            "examples": [
              {
                "output_tokens": 503
              }
            ]
          }
        },
        "required": ["delta", "type", "usage"],
        "title": "MessageDeltaEvent",
        "type": "object",
        "x-stainless-naming": {
          "go": {
            "model_name": "MessageDeltaEvent"
          }
        }
      },
      "MessageDeltaUsage": {
        "properties": {
          "cache_creation_input_tokens": {
            "anyOf": [
              {
                "minimum": 0,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "The cumulative number of input tokens used to create the cache entry.",
            "examples": [2051],
            "title": "Cache Creation Input Tokens"
          },
          "cache_read_input_tokens": {
            "anyOf": [
              {
                "minimum": 0,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "The cumulative number of input tokens read from the cache.",
            "examples": [2051],
            "title": "Cache Read Input Tokens"
          },
          "input_tokens": {
            "anyOf": [
              {
                "minimum": 0,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "The cumulative number of input tokens which were used.",
            "examples": [2095],
            "title": "Input Tokens"
          },
          "output_tokens": {
            "description": "The cumulative number of output tokens which were used.",
            "examples": [503],
            "title": "Output Tokens",
            "type": "integer"
          },
          "server_tool_use": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ServerToolUsage"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "The number of server tool requests."
          }
        },
        "required": [
          "cache_creation_input_tokens",
          "cache_read_input_tokens",
          "input_tokens",
          "output_tokens",
          "server_tool_use"
        ],
        "title": "MessageDeltaUsage",
        "type": "object"
      },
      "MessageStartEvent": {
        "properties": {
          "message": {
            "$ref": "#/components/schemas/Message"
          },
          "type": {
            "const": "message_start",
            "default": "message_start",
            "enum": ["message_start"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["message", "type"],
        "title": "MessageStartEvent",
        "type": "object",
        "x-stainless-naming": {
          "go": {
            "model_name": "MessageStartEvent"
          }
        }
      },
      "MessageStopEvent": {
        "properties": {
          "type": {
            "const": "message_stop",
            "default": "message_stop",
            "enum": ["message_stop"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "MessageStopEvent",
        "type": "object",
        "x-stainless-naming": {
          "go": {
            "model_name": "MessageStopEvent"
          }
        }
      },
      "MessageStreamEvent": {
        "discriminator": {
          "mapping": {
            "content_block_delta": "#/components/schemas/ContentBlockDeltaEvent",
            "content_block_start": "#/components/schemas/ContentBlockStartEvent",
            "content_block_stop": "#/components/schemas/ContentBlockStopEvent",
            "message_delta": "#/components/schemas/MessageDeltaEvent",
            "message_start": "#/components/schemas/MessageStartEvent",
            "message_stop": "#/components/schemas/MessageStopEvent"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/MessageStartEvent"
          },
          {
            "$ref": "#/components/schemas/MessageDeltaEvent"
          },
          {
            "$ref": "#/components/schemas/MessageStopEvent"
          },
          {
            "$ref": "#/components/schemas/ContentBlockStartEvent"
          },
          {
            "$ref": "#/components/schemas/ContentBlockDeltaEvent"
          },
          {
            "$ref": "#/components/schemas/ContentBlockStopEvent"
          }
        ],
        "title": "MessageStreamEvent",
        "x-stainless-naming": {
          "go": {
            "model_name": "MessageStreamEvent"
          }
        }
      },
      "Metadata": {
        "additionalProperties": false,
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "maxLength": 256,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "An external identifier for the user who is associated with the request.\n\nThis should be a uuid, hash value, or other opaque identifier. Anthropic may use this id to help detect abuse. Do not include any identifying information such as name, email address, or phone number.",
            "examples": ["13803d75-b4b5-4c3e-b2a2-6f21399b021b"],
            "title": "User Id"
          }
        },
        "title": "Metadata",
        "type": "object"
      },
      "Model": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "const": "claude-3-7-sonnet-latest",
            "description": "High-performance model with early extended thinking",
            "x-stainless-nominal": false
          },
          {
            "const": "claude-3-7-sonnet-20250219",
            "description": "High-performance model with early extended thinking",
            "x-stainless-nominal": false
          },
          {
            "const": "claude-3-5-haiku-latest",
            "description": "Fastest and most compact model for near-instant responsiveness",
            "x-stainless-nominal": false
          },
          {
            "const": "claude-3-5-haiku-20241022",
            "description": "Our fastest model",
            "x-stainless-nominal": false
          },
          {
            "const": "claude-haiku-4-5",
            "description": "Hybrid model, capable of near-instant responses and extended thinking",
            "x-stainless-nominal": false
          },
          {
            "const": "claude-haiku-4-5-20251001",
            "description": "Hybrid model, capable of near-instant responses and extended thinking",
            "x-stainless-nominal": false
          },
          {
            "const": "claude-sonnet-4-20250514",
            "description": "High-performance model with extended thinking",
            "x-stainless-nominal": false
          },
          {
            "const": "claude-sonnet-4-0",
            "description": "High-performance model with extended thinking",
            "x-stainless-nominal": false
          },
          {
            "const": "claude-4-sonnet-20250514",
            "description": "High-performance model with extended thinking",
            "x-stainless-nominal": false
          },
          {
            "const": "claude-sonnet-4-5",
            "description": "Our best model for real-world agents and coding",
            "x-stainless-nominal": false
          },
          {
            "const": "claude-sonnet-4-5-20250929",
            "description": "Our best model for real-world agents and coding",
            "x-stainless-nominal": false
          },
          {
            "const": "claude-3-5-sonnet-latest",
            "description": "Our previous most intelligent model",
            "x-stainless-nominal": false
          },
          {
            "const": "claude-3-5-sonnet-20241022",
            "description": "Our previous most intelligent model",
            "x-stainless-nominal": false
          },
          {
            "const": "claude-3-5-sonnet-20240620",
            "x-stainless-nominal": false
          },
          {
            "const": "claude-opus-4-0",
            "description": "Our most capable model"
          },
          {
            "const": "claude-opus-4-20250514",
            "description": "Our most capable model"
          },
          {
            "const": "claude-4-opus-20250514",
            "description": "Our most capable model",
            "x-stainless-nominal": false
          },
          {
            "const": "claude-opus-4-1-20250805",
            "description": "Our most capable model"
          },
          {
            "const": "claude-3-opus-latest",
            "deprecated": true,
            "description": "Excels at writing and complex tasks",
            "x-stainless-deprecation-message": "Will reach end-of-life on January 5th, 2026. Please migrate to a newer model. Visit https://docs.anthropic.com/en/docs/resources/model-deprecations for more information.",
            "x-stainless-nominal": false
          },
          {
            "const": "claude-3-opus-20240229",
            "deprecated": true,
            "description": "Excels at writing and complex tasks",
            "x-stainless-deprecation-message": "Will reach end-of-life on January 5th, 2026. Please migrate to a newer model. Visit https://docs.anthropic.com/en/docs/resources/model-deprecations for more information.",
            "x-stainless-nominal": false
          },
          {
            "const": "claude-3-haiku-20240307",
            "description": "Our previous most fast and cost-effective",
            "x-stainless-nominal": false
          }
        ],
        "description": "The model that will complete your prompt.\\n\\nSee [models](https://docs.anthropic.com/en/docs/models-overview) for additional details and options.",
        "title": "Model"
      },
      "ModelInfo": {
        "properties": {
          "created_at": {
            "description": "RFC 3339 datetime string representing the time at which the model was released. May be set to an epoch value if the release date is unknown.",
            "examples": ["2025-02-19T00:00:00Z"],
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "display_name": {
            "description": "A human-readable name for the model.",
            "examples": ["Claude Sonnet 4"],
            "title": "Display Name",
            "type": "string"
          },
          "id": {
            "description": "Unique model identifier.",
            "examples": ["claude-sonnet-4-20250514"],
            "title": "Id",
            "type": "string"
          },
          "type": {
            "const": "model",
            "default": "model",
            "description": "Object type.\n\nFor Models, this is always `\"model\"`.",
            "enum": ["model"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["created_at", "display_name", "id", "type"],
        "title": "ModelInfo",
        "type": "object"
      },
      "NotFoundError": {
        "properties": {
          "message": {
            "default": "Not found",
            "title": "Message",
            "type": "string"
          },
          "type": {
            "const": "not_found_error",
            "default": "not_found_error",
            "enum": ["not_found_error"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["message", "type"],
        "title": "NotFoundError",
        "type": "object"
      },
      "OverloadedError": {
        "properties": {
          "message": {
            "default": "Overloaded",
            "title": "Message",
            "type": "string"
          },
          "type": {
            "const": "overloaded_error",
            "default": "overloaded_error",
            "enum": ["overloaded_error"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["message", "type"],
        "title": "OverloadedError",
        "type": "object"
      },
      "PermissionError": {
        "properties": {
          "message": {
            "default": "Permission denied",
            "title": "Message",
            "type": "string"
          },
          "type": {
            "const": "permission_error",
            "default": "permission_error",
            "enum": ["permission_error"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["message", "type"],
        "title": "PermissionError",
        "type": "object"
      },
      "PlainTextSource": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "title": "Data",
            "type": "string"
          },
          "media_type": {
            "const": "text/plain",
            "enum": ["text/plain"],
            "title": "Media Type",
            "type": "string"
          },
          "type": {
            "const": "text",
            "enum": ["text"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["data", "media_type", "type"],
        "title": "PlainTextSource",
        "type": "object"
      },
      "RateLimitError": {
        "properties": {
          "message": {
            "default": "Rate limited",
            "title": "Message",
            "type": "string"
          },
          "type": {
            "const": "rate_limit_error",
            "default": "rate_limit_error",
            "enum": ["rate_limit_error"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["message", "type"],
        "title": "RateLimitError",
        "type": "object"
      },
      "RequestCharLocationCitation": {
        "additionalProperties": false,
        "properties": {
          "cited_text": {
            "title": "Cited Text",
            "type": "string"
          },
          "document_index": {
            "minimum": 0,
            "title": "Document Index",
            "type": "integer"
          },
          "document_title": {
            "anyOf": [
              {
                "maxLength": 255,
                "minLength": 1,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Title"
          },
          "end_char_index": {
            "title": "End Char Index",
            "type": "integer"
          },
          "start_char_index": {
            "minimum": 0,
            "title": "Start Char Index",
            "type": "integer"
          },
          "type": {
            "const": "char_location",
            "enum": ["char_location"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "cited_text",
          "document_index",
          "document_title",
          "end_char_index",
          "start_char_index",
          "type"
        ],
        "title": "RequestCharLocationCitation",
        "type": "object"
      },
      "RequestCitationsConfig": {
        "additionalProperties": false,
        "properties": {
          "enabled": {
            "title": "Enabled",
            "type": "boolean"
          }
        },
        "title": "RequestCitationsConfig",
        "type": "object"
      },
      "RequestContentBlockLocationCitation": {
        "additionalProperties": false,
        "properties": {
          "cited_text": {
            "title": "Cited Text",
            "type": "string"
          },
          "document_index": {
            "minimum": 0,
            "title": "Document Index",
            "type": "integer"
          },
          "document_title": {
            "anyOf": [
              {
                "maxLength": 255,
                "minLength": 1,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Title"
          },
          "end_block_index": {
            "title": "End Block Index",
            "type": "integer"
          },
          "start_block_index": {
            "minimum": 0,
            "title": "Start Block Index",
            "type": "integer"
          },
          "type": {
            "const": "content_block_location",
            "enum": ["content_block_location"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "cited_text",
          "document_index",
          "document_title",
          "end_block_index",
          "start_block_index",
          "type"
        ],
        "title": "RequestContentBlockLocationCitation",
        "type": "object"
      },
      "RequestCounts": {
        "properties": {
          "canceled": {
            "default": 0,
            "description": "Number of requests in the Message Batch that have been canceled.\n\nThis is zero until processing of the entire Message Batch has ended.",
            "examples": [10],
            "title": "Canceled",
            "type": "integer"
          },
          "errored": {
            "default": 0,
            "description": "Number of requests in the Message Batch that encountered an error.\n\nThis is zero until processing of the entire Message Batch has ended.",
            "examples": [30],
            "title": "Errored",
            "type": "integer"
          },
          "expired": {
            "default": 0,
            "description": "Number of requests in the Message Batch that have expired.\n\nThis is zero until processing of the entire Message Batch has ended.",
            "examples": [10],
            "title": "Expired",
            "type": "integer"
          },
          "processing": {
            "default": 0,
            "description": "Number of requests in the Message Batch that are processing.",
            "examples": [100],
            "title": "Processing",
            "type": "integer"
          },
          "succeeded": {
            "default": 0,
            "description": "Number of requests in the Message Batch that have completed successfully.\n\nThis is zero until processing of the entire Message Batch has ended.",
            "examples": [50],
            "title": "Succeeded",
            "type": "integer"
          }
        },
        "required": [
          "canceled",
          "errored",
          "expired",
          "processing",
          "succeeded"
        ],
        "title": "RequestCounts",
        "type": "object"
      },
      "RequestDocumentBlock": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/CacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "citations": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RequestCitationsConfig"
              },
              {
                "type": "null"
              }
            ]
          },
          "context": {
            "anyOf": [
              {
                "minLength": 1,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Context"
          },
          "source": {
            "discriminator": {
              "mapping": {
                "base64": "#/components/schemas/Base64PDFSource",
                "content": "#/components/schemas/ContentBlockSource",
                "text": "#/components/schemas/PlainTextSource",
                "url": "#/components/schemas/URLPDFSource"
              },
              "propertyName": "type"
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/Base64PDFSource"
              },
              {
                "$ref": "#/components/schemas/PlainTextSource"
              },
              {
                "$ref": "#/components/schemas/ContentBlockSource"
              },
              {
                "$ref": "#/components/schemas/URLPDFSource"
              }
            ],
            "title": "Source"
          },
          "title": {
            "anyOf": [
              {
                "maxLength": 500,
                "minLength": 1,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "type": {
            "const": "document",
            "enum": ["document"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["source", "type"],
        "title": "RequestDocumentBlock",
        "type": "object"
      },
      "RequestImageBlock": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/CacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "source": {
            "discriminator": {
              "mapping": {
                "base64": "#/components/schemas/Base64ImageSource",
                "url": "#/components/schemas/URLImageSource"
              },
              "propertyName": "type"
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/Base64ImageSource"
              },
              {
                "$ref": "#/components/schemas/URLImageSource"
              }
            ],
            "title": "Source"
          },
          "type": {
            "const": "image",
            "enum": ["image"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["source", "type"],
        "title": "RequestImageBlock",
        "type": "object"
      },
      "RequestPageLocationCitation": {
        "additionalProperties": false,
        "properties": {
          "cited_text": {
            "title": "Cited Text",
            "type": "string"
          },
          "document_index": {
            "minimum": 0,
            "title": "Document Index",
            "type": "integer"
          },
          "document_title": {
            "anyOf": [
              {
                "maxLength": 255,
                "minLength": 1,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Title"
          },
          "end_page_number": {
            "title": "End Page Number",
            "type": "integer"
          },
          "start_page_number": {
            "minimum": 1,
            "title": "Start Page Number",
            "type": "integer"
          },
          "type": {
            "const": "page_location",
            "enum": ["page_location"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "cited_text",
          "document_index",
          "document_title",
          "end_page_number",
          "start_page_number",
          "type"
        ],
        "title": "RequestPageLocationCitation",
        "type": "object"
      },
      "RequestRedactedThinkingBlock": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "title": "Data",
            "type": "string"
          },
          "type": {
            "const": "redacted_thinking",
            "enum": ["redacted_thinking"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["data", "type"],
        "title": "RequestRedactedThinkingBlock",
        "type": "object"
      },
      "RequestSearchResultBlock": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/CacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "citations": {
            "$ref": "#/components/schemas/RequestCitationsConfig"
          },
          "content": {
            "items": {
              "$ref": "#/components/schemas/RequestTextBlock"
            },
            "title": "Content",
            "type": "array"
          },
          "source": {
            "title": "Source",
            "type": "string"
          },
          "title": {
            "title": "Title",
            "type": "string"
          },
          "type": {
            "const": "search_result",
            "enum": ["search_result"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["content", "source", "title", "type"],
        "title": "RequestSearchResultBlock",
        "type": "object"
      },
      "RequestSearchResultLocationCitation": {
        "additionalProperties": false,
        "properties": {
          "cited_text": {
            "title": "Cited Text",
            "type": "string"
          },
          "end_block_index": {
            "title": "End Block Index",
            "type": "integer"
          },
          "search_result_index": {
            "minimum": 0,
            "title": "Search Result Index",
            "type": "integer"
          },
          "source": {
            "title": "Source",
            "type": "string"
          },
          "start_block_index": {
            "minimum": 0,
            "title": "Start Block Index",
            "type": "integer"
          },
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "type": {
            "const": "search_result_location",
            "enum": ["search_result_location"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "cited_text",
          "end_block_index",
          "search_result_index",
          "source",
          "start_block_index",
          "title",
          "type"
        ],
        "title": "RequestSearchResultLocationCitation",
        "type": "object"
      },
      "RequestServerToolUseBlock": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/CacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "id": {
            "pattern": "^srvtoolu_[a-zA-Z0-9_]+$",
            "title": "Id",
            "type": "string"
          },
          "input": {
            "title": "Input",
            "type": "object"
          },
          "name": {
            "const": "web_search",
            "enum": ["web_search"],
            "title": "Name",
            "type": "string"
          },
          "type": {
            "const": "server_tool_use",
            "enum": ["server_tool_use"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["id", "input", "name", "type"],
        "title": "RequestServerToolUseBlock",
        "type": "object"
      },
      "RequestTextBlock": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/CacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "citations": {
            "anyOf": [
              {
                "items": {
                  "discriminator": {
                    "mapping": {
                      "char_location": "#/components/schemas/RequestCharLocationCitation",
                      "content_block_location": "#/components/schemas/RequestContentBlockLocationCitation",
                      "page_location": "#/components/schemas/RequestPageLocationCitation",
                      "search_result_location": "#/components/schemas/RequestSearchResultLocationCitation",
                      "web_search_result_location": "#/components/schemas/RequestWebSearchResultLocationCitation"
                    },
                    "propertyName": "type"
                  },
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/RequestCharLocationCitation"
                    },
                    {
                      "$ref": "#/components/schemas/RequestPageLocationCitation"
                    },
                    {
                      "$ref": "#/components/schemas/RequestContentBlockLocationCitation"
                    },
                    {
                      "$ref": "#/components/schemas/RequestWebSearchResultLocationCitation"
                    },
                    {
                      "$ref": "#/components/schemas/RequestSearchResultLocationCitation"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Citations"
          },
          "text": {
            "minLength": 1,
            "title": "Text",
            "type": "string"
          },
          "type": {
            "const": "text",
            "enum": ["text"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["text", "type"],
        "title": "RequestTextBlock",
        "type": "object"
      },
      "RequestThinkingBlock": {
        "additionalProperties": false,
        "properties": {
          "signature": {
            "title": "Signature",
            "type": "string"
          },
          "thinking": {
            "title": "Thinking",
            "type": "string"
          },
          "type": {
            "const": "thinking",
            "enum": ["thinking"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["signature", "thinking", "type"],
        "title": "RequestThinkingBlock",
        "type": "object"
      },
      "RequestToolResultBlock": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/CacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "content": {
            "anyOf": [
              {
                "type": "string",
                "x-stainless-skip": ["go", "cli"]
              },
              {
                "items": {
                  "discriminator": {
                    "mapping": {
                      "document": "#/components/schemas/RequestDocumentBlock",
                      "image": "#/components/schemas/RequestImageBlock",
                      "search_result": "#/components/schemas/RequestSearchResultBlock",
                      "text": "#/components/schemas/RequestTextBlock"
                    },
                    "propertyName": "type"
                  },
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/RequestTextBlock"
                    },
                    {
                      "$ref": "#/components/schemas/RequestImageBlock"
                    },
                    {
                      "$ref": "#/components/schemas/RequestSearchResultBlock"
                    },
                    {
                      "$ref": "#/components/schemas/RequestDocumentBlock"
                    }
                  ],
                  "title": "Block"
                },
                "type": "array",
                "x-stainless-naming": {
                  "python": {
                    "type_name": "Content"
                  },
                  "ruby": {
                    "type_name": "Content"
                  }
                }
              }
            ],
            "title": "Content"
          },
          "is_error": {
            "title": "Is Error",
            "type": "boolean"
          },
          "tool_use_id": {
            "pattern": "^[a-zA-Z0-9_-]+$",
            "title": "Tool Use Id",
            "type": "string"
          },
          "type": {
            "const": "tool_result",
            "enum": ["tool_result"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["tool_use_id", "type"],
        "title": "RequestToolResultBlock",
        "type": "object"
      },
      "RequestToolUseBlock": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/CacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "id": {
            "pattern": "^[a-zA-Z0-9_-]+$",
            "title": "Id",
            "type": "string"
          },
          "input": {
            "title": "Input",
            "type": "object"
          },
          "name": {
            "maxLength": 200,
            "minLength": 1,
            "title": "Name",
            "type": "string"
          },
          "type": {
            "const": "tool_use",
            "enum": ["tool_use"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["id", "input", "name", "type"],
        "title": "RequestToolUseBlock",
        "type": "object"
      },
      "RequestWebSearchResultBlock": {
        "additionalProperties": false,
        "properties": {
          "encrypted_content": {
            "title": "Encrypted Content",
            "type": "string"
          },
          "page_age": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Page Age"
          },
          "title": {
            "title": "Title",
            "type": "string"
          },
          "type": {
            "const": "web_search_result",
            "enum": ["web_search_result"],
            "title": "Type",
            "type": "string"
          },
          "url": {
            "title": "Url",
            "type": "string"
          }
        },
        "required": ["encrypted_content", "title", "type", "url"],
        "title": "RequestWebSearchResultBlock",
        "type": "object"
      },
      "RequestWebSearchResultLocationCitation": {
        "additionalProperties": false,
        "properties": {
          "cited_text": {
            "title": "Cited Text",
            "type": "string"
          },
          "encrypted_index": {
            "title": "Encrypted Index",
            "type": "string"
          },
          "title": {
            "anyOf": [
              {
                "maxLength": 512,
                "minLength": 1,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "type": {
            "const": "web_search_result_location",
            "enum": ["web_search_result_location"],
            "title": "Type",
            "type": "string"
          },
          "url": {
            "maxLength": 2048,
            "minLength": 1,
            "title": "Url",
            "type": "string"
          }
        },
        "required": ["cited_text", "encrypted_index", "title", "type", "url"],
        "title": "RequestWebSearchResultLocationCitation",
        "type": "object"
      },
      "RequestWebSearchToolResultBlock": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/CacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "content": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/RequestWebSearchResultBlock"
                },
                "title": "web_search_tool_result_block_item",
                "type": "array"
              },
              {
                "$ref": "#/components/schemas/RequestWebSearchToolResultError",
                "x-stainless-naming": {
                  "go": {
                    "variant_constructor": "NewWebSearchToolRequestError"
                  }
                }
              }
            ],
            "title": "Content"
          },
          "tool_use_id": {
            "pattern": "^srvtoolu_[a-zA-Z0-9_]+$",
            "title": "Tool Use Id",
            "type": "string"
          },
          "type": {
            "const": "web_search_tool_result",
            "enum": ["web_search_tool_result"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["content", "tool_use_id", "type"],
        "title": "RequestWebSearchToolResultBlock",
        "type": "object"
      },
      "RequestWebSearchToolResultError": {
        "additionalProperties": false,
        "properties": {
          "error_code": {
            "$ref": "#/components/schemas/WebSearchToolResultErrorCode"
          },
          "type": {
            "const": "web_search_tool_result_error",
            "enum": ["web_search_tool_result_error"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["error_code", "type"],
        "title": "RequestWebSearchToolResultError",
        "type": "object"
      },
      "ResponseCharLocationCitation": {
        "properties": {
          "cited_text": {
            "title": "Cited Text",
            "type": "string"
          },
          "document_index": {
            "minimum": 0,
            "title": "Document Index",
            "type": "integer"
          },
          "document_title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Title"
          },
          "end_char_index": {
            "title": "End Char Index",
            "type": "integer"
          },
          "file_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "File Id"
          },
          "start_char_index": {
            "minimum": 0,
            "title": "Start Char Index",
            "type": "integer"
          },
          "type": {
            "const": "char_location",
            "default": "char_location",
            "enum": ["char_location"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "cited_text",
          "document_index",
          "document_title",
          "end_char_index",
          "file_id",
          "start_char_index",
          "type"
        ],
        "title": "ResponseCharLocationCitation",
        "type": "object"
      },
      "ResponseContentBlockLocationCitation": {
        "properties": {
          "cited_text": {
            "title": "Cited Text",
            "type": "string"
          },
          "document_index": {
            "minimum": 0,
            "title": "Document Index",
            "type": "integer"
          },
          "document_title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Title"
          },
          "end_block_index": {
            "title": "End Block Index",
            "type": "integer"
          },
          "file_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "File Id"
          },
          "start_block_index": {
            "minimum": 0,
            "title": "Start Block Index",
            "type": "integer"
          },
          "type": {
            "const": "content_block_location",
            "default": "content_block_location",
            "enum": ["content_block_location"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "cited_text",
          "document_index",
          "document_title",
          "end_block_index",
          "file_id",
          "start_block_index",
          "type"
        ],
        "title": "ResponseContentBlockLocationCitation",
        "type": "object"
      },
      "ResponsePageLocationCitation": {
        "properties": {
          "cited_text": {
            "title": "Cited Text",
            "type": "string"
          },
          "document_index": {
            "minimum": 0,
            "title": "Document Index",
            "type": "integer"
          },
          "document_title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Title"
          },
          "end_page_number": {
            "title": "End Page Number",
            "type": "integer"
          },
          "file_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "File Id"
          },
          "start_page_number": {
            "minimum": 1,
            "title": "Start Page Number",
            "type": "integer"
          },
          "type": {
            "const": "page_location",
            "default": "page_location",
            "enum": ["page_location"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "cited_text",
          "document_index",
          "document_title",
          "end_page_number",
          "file_id",
          "start_page_number",
          "type"
        ],
        "title": "ResponsePageLocationCitation",
        "type": "object"
      },
      "ResponseRedactedThinkingBlock": {
        "properties": {
          "data": {
            "title": "Data",
            "type": "string"
          },
          "type": {
            "const": "redacted_thinking",
            "default": "redacted_thinking",
            "enum": ["redacted_thinking"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["data", "type"],
        "title": "ResponseRedactedThinkingBlock",
        "type": "object"
      },
      "ResponseSearchResultLocationCitation": {
        "properties": {
          "cited_text": {
            "title": "Cited Text",
            "type": "string"
          },
          "end_block_index": {
            "title": "End Block Index",
            "type": "integer"
          },
          "search_result_index": {
            "minimum": 0,
            "title": "Search Result Index",
            "type": "integer"
          },
          "source": {
            "title": "Source",
            "type": "string"
          },
          "start_block_index": {
            "minimum": 0,
            "title": "Start Block Index",
            "type": "integer"
          },
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "type": {
            "const": "search_result_location",
            "default": "search_result_location",
            "enum": ["search_result_location"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "cited_text",
          "end_block_index",
          "search_result_index",
          "source",
          "start_block_index",
          "title",
          "type"
        ],
        "title": "ResponseSearchResultLocationCitation",
        "type": "object"
      },
      "ResponseServerToolUseBlock": {
        "properties": {
          "id": {
            "pattern": "^srvtoolu_[a-zA-Z0-9_]+$",
            "title": "Id",
            "type": "string"
          },
          "input": {
            "title": "Input",
            "type": "object"
          },
          "name": {
            "const": "web_search",
            "enum": ["web_search"],
            "title": "Name",
            "type": "string"
          },
          "type": {
            "const": "server_tool_use",
            "default": "server_tool_use",
            "enum": ["server_tool_use"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["id", "input", "name", "type"],
        "title": "ResponseServerToolUseBlock",
        "type": "object"
      },
      "ResponseTextBlock": {
        "properties": {
          "citations": {
            "anyOf": [
              {
                "items": {
                  "discriminator": {
                    "mapping": {
                      "char_location": "#/components/schemas/ResponseCharLocationCitation",
                      "content_block_location": "#/components/schemas/ResponseContentBlockLocationCitation",
                      "page_location": "#/components/schemas/ResponsePageLocationCitation",
                      "search_result_location": "#/components/schemas/ResponseSearchResultLocationCitation",
                      "web_search_result_location": "#/components/schemas/ResponseWebSearchResultLocationCitation"
                    },
                    "propertyName": "type"
                  },
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ResponseCharLocationCitation"
                    },
                    {
                      "$ref": "#/components/schemas/ResponsePageLocationCitation"
                    },
                    {
                      "$ref": "#/components/schemas/ResponseContentBlockLocationCitation"
                    },
                    {
                      "$ref": "#/components/schemas/ResponseWebSearchResultLocationCitation"
                    },
                    {
                      "$ref": "#/components/schemas/ResponseSearchResultLocationCitation"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Citations supporting the text block.\n\nThe type of citation returned will depend on the type of document being cited. Citing a PDF results in `page_location`, plain text results in `char_location`, and content document results in `content_block_location`.",
            "title": "Citations"
          },
          "text": {
            "maxLength": 5000000,
            "minLength": 0,
            "title": "Text",
            "type": "string"
          },
          "type": {
            "const": "text",
            "default": "text",
            "enum": ["text"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["citations", "text", "type"],
        "title": "ResponseTextBlock",
        "type": "object"
      },
      "ResponseThinkingBlock": {
        "properties": {
          "signature": {
            "title": "Signature",
            "type": "string"
          },
          "thinking": {
            "title": "Thinking",
            "type": "string"
          },
          "type": {
            "const": "thinking",
            "default": "thinking",
            "enum": ["thinking"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["signature", "thinking", "type"],
        "title": "ResponseThinkingBlock",
        "type": "object"
      },
      "ResponseToolUseBlock": {
        "properties": {
          "id": {
            "pattern": "^[a-zA-Z0-9_-]+$",
            "title": "Id",
            "type": "string"
          },
          "input": {
            "title": "Input",
            "type": "object"
          },
          "name": {
            "minLength": 1,
            "title": "Name",
            "type": "string"
          },
          "type": {
            "const": "tool_use",
            "default": "tool_use",
            "enum": ["tool_use"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["id", "input", "name", "type"],
        "title": "ResponseToolUseBlock",
        "type": "object"
      },
      "ResponseWebSearchResultBlock": {
        "properties": {
          "encrypted_content": {
            "title": "Encrypted Content",
            "type": "string"
          },
          "page_age": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Page Age"
          },
          "title": {
            "title": "Title",
            "type": "string"
          },
          "type": {
            "const": "web_search_result",
            "default": "web_search_result",
            "enum": ["web_search_result"],
            "title": "Type",
            "type": "string"
          },
          "url": {
            "title": "Url",
            "type": "string"
          }
        },
        "required": ["encrypted_content", "page_age", "title", "type", "url"],
        "title": "ResponseWebSearchResultBlock",
        "type": "object"
      },
      "ResponseWebSearchResultLocationCitation": {
        "properties": {
          "cited_text": {
            "title": "Cited Text",
            "type": "string"
          },
          "encrypted_index": {
            "title": "Encrypted Index",
            "type": "string"
          },
          "title": {
            "anyOf": [
              {
                "maxLength": 512,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "type": {
            "const": "web_search_result_location",
            "default": "web_search_result_location",
            "enum": ["web_search_result_location"],
            "title": "Type",
            "type": "string"
          },
          "url": {
            "title": "Url",
            "type": "string"
          }
        },
        "required": ["cited_text", "encrypted_index", "title", "type", "url"],
        "title": "ResponseWebSearchResultLocationCitation",
        "type": "object"
      },
      "ResponseWebSearchToolResultBlock": {
        "properties": {
          "content": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ResponseWebSearchToolResultError"
              },
              {
                "items": {
                  "$ref": "#/components/schemas/ResponseWebSearchResultBlock"
                },
                "type": "array"
              }
            ],
            "title": "Content"
          },
          "tool_use_id": {
            "pattern": "^srvtoolu_[a-zA-Z0-9_]+$",
            "title": "Tool Use Id",
            "type": "string"
          },
          "type": {
            "const": "web_search_tool_result",
            "default": "web_search_tool_result",
            "enum": ["web_search_tool_result"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["content", "tool_use_id", "type"],
        "title": "ResponseWebSearchToolResultBlock",
        "type": "object"
      },
      "ResponseWebSearchToolResultError": {
        "properties": {
          "error_code": {
            "$ref": "#/components/schemas/WebSearchToolResultErrorCode"
          },
          "type": {
            "const": "web_search_tool_result_error",
            "default": "web_search_tool_result_error",
            "enum": ["web_search_tool_result_error"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["error_code", "type"],
        "title": "ResponseWebSearchToolResultError",
        "type": "object"
      },
      "ServerToolUsage": {
        "properties": {
          "web_search_requests": {
            "default": 0,
            "description": "The number of web search tool requests.",
            "examples": [0],
            "minimum": 0,
            "title": "Web Search Requests",
            "type": "integer"
          }
        },
        "required": ["web_search_requests"],
        "title": "ServerToolUsage",
        "type": "object"
      },
      "SignatureContentBlockDelta": {
        "properties": {
          "signature": {
            "title": "Signature",
            "type": "string"
          },
          "type": {
            "const": "signature_delta",
            "default": "signature_delta",
            "enum": ["signature_delta"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["signature", "type"],
        "title": "SignatureContentBlockDelta",
        "type": "object"
      },
      "StopReason": {
        "enum": [
          "end_turn",
          "max_tokens",
          "stop_sequence",
          "tool_use",
          "pause_turn",
          "refusal",
          "model_context_window_exceeded"
        ],
        "type": "string"
      },
      "SucceededResult": {
        "properties": {
          "message": {
            "$ref": "#/components/schemas/Message"
          },
          "type": {
            "const": "succeeded",
            "default": "succeeded",
            "enum": ["succeeded"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["message", "type"],
        "title": "SucceededResult",
        "type": "object"
      },
      "TextContentBlockDelta": {
        "properties": {
          "text": {
            "title": "Text",
            "type": "string"
          },
          "type": {
            "const": "text_delta",
            "default": "text_delta",
            "enum": ["text_delta"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["text", "type"],
        "title": "TextContentBlockDelta",
        "type": "object"
      },
      "TextEditor_20250124": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/CacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "name": {
            "const": "str_replace_editor",
            "description": "Name of the tool.\n\nThis is how the tool will be called by the model and in `tool_use` blocks.",
            "enum": ["str_replace_editor"],
            "title": "Name",
            "type": "string"
          },
          "type": {
            "const": "text_editor_20250124",
            "enum": ["text_editor_20250124"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["name", "type"],
        "title": "TextEditor_20250124",
        "type": "object"
      },
      "TextEditor_20250429": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/CacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "name": {
            "const": "str_replace_based_edit_tool",
            "description": "Name of the tool.\n\nThis is how the tool will be called by the model and in `tool_use` blocks.",
            "enum": ["str_replace_based_edit_tool"],
            "title": "Name",
            "type": "string"
          },
          "type": {
            "const": "text_editor_20250429",
            "enum": ["text_editor_20250429"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["name", "type"],
        "title": "TextEditor_20250429",
        "type": "object"
      },
      "TextEditor_20250728": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/CacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "max_characters": {
            "anyOf": [
              {
                "minimum": 1,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Maximum number of characters to display when viewing a file. If not specified, defaults to displaying the full file.",
            "title": "Max Characters"
          },
          "name": {
            "const": "str_replace_based_edit_tool",
            "description": "Name of the tool.\n\nThis is how the tool will be called by the model and in `tool_use` blocks.",
            "enum": ["str_replace_based_edit_tool"],
            "title": "Name",
            "type": "string"
          },
          "type": {
            "const": "text_editor_20250728",
            "enum": ["text_editor_20250728"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["name", "type"],
        "title": "TextEditor_20250728",
        "type": "object"
      },
      "ThinkingConfigDisabled": {
        "additionalProperties": false,
        "properties": {
          "type": {
            "const": "disabled",
            "enum": ["disabled"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "ThinkingConfigDisabled",
        "type": "object",
        "x-stainless-go-constant-constructor": true
      },
      "ThinkingConfigEnabled": {
        "additionalProperties": false,
        "properties": {
          "budget_tokens": {
            "description": "Determines how many tokens Claude can use for its internal reasoning process. Larger budgets can enable more thorough analysis for complex problems, improving response quality. \n\nMust be ≥1024 and less than `max_tokens`.\n\nSee [extended thinking](https://docs.anthropic.com/en/docs/build-with-claude/extended-thinking) for details.",
            "minimum": 1024,
            "title": "Budget Tokens",
            "type": "integer"
          },
          "type": {
            "const": "enabled",
            "enum": ["enabled"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["budget_tokens", "type"],
        "title": "ThinkingConfigEnabled",
        "type": "object"
      },
      "ThinkingConfigParam": {
        "description": "Configuration for enabling Claude's extended thinking. \n\nWhen enabled, responses include `thinking` content blocks showing Claude's thinking process before the final answer. Requires a minimum budget of 1,024 tokens and counts towards your `max_tokens` limit.\n\nSee [extended thinking](https://docs.anthropic.com/en/docs/build-with-claude/extended-thinking) for details.",
        "discriminator": {
          "mapping": {
            "disabled": "#/components/schemas/ThinkingConfigDisabled",
            "enabled": "#/components/schemas/ThinkingConfigEnabled"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ThinkingConfigEnabled"
          },
          {
            "$ref": "#/components/schemas/ThinkingConfigDisabled"
          }
        ],
        "title": "Thinking"
      },
      "ThinkingContentBlockDelta": {
        "properties": {
          "thinking": {
            "title": "Thinking",
            "type": "string"
          },
          "type": {
            "const": "thinking_delta",
            "default": "thinking_delta",
            "enum": ["thinking_delta"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["thinking", "type"],
        "title": "ThinkingContentBlockDelta",
        "type": "object"
      },
      "Tool": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/CacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "description": {
            "description": "Description of what this tool does.\n\nTool descriptions should be as detailed as possible. The more information that the model has about what the tool is and how to use it, the better it will perform. You can use natural language descriptions to reinforce important aspects of the tool input JSON schema.",
            "examples": ["Get the current weather in a given location"],
            "title": "Description",
            "type": "string"
          },
          "input_schema": {
            "$ref": "#/components/schemas/InputSchema",
            "description": "[JSON schema](https://json-schema.org/draft/2020-12) for this tool's input.\n\nThis defines the shape of the `input` that your tool accepts and that the model will produce.",
            "examples": [
              {
                "properties": {
                  "location": {
                    "description": "The city and state, e.g. San Francisco, CA",
                    "type": "string"
                  },
                  "unit": {
                    "description": "Unit for the output - one of (celsius, fahrenheit)",
                    "type": "string"
                  }
                },
                "required": ["location"],
                "type": "object"
              }
            ],
            "x-stainless-skip": ["cli"]
          },
          "name": {
            "description": "Name of the tool.\n\nThis is how the tool will be called by the model and in `tool_use` blocks.",
            "maxLength": 128,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_-]{1,128}$",
            "title": "Name",
            "type": "string"
          },
          "type": {
            "anyOf": [
              {
                "type": "null"
              },
              {
                "const": "custom",
                "enum": ["custom"],
                "type": "string"
              }
            ],
            "title": "Type"
          }
        },
        "required": ["name", "input_schema"],
        "title": "Tool",
        "type": "object"
      },
      "ToolChoice": {
        "description": "How the model should use the provided tools. The model can use a specific tool, any available tool, decide by itself, or not use tools at all.",
        "discriminator": {
          "mapping": {
            "any": "#/components/schemas/ToolChoiceAny",
            "auto": "#/components/schemas/ToolChoiceAuto",
            "none": "#/components/schemas/ToolChoiceNone",
            "tool": "#/components/schemas/ToolChoiceTool"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ToolChoiceAuto"
          },
          {
            "$ref": "#/components/schemas/ToolChoiceAny"
          },
          {
            "$ref": "#/components/schemas/ToolChoiceTool"
          },
          {
            "$ref": "#/components/schemas/ToolChoiceNone"
          }
        ],
        "title": "Tool Choice"
      },
      "ToolChoiceAny": {
        "additionalProperties": false,
        "description": "The model will use any available tools.",
        "properties": {
          "disable_parallel_tool_use": {
            "description": "Whether to disable parallel tool use.\n\nDefaults to `false`. If set to `true`, the model will output exactly one tool use.",
            "title": "Disable Parallel Tool Use",
            "type": "boolean"
          },
          "type": {
            "const": "any",
            "enum": ["any"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "ToolChoiceAny",
        "type": "object"
      },
      "ToolChoiceAuto": {
        "additionalProperties": false,
        "description": "The model will automatically decide whether to use tools.",
        "properties": {
          "disable_parallel_tool_use": {
            "description": "Whether to disable parallel tool use.\n\nDefaults to `false`. If set to `true`, the model will output at most one tool use.",
            "title": "Disable Parallel Tool Use",
            "type": "boolean"
          },
          "type": {
            "const": "auto",
            "enum": ["auto"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "ToolChoiceAuto",
        "type": "object"
      },
      "ToolChoiceNone": {
        "additionalProperties": false,
        "description": "The model will not be allowed to use tools.",
        "properties": {
          "type": {
            "const": "none",
            "enum": ["none"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "ToolChoiceNone",
        "type": "object",
        "x-stainless-go-constant-constructor": true
      },
      "ToolChoiceTool": {
        "additionalProperties": false,
        "description": "The model will use the specified tool with `tool_choice.name`.",
        "properties": {
          "disable_parallel_tool_use": {
            "description": "Whether to disable parallel tool use.\n\nDefaults to `false`. If set to `true`, the model will output exactly one tool use.",
            "title": "Disable Parallel Tool Use",
            "type": "boolean"
          },
          "name": {
            "description": "The name of the tool to use.",
            "title": "Name",
            "type": "string"
          },
          "type": {
            "const": "tool",
            "enum": ["tool"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["name", "type"],
        "title": "ToolChoiceTool",
        "type": "object"
      },
      "URLImageSource": {
        "additionalProperties": false,
        "properties": {
          "type": {
            "const": "url",
            "enum": ["url"],
            "title": "Type",
            "type": "string"
          },
          "url": {
            "title": "Url",
            "type": "string"
          }
        },
        "required": ["type", "url"],
        "title": "URLImageSource",
        "type": "object"
      },
      "URLPDFSource": {
        "additionalProperties": false,
        "properties": {
          "type": {
            "const": "url",
            "enum": ["url"],
            "title": "Type",
            "type": "string"
          },
          "url": {
            "title": "Url",
            "type": "string"
          }
        },
        "required": ["type", "url"],
        "title": "URLPDFSource",
        "type": "object"
      },
      "Usage": {
        "properties": {
          "cache_creation": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CacheCreation"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Breakdown of cached tokens by TTL"
          },
          "cache_creation_input_tokens": {
            "anyOf": [
              {
                "minimum": 0,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "The number of input tokens used to create the cache entry.",
            "examples": [2051],
            "title": "Cache Creation Input Tokens"
          },
          "cache_read_input_tokens": {
            "anyOf": [
              {
                "minimum": 0,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "The number of input tokens read from the cache.",
            "examples": [2051],
            "title": "Cache Read Input Tokens"
          },
          "input_tokens": {
            "description": "The number of input tokens which were used.",
            "examples": [2095],
            "minimum": 0,
            "title": "Input Tokens",
            "type": "integer"
          },
          "output_tokens": {
            "description": "The number of output tokens which were used.",
            "examples": [503],
            "minimum": 0,
            "title": "Output Tokens",
            "type": "integer"
          },
          "server_tool_use": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ServerToolUsage"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "The number of server tool requests."
          },
          "service_tier": {
            "anyOf": [
              {
                "enum": ["standard", "priority", "batch"],
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "If the request used the priority, standard, or batch tier.",
            "title": "Service Tier"
          }
        },
        "required": [
          "cache_creation",
          "cache_creation_input_tokens",
          "cache_read_input_tokens",
          "input_tokens",
          "output_tokens",
          "server_tool_use",
          "service_tier"
        ],
        "title": "Usage",
        "type": "object"
      },
      "UserLocation": {
        "additionalProperties": false,
        "properties": {
          "city": {
            "anyOf": [
              {
                "maxLength": 255,
                "minLength": 1,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The city of the user.",
            "examples": ["New York", "Tokyo", "Los Angeles"],
            "title": "City"
          },
          "country": {
            "anyOf": [
              {
                "maxLength": 2,
                "minLength": 2,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The two letter [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the user.",
            "examples": ["US", "JP", "GB"],
            "title": "Country"
          },
          "region": {
            "anyOf": [
              {
                "maxLength": 255,
                "minLength": 1,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The region of the user.",
            "examples": ["California", "Ontario", "Wales"],
            "title": "Region"
          },
          "timezone": {
            "anyOf": [
              {
                "maxLength": 255,
                "minLength": 1,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The [IANA timezone](https://nodatime.org/TimeZones) of the user.",
            "examples": ["America/New_York", "Asia/Tokyo", "Europe/London"],
            "title": "Timezone"
          },
          "type": {
            "const": "approximate",
            "enum": ["approximate"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "UserLocation",
        "type": "object"
      },
      "WebSearchToolResultErrorCode": {
        "enum": [
          "invalid_tool_input",
          "unavailable",
          "max_uses_exceeded",
          "too_many_requests",
          "query_too_long"
        ],
        "title": "WebSearchToolResultErrorCode",
        "type": "string"
      },
      "WebSearchTool_20250305": {
        "additionalProperties": false,
        "properties": {
          "allowed_domains": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "If provided, only these domains will be included in results. Cannot be used alongside `blocked_domains`.",
            "title": "Allowed Domains"
          },
          "blocked_domains": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "If provided, these domains will never appear in results. Cannot be used alongside `allowed_domains`.",
            "title": "Blocked Domains"
          },
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "ephemeral": "#/components/schemas/CacheControlEphemeral"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CacheControlEphemeral"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Create a cache control breakpoint at this content block.",
            "title": "Cache Control"
          },
          "max_uses": {
            "anyOf": [
              {
                "exclusiveMinimum": 0,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Maximum number of times the tool can be used in the API request.",
            "title": "Max Uses"
          },
          "name": {
            "const": "web_search",
            "description": "Name of the tool.\n\nThis is how the tool will be called by the model and in `tool_use` blocks.",
            "enum": ["web_search"],
            "title": "Name",
            "type": "string"
          },
          "type": {
            "const": "web_search_20250305",
            "enum": ["web_search_20250305"],
            "title": "Type",
            "type": "string"
          },
          "user_location": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UserLocation"
              },
              {
                "type": "null"
              }
            ],
            "description": "Parameters for the user's location. Used to provide more relevant search results."
          }
        },
        "required": ["name", "type"],
        "title": "WebSearchTool_20250305",
        "type": "object"
      }
    }
  },
  "info": {
    "title": "Anthropic API",
    "version": "158"
  },
  "openapi": "3.1.0",
  "paths": {
    "/v1/complete": {
      "post": {
        "description": "[Legacy] Create a Text Completion.\n\nThe Text Completions API is a legacy API. We recommend using the [Messages API](https://docs.anthropic.com/en/api/messages) going forward.\n\nFuture models and features will not be compatible with Text Completions. See our [migration guide](https://docs.anthropic.com/en/api/migrating-from-text-completions-to-messages) for guidance in migrating from Text Completions to Messages.",
        "operationId": "complete_post",
        "parameters": [
          {
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
            "in": "header",
            "name": "anthropic-version",
            "required": false,
            "schema": {
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version",
              "type": "string"
            }
          },
          {
            "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
            "in": "header",
            "name": "anthropic-beta",
            "required": false,
            "schema": {
              "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
              "items": {
                "type": "string"
              },
              "title": "Anthropic-Beta",
              "type": "string",
              "x-stainless-override-schema": {
                "description": "Optional header to specify the beta version(s) you want to use.",
                "items": {
                  "$ref": "#/components/schemas/AnthropicBeta"
                },
                "type": "array",
                "x-stainless-extend-default": true,
                "x-stainless-param": "betas"
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompletionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompletionResponse"
                }
              }
            },
            "description": "Text Completion object."
          },
          "4XX": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          }
        },
        "summary": "Create a Text Completion"
      }
    },
    "/v1/files": {
      "get": {
        "operationId": "list_files_v1_files_get",
        "parameters": [
          {
            "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately before this object.",
            "in": "query",
            "name": "before_id",
            "required": false,
            "schema": {
              "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately before this object.",
              "title": "Before Id",
              "type": "string"
            }
          },
          {
            "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately after this object.",
            "in": "query",
            "name": "after_id",
            "required": false,
            "schema": {
              "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately after this object.",
              "title": "After Id",
              "type": "string"
            }
          },
          {
            "description": "Number of items to return per page.\n\nDefaults to `20`. Ranges from `1` to `1000`.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 20,
              "description": "Number of items to return per page.\n\nDefaults to `20`. Ranges from `1` to `1000`.",
              "maximum": 1000,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            }
          },
          {
            "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
            "in": "header",
            "name": "anthropic-beta",
            "required": false,
            "schema": {
              "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
              "items": {
                "type": "string"
              },
              "title": "Anthropic-Beta",
              "type": "string",
              "x-stainless-override-schema": {
                "description": "Optional header to specify the beta version(s) you want to use.",
                "items": {
                  "$ref": "#/components/schemas/AnthropicBeta"
                },
                "type": "array",
                "x-stainless-extend-default": true,
                "x-stainless-param": "betas"
              }
            }
          },
          {
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
            "in": "header",
            "name": "anthropic-version",
            "required": false,
            "schema": {
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version",
              "type": "string"
            }
          },
          {
            "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
            "in": "header",
            "name": "x-api-key",
            "required": false,
            "schema": {
              "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
              "title": "X-Api-Key",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileListResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "4XX": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          }
        },
        "summary": "List Files"
      },
      "post": {
        "operationId": "upload_file_v1_files_post",
        "parameters": [
          {
            "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
            "in": "header",
            "name": "anthropic-beta",
            "required": false,
            "schema": {
              "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
              "items": {
                "type": "string"
              },
              "title": "Anthropic-Beta",
              "type": "string",
              "x-stainless-override-schema": {
                "description": "Optional header to specify the beta version(s) you want to use.",
                "items": {
                  "$ref": "#/components/schemas/AnthropicBeta"
                },
                "type": "array",
                "x-stainless-extend-default": true,
                "x-stainless-param": "betas"
              }
            }
          },
          {
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
            "in": "header",
            "name": "anthropic-version",
            "required": false,
            "schema": {
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "description": "The file to upload",
                    "format": "binary",
                    "type": "string"
                  }
                },
                "required": ["file"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileMetadataSchema"
                }
              }
            },
            "description": "Successful Response"
          },
          "4XX": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          }
        },
        "summary": "Upload File"
      }
    },
    "/v1/files/{file_id}": {
      "delete": {
        "operationId": "delete_file_v1_files__file_id__delete",
        "parameters": [
          {
            "description": "ID of the File.",
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "description": "ID of the File.",
              "title": "File Id",
              "type": "string"
            }
          },
          {
            "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
            "in": "header",
            "name": "anthropic-beta",
            "required": false,
            "schema": {
              "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
              "items": {
                "type": "string"
              },
              "title": "Anthropic-Beta",
              "type": "string",
              "x-stainless-override-schema": {
                "description": "Optional header to specify the beta version(s) you want to use.",
                "items": {
                  "$ref": "#/components/schemas/AnthropicBeta"
                },
                "type": "array",
                "x-stainless-extend-default": true,
                "x-stainless-param": "betas"
              }
            }
          },
          {
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
            "in": "header",
            "name": "anthropic-version",
            "required": false,
            "schema": {
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version",
              "type": "string"
            }
          },
          {
            "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
            "in": "header",
            "name": "x-api-key",
            "required": false,
            "schema": {
              "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
              "title": "X-Api-Key",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileDeleteResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "4XX": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          }
        },
        "summary": "Delete File"
      },
      "get": {
        "operationId": "get_file_metadata_v1_files__file_id__get",
        "parameters": [
          {
            "description": "ID of the File.",
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "description": "ID of the File.",
              "title": "File Id",
              "type": "string"
            }
          },
          {
            "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
            "in": "header",
            "name": "anthropic-beta",
            "required": false,
            "schema": {
              "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
              "items": {
                "type": "string"
              },
              "title": "Anthropic-Beta",
              "type": "string",
              "x-stainless-override-schema": {
                "description": "Optional header to specify the beta version(s) you want to use.",
                "items": {
                  "$ref": "#/components/schemas/AnthropicBeta"
                },
                "type": "array",
                "x-stainless-extend-default": true,
                "x-stainless-param": "betas"
              }
            }
          },
          {
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
            "in": "header",
            "name": "anthropic-version",
            "required": false,
            "schema": {
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version",
              "type": "string"
            }
          },
          {
            "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
            "in": "header",
            "name": "x-api-key",
            "required": false,
            "schema": {
              "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
              "title": "X-Api-Key",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileMetadataSchema"
                }
              }
            },
            "description": "Successful Response"
          },
          "4XX": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          }
        },
        "summary": "Get File Metadata"
      }
    },
    "/v1/files/{file_id}/content": {
      "get": {
        "operationId": "download_file_v1_files__file_id__content_get",
        "parameters": [
          {
            "description": "ID of the File.",
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "description": "ID of the File.",
              "title": "File Id",
              "type": "string"
            }
          },
          {
            "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
            "in": "header",
            "name": "anthropic-beta",
            "required": false,
            "schema": {
              "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
              "items": {
                "type": "string"
              },
              "title": "Anthropic-Beta",
              "type": "string",
              "x-stainless-override-schema": {
                "description": "Optional header to specify the beta version(s) you want to use.",
                "items": {
                  "$ref": "#/components/schemas/AnthropicBeta"
                },
                "type": "array",
                "x-stainless-extend-default": true,
                "x-stainless-param": "betas"
              }
            }
          },
          {
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
            "in": "header",
            "name": "anthropic-version",
            "required": false,
            "schema": {
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version",
              "type": "string"
            }
          },
          {
            "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
            "in": "header",
            "name": "x-api-key",
            "required": false,
            "schema": {
              "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
              "title": "X-Api-Key",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successful Response"
          },
          "4XX": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          }
        },
        "summary": "Download File"
      }
    },
    "/v1/files/{file_id}/content?beta=true": {
      "get": {
        "operationId": "beta_download_file_v1_files__file_id__content_get",
        "parameters": [
          {
            "description": "ID of the File.",
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "description": "ID of the File.",
              "title": "File Id",
              "type": "string"
            }
          },
          {
            "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
            "in": "header",
            "name": "anthropic-beta",
            "required": false,
            "schema": {
              "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
              "items": {
                "type": "string"
              },
              "title": "Anthropic-Beta",
              "type": "string",
              "x-stainless-override-schema": {
                "description": "Optional header to specify the beta version(s) you want to use.",
                "items": {
                  "$ref": "#/components/schemas/AnthropicBeta"
                },
                "type": "array",
                "x-stainless-extend-default": true,
                "x-stainless-param": "betas"
              }
            }
          },
          {
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
            "in": "header",
            "name": "anthropic-version",
            "required": false,
            "schema": {
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version",
              "type": "string"
            }
          },
          {
            "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
            "in": "header",
            "name": "x-api-key",
            "required": false,
            "schema": {
              "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
              "title": "X-Api-Key",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successful Response"
          },
          "4XX": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/BetaErrorResponse"
                }
              }
            },
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          }
        },
        "summary": "Download File"
      }
    },
    "/v1/files/{file_id}?beta=true": {
      "delete": {
        "operationId": "beta_delete_file_v1_files__file_id__delete",
        "parameters": [
          {
            "description": "ID of the File.",
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "description": "ID of the File.",
              "title": "File Id",
              "type": "string"
            }
          },
          {
            "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
            "in": "header",
            "name": "anthropic-beta",
            "required": false,
            "schema": {
              "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
              "items": {
                "type": "string"
              },
              "title": "Anthropic-Beta",
              "type": "string",
              "x-stainless-override-schema": {
                "description": "Optional header to specify the beta version(s) you want to use.",
                "items": {
                  "$ref": "#/components/schemas/AnthropicBeta"
                },
                "type": "array",
                "x-stainless-extend-default": true,
                "x-stainless-param": "betas"
              }
            }
          },
          {
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
            "in": "header",
            "name": "anthropic-version",
            "required": false,
            "schema": {
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version",
              "type": "string"
            }
          },
          {
            "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
            "in": "header",
            "name": "x-api-key",
            "required": false,
            "schema": {
              "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
              "title": "X-Api-Key",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BetaFileDeleteResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "4XX": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BetaErrorResponse"
                }
              }
            },
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          }
        },
        "summary": "Delete File"
      },
      "get": {
        "operationId": "beta_get_file_metadata_v1_files__file_id__get",
        "parameters": [
          {
            "description": "ID of the File.",
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "description": "ID of the File.",
              "title": "File Id",
              "type": "string"
            }
          },
          {
            "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
            "in": "header",
            "name": "anthropic-beta",
            "required": false,
            "schema": {
              "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
              "items": {
                "type": "string"
              },
              "title": "Anthropic-Beta",
              "type": "string",
              "x-stainless-override-schema": {
                "description": "Optional header to specify the beta version(s) you want to use.",
                "items": {
                  "$ref": "#/components/schemas/AnthropicBeta"
                },
                "type": "array",
                "x-stainless-extend-default": true,
                "x-stainless-param": "betas"
              }
            }
          },
          {
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
            "in": "header",
            "name": "anthropic-version",
            "required": false,
            "schema": {
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version",
              "type": "string"
            }
          },
          {
            "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
            "in": "header",
            "name": "x-api-key",
            "required": false,
            "schema": {
              "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
              "title": "X-Api-Key",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BetaFileMetadataSchema"
                }
              }
            },
            "description": "Successful Response"
          },
          "4XX": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BetaErrorResponse"
                }
              }
            },
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          }
        },
        "summary": "Get File Metadata"
      }
    },
    "/v1/files?beta=true": {
      "get": {
        "operationId": "beta_list_files_v1_files_get",
        "parameters": [
          {
            "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately before this object.",
            "in": "query",
            "name": "before_id",
            "required": false,
            "schema": {
              "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately before this object.",
              "title": "Before Id",
              "type": "string"
            }
          },
          {
            "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately after this object.",
            "in": "query",
            "name": "after_id",
            "required": false,
            "schema": {
              "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately after this object.",
              "title": "After Id",
              "type": "string"
            }
          },
          {
            "description": "Number of items to return per page.\n\nDefaults to `20`. Ranges from `1` to `1000`.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 20,
              "description": "Number of items to return per page.\n\nDefaults to `20`. Ranges from `1` to `1000`.",
              "maximum": 1000,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            }
          },
          {
            "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
            "in": "header",
            "name": "anthropic-beta",
            "required": false,
            "schema": {
              "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
              "items": {
                "type": "string"
              },
              "title": "Anthropic-Beta",
              "type": "string",
              "x-stainless-override-schema": {
                "description": "Optional header to specify the beta version(s) you want to use.",
                "items": {
                  "$ref": "#/components/schemas/AnthropicBeta"
                },
                "type": "array",
                "x-stainless-extend-default": true,
                "x-stainless-param": "betas"
              }
            }
          },
          {
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
            "in": "header",
            "name": "anthropic-version",
            "required": false,
            "schema": {
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version",
              "type": "string"
            }
          },
          {
            "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
            "in": "header",
            "name": "x-api-key",
            "required": false,
            "schema": {
              "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
              "title": "X-Api-Key",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BetaFileListResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "4XX": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BetaErrorResponse"
                }
              }
            },
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          }
        },
        "summary": "List Files"
      },
      "post": {
        "operationId": "beta_upload_file_v1_files_post",
        "parameters": [
          {
            "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
            "in": "header",
            "name": "anthropic-beta",
            "required": false,
            "schema": {
              "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
              "items": {
                "type": "string"
              },
              "title": "Anthropic-Beta",
              "type": "string",
              "x-stainless-override-schema": {
                "description": "Optional header to specify the beta version(s) you want to use.",
                "items": {
                  "$ref": "#/components/schemas/AnthropicBeta"
                },
                "type": "array",
                "x-stainless-extend-default": true,
                "x-stainless-param": "betas"
              }
            }
          },
          {
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
            "in": "header",
            "name": "anthropic-version",
            "required": false,
            "schema": {
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "description": "The file to upload",
                    "format": "binary",
                    "type": "string"
                  }
                },
                "required": ["file"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BetaFileMetadataSchema"
                }
              }
            },
            "description": "Successful Response"
          },
          "4XX": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BetaErrorResponse"
                }
              }
            },
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          }
        },
        "summary": "Upload File"
      }
    },
    "/v1/messages": {
      "post": {
        "description": "Send a structured list of input messages with text and/or image content, and the model will generate the next message in the conversation.\n\nThe Messages API can be used for either single queries or stateless multi-turn conversations.\n\nLearn more about the Messages API in our [user guide](/en/docs/initial-setup)",
        "operationId": "messages_post",
        "parameters": [
          {
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
            "in": "header",
            "name": "anthropic-version",
            "required": false,
            "schema": {
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessageParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Message object."
          },
          "4XX": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          }
        },
        "summary": "Create a Message"
      }
    },
    "/v1/messages/batches": {
      "get": {
        "description": "List all Message Batches within a Workspace. Most recently created batches are returned first.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)",
        "operationId": "message_batches_list",
        "parameters": [
          {
            "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately before this object.",
            "in": "query",
            "name": "before_id",
            "required": false,
            "schema": {
              "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately before this object.",
              "title": "Before Id",
              "type": "string"
            }
          },
          {
            "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately after this object.",
            "in": "query",
            "name": "after_id",
            "required": false,
            "schema": {
              "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately after this object.",
              "title": "After Id",
              "type": "string"
            }
          },
          {
            "description": "Number of items to return per page.\n\nDefaults to `20`. Ranges from `1` to `1000`.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 20,
              "description": "Number of items to return per page.\n\nDefaults to `20`. Ranges from `1` to `1000`.",
              "maximum": 1000,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            }
          },
          {
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
            "in": "header",
            "name": "anthropic-version",
            "required": false,
            "schema": {
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version",
              "type": "string"
            }
          },
          {
            "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
            "in": "header",
            "name": "x-api-key",
            "required": false,
            "schema": {
              "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
              "title": "X-Api-Key",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_MessageBatch_"
                }
              }
            },
            "description": "Successful Response"
          },
          "4XX": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          }
        },
        "summary": "List Message Batches"
      },
      "post": {
        "description": "Send a batch of Message creation requests.\n\nThe Message Batches API can be used to process multiple Messages API requests at once. Once a Message Batch is created, it begins processing immediately. Batches can take up to 24 hours to complete.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)",
        "operationId": "message_batches_post",
        "parameters": [
          {
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
            "in": "header",
            "name": "anthropic-version",
            "required": false,
            "schema": {
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessageBatchParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageBatch"
                }
              }
            },
            "description": "Successful Response"
          },
          "4XX": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          }
        },
        "summary": "Create a Message Batch"
      }
    },
    "/v1/messages/batches/{message_batch_id}": {
      "delete": {
        "description": "Delete a Message Batch.\n\nMessage Batches can only be deleted once they've finished processing. If you'd like to delete an in-progress batch, you must first cancel it.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)",
        "operationId": "message_batches_delete",
        "parameters": [
          {
            "description": "ID of the Message Batch.",
            "in": "path",
            "name": "message_batch_id",
            "required": true,
            "schema": {
              "description": "ID of the Message Batch.",
              "title": "Message Batch Id",
              "type": "string"
            }
          },
          {
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
            "in": "header",
            "name": "anthropic-version",
            "required": false,
            "schema": {
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version",
              "type": "string"
            }
          },
          {
            "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
            "in": "header",
            "name": "x-api-key",
            "required": false,
            "schema": {
              "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
              "title": "X-Api-Key",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteMessageBatchResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "4XX": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          }
        },
        "summary": "Delete a Message Batch"
      },
      "get": {
        "description": "This endpoint is idempotent and can be used to poll for Message Batch completion. To access the results of a Message Batch, make a request to the `results_url` field in the response.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)",
        "operationId": "message_batches_retrieve",
        "parameters": [
          {
            "description": "ID of the Message Batch.",
            "in": "path",
            "name": "message_batch_id",
            "required": true,
            "schema": {
              "description": "ID of the Message Batch.",
              "title": "Message Batch Id",
              "type": "string"
            }
          },
          {
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
            "in": "header",
            "name": "anthropic-version",
            "required": false,
            "schema": {
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version",
              "type": "string"
            }
          },
          {
            "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
            "in": "header",
            "name": "x-api-key",
            "required": false,
            "schema": {
              "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
              "title": "X-Api-Key",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageBatch"
                }
              }
            },
            "description": "Successful Response"
          },
          "4XX": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          }
        },
        "summary": "Retrieve a Message Batch"
      }
    },
    "/v1/messages/batches/{message_batch_id}/cancel": {
      "post": {
        "description": "Batches may be canceled any time before processing ends. Once cancellation is initiated, the batch enters a `canceling` state, at which time the system may complete any in-progress, non-interruptible requests before finalizing cancellation.\n\nThe number of canceled requests is specified in `request_counts`. To determine which requests were canceled, check the individual results within the batch. Note that cancellation may not result in any canceled requests if they were non-interruptible.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)",
        "operationId": "message_batches_cancel",
        "parameters": [
          {
            "description": "ID of the Message Batch.",
            "in": "path",
            "name": "message_batch_id",
            "required": true,
            "schema": {
              "description": "ID of the Message Batch.",
              "title": "Message Batch Id",
              "type": "string"
            }
          },
          {
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
            "in": "header",
            "name": "anthropic-version",
            "required": false,
            "schema": {
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageBatch"
                }
              }
            },
            "description": "Successful Response"
          },
          "4XX": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          }
        },
        "summary": "Cancel a Message Batch"
      }
    },
    "/v1/messages/batches/{message_batch_id}/cancel?beta=true": {
      "post": {
        "description": "Batches may be canceled any time before processing ends. Once cancellation is initiated, the batch enters a `canceling` state, at which time the system may complete any in-progress, non-interruptible requests before finalizing cancellation.\n\nThe number of canceled requests is specified in `request_counts`. To determine which requests were canceled, check the individual results within the batch. Note that cancellation may not result in any canceled requests if they were non-interruptible.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)",
        "operationId": "beta_message_batches_cancel",
        "parameters": [
          {
            "description": "ID of the Message Batch.",
            "in": "path",
            "name": "message_batch_id",
            "required": true,
            "schema": {
              "description": "ID of the Message Batch.",
              "title": "Message Batch Id",
              "type": "string"
            }
          },
          {
            "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
            "in": "header",
            "name": "anthropic-beta",
            "required": false,
            "schema": {
              "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
              "items": {
                "type": "string"
              },
              "title": "Anthropic-Beta",
              "type": "string",
              "x-stainless-override-schema": {
                "description": "Optional header to specify the beta version(s) you want to use.",
                "items": {
                  "$ref": "#/components/schemas/AnthropicBeta"
                },
                "type": "array",
                "x-stainless-extend-default": true,
                "x-stainless-param": "betas"
              }
            }
          },
          {
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
            "in": "header",
            "name": "anthropic-version",
            "required": false,
            "schema": {
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BetaMessageBatch"
                }
              }
            },
            "description": "Successful Response"
          },
          "4XX": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BetaErrorResponse"
                }
              }
            },
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          }
        },
        "summary": "Cancel a Message Batch"
      }
    },
    "/v1/messages/batches/{message_batch_id}/results": {
      "get": {
        "description": "Streams the results of a Message Batch as a `.jsonl` file.\n\nEach line in the file is a JSON object containing the result of a single request in the Message Batch. Results are not guaranteed to be in the same order as requests. Use the `custom_id` field to match results to requests.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)",
        "operationId": "message_batches_results",
        "parameters": [
          {
            "description": "ID of the Message Batch.",
            "in": "path",
            "name": "message_batch_id",
            "required": true,
            "schema": {
              "description": "ID of the Message Batch.",
              "title": "Message Batch Id",
              "type": "string"
            }
          },
          {
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
            "in": "header",
            "name": "anthropic-version",
            "required": false,
            "schema": {
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version",
              "type": "string"
            }
          },
          {
            "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
            "in": "header",
            "name": "x-api-key",
            "required": false,
            "schema": {
              "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
              "title": "X-Api-Key",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/x-jsonl": {
                "schema": {
                  "$ref": "#/components/schemas/MessageBatchIndividualResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "4XX": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          }
        },
        "summary": "Retrieve Message Batch results"
      }
    },
    "/v1/messages/batches/{message_batch_id}/results?beta=true": {
      "get": {
        "description": "Streams the results of a Message Batch as a `.jsonl` file.\n\nEach line in the file is a JSON object containing the result of a single request in the Message Batch. Results are not guaranteed to be in the same order as requests. Use the `custom_id` field to match results to requests.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)",
        "operationId": "beta_message_batches_results",
        "parameters": [
          {
            "description": "ID of the Message Batch.",
            "in": "path",
            "name": "message_batch_id",
            "required": true,
            "schema": {
              "description": "ID of the Message Batch.",
              "title": "Message Batch Id",
              "type": "string"
            }
          },
          {
            "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
            "in": "header",
            "name": "anthropic-beta",
            "required": false,
            "schema": {
              "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
              "items": {
                "type": "string"
              },
              "title": "Anthropic-Beta",
              "type": "string",
              "x-stainless-override-schema": {
                "description": "Optional header to specify the beta version(s) you want to use.",
                "items": {
                  "$ref": "#/components/schemas/AnthropicBeta"
                },
                "type": "array",
                "x-stainless-extend-default": true,
                "x-stainless-param": "betas"
              }
            }
          },
          {
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
            "in": "header",
            "name": "anthropic-version",
            "required": false,
            "schema": {
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version",
              "type": "string"
            }
          },
          {
            "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
            "in": "header",
            "name": "x-api-key",
            "required": false,
            "schema": {
              "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
              "title": "X-Api-Key",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/x-jsonl": {
                "schema": {
                  "$ref": "#/components/schemas/BetaMessageBatchIndividualResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "4XX": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BetaErrorResponse"
                }
              }
            },
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          }
        },
        "summary": "Retrieve Message Batch results"
      }
    },
    "/v1/messages/batches/{message_batch_id}?beta=true": {
      "delete": {
        "description": "Delete a Message Batch.\n\nMessage Batches can only be deleted once they've finished processing. If you'd like to delete an in-progress batch, you must first cancel it.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)",
        "operationId": "beta_message_batches_delete",
        "parameters": [
          {
            "description": "ID of the Message Batch.",
            "in": "path",
            "name": "message_batch_id",
            "required": true,
            "schema": {
              "description": "ID of the Message Batch.",
              "title": "Message Batch Id",
              "type": "string"
            }
          },
          {
            "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
            "in": "header",
            "name": "anthropic-beta",
            "required": false,
            "schema": {
              "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
              "items": {
                "type": "string"
              },
              "title": "Anthropic-Beta",
              "type": "string",
              "x-stainless-override-schema": {
                "description": "Optional header to specify the beta version(s) you want to use.",
                "items": {
                  "$ref": "#/components/schemas/AnthropicBeta"
                },
                "type": "array",
                "x-stainless-extend-default": true,
                "x-stainless-param": "betas"
              }
            }
          },
          {
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
            "in": "header",
            "name": "anthropic-version",
            "required": false,
            "schema": {
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version",
              "type": "string"
            }
          },
          {
            "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
            "in": "header",
            "name": "x-api-key",
            "required": false,
            "schema": {
              "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
              "title": "X-Api-Key",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BetaDeleteMessageBatchResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "4XX": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BetaErrorResponse"
                }
              }
            },
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          }
        },
        "summary": "Delete a Message Batch"
      },
      "get": {
        "description": "This endpoint is idempotent and can be used to poll for Message Batch completion. To access the results of a Message Batch, make a request to the `results_url` field in the response.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)",
        "operationId": "beta_message_batches_retrieve",
        "parameters": [
          {
            "description": "ID of the Message Batch.",
            "in": "path",
            "name": "message_batch_id",
            "required": true,
            "schema": {
              "description": "ID of the Message Batch.",
              "title": "Message Batch Id",
              "type": "string"
            }
          },
          {
            "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
            "in": "header",
            "name": "anthropic-beta",
            "required": false,
            "schema": {
              "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
              "items": {
                "type": "string"
              },
              "title": "Anthropic-Beta",
              "type": "string",
              "x-stainless-override-schema": {
                "description": "Optional header to specify the beta version(s) you want to use.",
                "items": {
                  "$ref": "#/components/schemas/AnthropicBeta"
                },
                "type": "array",
                "x-stainless-extend-default": true,
                "x-stainless-param": "betas"
              }
            }
          },
          {
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
            "in": "header",
            "name": "anthropic-version",
            "required": false,
            "schema": {
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version",
              "type": "string"
            }
          },
          {
            "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
            "in": "header",
            "name": "x-api-key",
            "required": false,
            "schema": {
              "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
              "title": "X-Api-Key",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BetaMessageBatch"
                }
              }
            },
            "description": "Successful Response"
          },
          "4XX": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BetaErrorResponse"
                }
              }
            },
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          }
        },
        "summary": "Retrieve a Message Batch"
      }
    },
    "/v1/messages/batches?beta=true": {
      "get": {
        "description": "List all Message Batches within a Workspace. Most recently created batches are returned first.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)",
        "operationId": "beta_message_batches_list",
        "parameters": [
          {
            "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately before this object.",
            "in": "query",
            "name": "before_id",
            "required": false,
            "schema": {
              "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately before this object.",
              "title": "Before Id",
              "type": "string"
            }
          },
          {
            "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately after this object.",
            "in": "query",
            "name": "after_id",
            "required": false,
            "schema": {
              "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately after this object.",
              "title": "After Id",
              "type": "string"
            }
          },
          {
            "description": "Number of items to return per page.\n\nDefaults to `20`. Ranges from `1` to `1000`.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 20,
              "description": "Number of items to return per page.\n\nDefaults to `20`. Ranges from `1` to `1000`.",
              "maximum": 1000,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            }
          },
          {
            "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
            "in": "header",
            "name": "anthropic-beta",
            "required": false,
            "schema": {
              "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
              "items": {
                "type": "string"
              },
              "title": "Anthropic-Beta",
              "type": "string",
              "x-stainless-override-schema": {
                "description": "Optional header to specify the beta version(s) you want to use.",
                "items": {
                  "$ref": "#/components/schemas/AnthropicBeta"
                },
                "type": "array",
                "x-stainless-extend-default": true,
                "x-stainless-param": "betas"
              }
            }
          },
          {
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
            "in": "header",
            "name": "anthropic-version",
            "required": false,
            "schema": {
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version",
              "type": "string"
            }
          },
          {
            "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
            "in": "header",
            "name": "x-api-key",
            "required": false,
            "schema": {
              "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
              "title": "X-Api-Key",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BetaListResponse_MessageBatch_"
                }
              }
            },
            "description": "Successful Response"
          },
          "4XX": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BetaErrorResponse"
                }
              }
            },
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          }
        },
        "summary": "List Message Batches"
      },
      "post": {
        "description": "Send a batch of Message creation requests.\n\nThe Message Batches API can be used to process multiple Messages API requests at once. Once a Message Batch is created, it begins processing immediately. Batches can take up to 24 hours to complete.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)",
        "operationId": "beta_message_batches_post",
        "parameters": [
          {
            "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
            "in": "header",
            "name": "anthropic-beta",
            "required": false,
            "schema": {
              "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
              "items": {
                "type": "string"
              },
              "title": "Anthropic-Beta",
              "type": "string",
              "x-stainless-override-schema": {
                "description": "Optional header to specify the beta version(s) you want to use.",
                "items": {
                  "$ref": "#/components/schemas/AnthropicBeta"
                },
                "type": "array",
                "x-stainless-extend-default": true,
                "x-stainless-param": "betas"
              }
            }
          },
          {
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
            "in": "header",
            "name": "anthropic-version",
            "required": false,
            "schema": {
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BetaCreateMessageBatchParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BetaMessageBatch"
                }
              }
            },
            "description": "Successful Response"
          },
          "4XX": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BetaErrorResponse"
                }
              }
            },
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          }
        },
        "summary": "Create a Message Batch"
      }
    },
    "/v1/messages/count_tokens": {
      "post": {
        "description": "Count the number of tokens in a Message.\n\nThe Token Count API can be used to count the number of tokens in a Message, including tools, images, and documents, without creating it.\n\nLearn more about token counting in our [user guide](/en/docs/build-with-claude/token-counting)",
        "operationId": "messages_count_tokens_post",
        "parameters": [
          {
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
            "in": "header",
            "name": "anthropic-version",
            "required": false,
            "schema": {
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CountMessageTokensParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountMessageTokensResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "4XX": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          }
        },
        "summary": "Count tokens in a Message"
      }
    },
    "/v1/messages/count_tokens?beta=true": {
      "post": {
        "description": "Count the number of tokens in a Message.\n\nThe Token Count API can be used to count the number of tokens in a Message, including tools, images, and documents, without creating it.\n\nLearn more about token counting in our [user guide](/en/docs/build-with-claude/token-counting)",
        "operationId": "beta_messages_count_tokens_post",
        "parameters": [
          {
            "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
            "in": "header",
            "name": "anthropic-beta",
            "required": false,
            "schema": {
              "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
              "items": {
                "type": "string"
              },
              "title": "Anthropic-Beta",
              "type": "string",
              "x-stainless-override-schema": {
                "description": "Optional header to specify the beta version(s) you want to use.",
                "items": {
                  "$ref": "#/components/schemas/AnthropicBeta"
                },
                "type": "array",
                "x-stainless-extend-default": true,
                "x-stainless-param": "betas"
              }
            }
          },
          {
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
            "in": "header",
            "name": "anthropic-version",
            "required": false,
            "schema": {
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BetaCountMessageTokensParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BetaCountMessageTokensResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "4XX": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BetaErrorResponse"
                }
              }
            },
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          }
        },
        "summary": "Count tokens in a Message"
      }
    },
    "/v1/messages?beta=true": {
      "post": {
        "description": "Send a structured list of input messages with text and/or image content, and the model will generate the next message in the conversation.\n\nThe Messages API can be used for either single queries or stateless multi-turn conversations.\n\nLearn more about the Messages API in our [user guide](/en/docs/initial-setup)",
        "operationId": "beta_messages_post",
        "parameters": [
          {
            "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
            "in": "header",
            "name": "anthropic-beta",
            "required": false,
            "schema": {
              "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
              "items": {
                "type": "string"
              },
              "title": "Anthropic-Beta",
              "type": "string",
              "x-stainless-override-schema": {
                "description": "Optional header to specify the beta version(s) you want to use.",
                "items": {
                  "$ref": "#/components/schemas/AnthropicBeta"
                },
                "type": "array",
                "x-stainless-extend-default": true,
                "x-stainless-param": "betas"
              }
            }
          },
          {
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
            "in": "header",
            "name": "anthropic-version",
            "required": false,
            "schema": {
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BetaCreateMessageParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BetaMessage"
                }
              }
            },
            "description": "Message object."
          },
          "4XX": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BetaErrorResponse"
                }
              }
            },
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          }
        },
        "summary": "Create a Message"
      }
    },
    "/v1/models": {
      "get": {
        "description": "List available models.\n\nThe Models API response can be used to determine which models are available for use in the API. More recently released models are listed first.",
        "operationId": "models_list",
        "parameters": [
          {
            "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately before this object.",
            "in": "query",
            "name": "before_id",
            "required": false,
            "schema": {
              "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately before this object.",
              "title": "Before Id",
              "type": "string"
            }
          },
          {
            "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately after this object.",
            "in": "query",
            "name": "after_id",
            "required": false,
            "schema": {
              "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately after this object.",
              "title": "After Id",
              "type": "string"
            }
          },
          {
            "description": "Number of items to return per page.\n\nDefaults to `20`. Ranges from `1` to `1000`.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 20,
              "description": "Number of items to return per page.\n\nDefaults to `20`. Ranges from `1` to `1000`.",
              "maximum": 1000,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            }
          },
          {
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
            "in": "header",
            "name": "anthropic-version",
            "required": false,
            "schema": {
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version",
              "type": "string"
            }
          },
          {
            "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
            "in": "header",
            "name": "x-api-key",
            "required": false,
            "schema": {
              "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
              "title": "X-Api-Key",
              "type": "string"
            }
          },
          {
            "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
            "in": "header",
            "name": "anthropic-beta",
            "required": false,
            "schema": {
              "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
              "items": {
                "type": "string"
              },
              "title": "Anthropic-Beta",
              "type": "string",
              "x-stainless-override-schema": {
                "description": "Optional header to specify the beta version(s) you want to use.",
                "items": {
                  "$ref": "#/components/schemas/AnthropicBeta"
                },
                "type": "array",
                "x-stainless-extend-default": true,
                "x-stainless-param": "betas"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_ModelInfo_"
                }
              }
            },
            "description": "Successful Response"
          },
          "4XX": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          }
        },
        "summary": "List Models"
      }
    },
    "/v1/models/{model_id}": {
      "get": {
        "description": "Get a specific model.\n\nThe Models API response can be used to determine information about a specific model or resolve a model alias to a model ID.",
        "operationId": "models_get",
        "parameters": [
          {
            "description": "Model identifier or alias.",
            "in": "path",
            "name": "model_id",
            "required": true,
            "schema": {
              "description": "Model identifier or alias.",
              "title": "Model Id",
              "type": "string"
            }
          },
          {
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
            "in": "header",
            "name": "anthropic-version",
            "required": false,
            "schema": {
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version",
              "type": "string"
            }
          },
          {
            "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
            "in": "header",
            "name": "x-api-key",
            "required": false,
            "schema": {
              "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
              "title": "X-Api-Key",
              "type": "string"
            }
          },
          {
            "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
            "in": "header",
            "name": "anthropic-beta",
            "required": false,
            "schema": {
              "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
              "items": {
                "type": "string"
              },
              "title": "Anthropic-Beta",
              "type": "string",
              "x-stainless-override-schema": {
                "description": "Optional header to specify the beta version(s) you want to use.",
                "items": {
                  "$ref": "#/components/schemas/AnthropicBeta"
                },
                "type": "array",
                "x-stainless-extend-default": true,
                "x-stainless-param": "betas"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelInfo"
                }
              }
            },
            "description": "Successful Response"
          },
          "4XX": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          }
        },
        "summary": "Get a Model"
      }
    },
    "/v1/models/{model_id}?beta=true": {
      "get": {
        "description": "Get a specific model.\n\nThe Models API response can be used to determine information about a specific model or resolve a model alias to a model ID.",
        "operationId": "beta_models_get",
        "parameters": [
          {
            "description": "Model identifier or alias.",
            "in": "path",
            "name": "model_id",
            "required": true,
            "schema": {
              "description": "Model identifier or alias.",
              "title": "Model Id",
              "type": "string"
            }
          },
          {
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
            "in": "header",
            "name": "anthropic-version",
            "required": false,
            "schema": {
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version",
              "type": "string"
            }
          },
          {
            "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
            "in": "header",
            "name": "x-api-key",
            "required": false,
            "schema": {
              "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
              "title": "X-Api-Key",
              "type": "string"
            }
          },
          {
            "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
            "in": "header",
            "name": "anthropic-beta",
            "required": false,
            "schema": {
              "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
              "items": {
                "type": "string"
              },
              "title": "Anthropic-Beta",
              "type": "string",
              "x-stainless-override-schema": {
                "description": "Optional header to specify the beta version(s) you want to use.",
                "items": {
                  "$ref": "#/components/schemas/AnthropicBeta"
                },
                "type": "array",
                "x-stainless-extend-default": true,
                "x-stainless-param": "betas"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BetaModelInfo"
                }
              }
            },
            "description": "Successful Response"
          },
          "4XX": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BetaErrorResponse"
                }
              }
            },
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          }
        },
        "summary": "Get a Model"
      }
    },
    "/v1/models?beta=true": {
      "get": {
        "description": "List available models.\n\nThe Models API response can be used to determine which models are available for use in the API. More recently released models are listed first.",
        "operationId": "beta_models_list",
        "parameters": [
          {
            "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately before this object.",
            "in": "query",
            "name": "before_id",
            "required": false,
            "schema": {
              "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately before this object.",
              "title": "Before Id",
              "type": "string"
            }
          },
          {
            "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately after this object.",
            "in": "query",
            "name": "after_id",
            "required": false,
            "schema": {
              "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately after this object.",
              "title": "After Id",
              "type": "string"
            }
          },
          {
            "description": "Number of items to return per page.\n\nDefaults to `20`. Ranges from `1` to `1000`.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 20,
              "description": "Number of items to return per page.\n\nDefaults to `20`. Ranges from `1` to `1000`.",
              "maximum": 1000,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            }
          },
          {
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
            "in": "header",
            "name": "anthropic-version",
            "required": false,
            "schema": {
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version",
              "type": "string"
            }
          },
          {
            "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
            "in": "header",
            "name": "x-api-key",
            "required": false,
            "schema": {
              "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
              "title": "X-Api-Key",
              "type": "string"
            }
          },
          {
            "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
            "in": "header",
            "name": "anthropic-beta",
            "required": false,
            "schema": {
              "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
              "items": {
                "type": "string"
              },
              "title": "Anthropic-Beta",
              "type": "string",
              "x-stainless-override-schema": {
                "description": "Optional header to specify the beta version(s) you want to use.",
                "items": {
                  "$ref": "#/components/schemas/AnthropicBeta"
                },
                "type": "array",
                "x-stainless-extend-default": true,
                "x-stainless-param": "betas"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BetaListResponse_ModelInfo_"
                }
              }
            },
            "description": "Successful Response"
          },
          "4XX": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BetaErrorResponse"
                }
              }
            },
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          }
        },
        "summary": "List Models"
      }
    }
  },
  "servers": [
    {
      "url": "https://api.anthropic.com"
    }
  ]
}
