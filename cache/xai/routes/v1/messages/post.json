{
  "operationId": "handle_generic_messages_request",
  "requestBody": {
    "content": {
      "application/json": {
        "example": {
          "max_tokens": 32,
          "messages": [
            {
              "content": "Hello, world",
              "role": "user"
            }
          ],
          "model": "grok-4-0709"
        },
        "schema": {
          "description": "Request message for `/v1/messages`",
          "properties": {
            "max_tokens": {
              "description": "The maximum number of tokens to generate before stopping. The model may stop before the max_tokens when it reaches the stop sequence.",
              "format": "int32",
              "type": "integer"
            },
            "messages": {
              "description": "Input messages.",
              "items": {
                "description": "Anthropic compatible message body",
                "properties": {
                  "content": {
                    "description": "The content message.",
                    "oneOf": [
                      {
                        "description": "Text prompt.",
                        "type": "string"
                      },
                      {
                        "description": "An array of message content parts.",
                        "items": {
                          "oneOf": [
                            {
                              "description": "Text prompt message content part.",
                              "properties": {
                                "cache_control": {
                                  "description": "(Unsupported) Cache control."
                                },
                                "text": {
                                  "description": "Text prompt.",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "text"
                                  ],
                                  "type": "string"
                                }
                              },
                              "required": [
                                "text",
                                "type"
                              ],
                              "type": "object"
                            },
                            {
                              "description": "Image prompt message content part.",
                              "properties": {
                                "cache_control": {
                                  "description": "(Unsupported) Cache control."
                                },
                                "source": {
                                  "description": "Image source.",
                                  "oneOf": [
                                    {
                                      "properties": {
                                        "data": {
                                          "description": "Base64 encoded image string.",
                                          "type": "string"
                                        },
                                        "media_type": {
                                          "description": "Media type of the image source. Available options: `image/jpeg`, `image/png`, `image/webp`.",
                                          "type": "string"
                                        },
                                        "type": {
                                          "enum": [
                                            "base64"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "media_type",
                                        "data",
                                        "type"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "type": {
                                          "enum": [
                                            "url"
                                          ],
                                          "type": "string"
                                        },
                                        "url": {
                                          "description": "URL of the image.",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "url",
                                        "type"
                                      ],
                                      "type": "object"
                                    }
                                  ]
                                },
                                "type": {
                                  "enum": [
                                    "image"
                                  ],
                                  "type": "string"
                                }
                              },
                              "required": [
                                "source",
                                "type"
                              ],
                              "type": "object"
                            },
                            {
                              "description": "Tool call message content part. Received from model.",
                              "properties": {
                                "cache_control": {
                                  "description": "(Unsupported) Cache control."
                                },
                                "id": {
                                  "description": "ID of the tool call.",
                                  "type": "string"
                                },
                                "input": {
                                  "description": "Input for tool call."
                                },
                                "name": {
                                  "description": "Name of the tool call.",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "tool_use"
                                  ],
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id",
                                "name",
                                "input",
                                "type"
                              ],
                              "type": "object"
                            },
                            {
                              "description": "Tool call result.",
                              "properties": {
                                "cache_control": {
                                  "description": "(Unsupported) Cache control."
                                },
                                "content": {
                                  "description": "Result content of the tool call.",
                                  "type": "string"
                                },
                                "is_error": {
                                  "description": "Whether the tool call returns an error.",
                                  "type": [
                                    "boolean",
                                    "null"
                                  ]
                                },
                                "tool_use_id": {
                                  "description": "ID of the tool call given by the model.",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "tool_result"
                                  ],
                                  "type": "string"
                                }
                              },
                              "required": [
                                "tool_use_id",
                                "content",
                                "type"
                              ],
                              "type": "object"
                            },
                            {
                              "description": "(Redacted) Thinking of the model.",
                              "properties": {
                                "data": {
                                  "description": "Encrypted data of the redacted thinking.",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "redacted_thinking"
                                  ],
                                  "type": "string"
                                }
                              },
                              "required": [
                                "data",
                                "type"
                              ],
                              "type": "object"
                            },
                            {
                              "description": "Thinking of the model.",
                              "properties": {
                                "thinking": {
                                  "description": "Thinking.",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "thinking"
                                  ],
                                  "type": "string"
                                }
                              },
                              "required": [
                                "thinking",
                                "type"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "type": "array"
                      }
                    ]
                  },
                  "role": {
                    "description": "The role that the message belongs to, `\"system\"` for system prompt, `\"user\"` for user prompt, and `\"assistant\"` for response from the model.",
                    "type": "string"
                  }
                },
                "required": [
                  "role",
                  "content"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "metadata": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "description": "An object describing metadata about the request.",
                  "properties": {
                    "user_id": {
                      "description": "A unique identifier representing your end-user, which can help xAI to monitor and detect abuse.",
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "model": {
              "description": "Model name for the model to use.",
              "example": "grok-4-0709",
              "type": "string"
            },
            "stop_sequences": {
              "description": "(Not supported by reasoning models) Up to 4 sequences where the API will stop generating further tokens.",
              "items": {
                "type": "string"
              },
              "type": [
                "array",
                "null"
              ]
            },
            "stream": {
              "description": "If set, partial message deltas will be sent. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a `data: [DONE]` message.",
              "type": [
                "boolean",
                "null"
              ]
            },
            "system": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "description": "System prompt message for the model, defining how the model should behave to user messages.",
                  "oneOf": [
                    {
                      "description": "Text content of system prompt.",
                      "type": "string"
                    },
                    {
                      "description": "An array of system prompt parts.",
                      "items": {
                        "properties": {
                          "cache_control": {
                            "description": "(Unsupported) Cache control."
                          },
                          "text": {
                            "description": "System prompt text.",
                            "type": "string"
                          },
                          "type": {
                            "description": "Type of the object. This is always `\"text\"`.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "type",
                          "text"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  ]
                }
              ]
            },
            "temperature": {
              "default": 1,
              "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. It may not work well with reasoning models.",
              "format": "float",
              "maximum": 2,
              "minimum": 0,
              "type": [
                "number",
                "null"
              ]
            },
            "tool_choice": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "description": "Controls which (if any) tool is called by the model. `\"none\"` means the model will not call any tool and instead generates a message. `\"auto\"` means the model can pick between generating a message or calling one or more tools. `\"any\"` means the model must call one or more tools. Specifying a particular tool via `{\"type\": \"tool\", \"function\": {\"name\": \"get_weather\"}}` forces the model to call that tool. `\"none\"` is the default when no tools are provided. `\"auto\"` is the default if tools are provided.",
                  "oneOf": [
                    {
                      "description": "Allows the model to automatically decide whether to call the tool",
                      "properties": {
                        "type": {
                          "enum": [
                            "auto"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    {
                      "description": "Forces the model to use at least one tool, without specifying the tool.",
                      "properties": {
                        "type": {
                          "enum": [
                            "any"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    {
                      "description": "Forces the model to use the named tool",
                      "properties": {
                        "name": {
                          "description": "Name of the tool to use.",
                          "type": "string"
                        },
                        "type": {
                          "enum": [
                            "tool"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "type"
                      ],
                      "type": "object"
                    }
                  ]
                }
              ]
            },
            "tools": {
              "description": "A list of tools the model may call in JSON-schema. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.",
              "items": {
                "properties": {
                  "cache_control": {
                    "description": "(Unsupported) Cache control."
                  },
                  "description": {
                    "description": "Description of the tool.",
                    "type": "string"
                  },
                  "input_schema": {
                    "description": "Input schema allowed by the tool.",
                    "properties": {
                      "properties": {
                        "description": "JSON-object of the tool input schema."
                      },
                      "required": {
                        "description": "Required properties of the tool input schema, if any.",
                        "items": {
                          "type": "string"
                        },
                        "type": [
                          "array",
                          "null"
                        ]
                      },
                      "type": {
                        "description": "Type of the schema. This is always `\"object\"`.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "properties"
                    ],
                    "type": "object"
                  },
                  "name": {
                    "description": "Name of the tool.",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "description",
                  "input_schema"
                ],
                "type": "object"
              },
              "type": [
                "array",
                "null"
              ]
            },
            "top_k": {
              "description": "(Unsupported) When generating next tokens, randomly selecting the next token from the k most likely options.",
              "format": "int32",
              "type": [
                "integer",
                "null"
              ]
            },
            "top_p": {
              "default": 1,
              "description": "An alternative to sampling with `temperature`, called nucleus sampling, where the model considers the results of the tokens with `top_p` probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. It is generally recommended to alter this or `temperature` but not both.",
              "exclusiveMinimum": 0,
              "format": "float",
              "maximum": 1,
              "type": [
                "number",
                "null"
              ]
            }
          },
          "type": "object"
        }
      }
    },
    "required": true
  },
  "responses": {
    "200": {
      "content": {
        "application/json": {
          "example": {
            "content": [
              {
                "text": "Hello there! \"Hello, world\" is a classic, isn't it? Whether you're just saying hi or channeling your inner coder, I'm happy to greet you back",
                "type": "text"
              }
            ],
            "id": "4f224bfb-9d53-4c82-b40a-b7cd80831ec2",
            "model": "grok-4-0709",
            "role": "assistant",
            "stop_reason": "max_tokens",
            "stop_sequence": null,
            "type": "message",
            "usage": {
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "input_tokens": 9,
              "output_tokens": 32
            }
          },
          "schema": {
            "description": "Response message for `/v1/messages`",
            "properties": {
              "content": {
                "description": "Response message content.",
                "items": {
                  "oneOf": [
                    {
                      "description": "Text response from the model.",
                      "properties": {
                        "text": {
                          "type": "string"
                        },
                        "type": {
                          "enum": [
                            "text"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "text",
                        "type"
                      ],
                      "type": "object"
                    },
                    {
                      "description": "Thinking response for the model",
                      "properties": {
                        "signature": {
                          "description": "Signature of the content",
                          "type": "string"
                        },
                        "thinking": {
                          "description": "Thinking content",
                          "type": "string"
                        },
                        "type": {
                          "enum": [
                            "thinking"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "signature",
                        "thinking",
                        "type"
                      ],
                      "type": "object"
                    },
                    {
                      "description": "Redacted thinking response for the model",
                      "properties": {
                        "data": {
                          "description": "Signature of the content",
                          "type": "string"
                        },
                        "type": {
                          "enum": [
                            "redacted_thinking"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "data",
                        "type"
                      ],
                      "type": "object"
                    },
                    {
                      "description": "Request by the model to invoke a tool call.",
                      "properties": {
                        "id": {
                          "description": "Tool call ID.",
                          "type": "string"
                        },
                        "input": {
                          "description": "Input to the tool call follwing the `input_schema`."
                        },
                        "name": {
                          "description": "Name of the tool call to be used.",
                          "type": "string"
                        },
                        "type": {
                          "enum": [
                            "tool_use"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "id",
                        "name",
                        "input",
                        "type"
                      ],
                      "type": "object"
                    }
                  ]
                },
                "type": "array"
              },
              "id": {
                "description": "Unique object identifier.",
                "type": "string"
              },
              "model": {
                "description": "Model name that handled the request.",
                "example": "grok-4-0709",
                "type": "string"
              },
              "role": {
                "description": "Role of the generated message. Always `\"assistant\"`",
                "type": "string"
              },
              "stop_reason": {
                "description": "Reason to stop. `\"stop_sequence\"` means the inference has reached a model-defined or user-supplied stop sequence in `stop`. `\"max_tokens\"` means the inference result has reached models' maximum allowed token length or user defined value in `max_tokens`. `\"end_turn\"` or `null` in streaming mode when the chunk is not the last. `\"tool_use\"` means the model has called a tool and is waiting for the tool response.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "stop_sequence": {
                "description": "Custom stop sequence used to stop the generation.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "type": {
                "description": "Object type. This is always `\"message\"` for message types.",
                "example": "message",
                "type": "string"
              },
              "usage": {
                "description": "Token usage information.",
                "properties": {
                  "cache_creation_input_tokens": {
                    "description": "(Unsupported) Number of tokens written to the cache when creating a new entry.",
                    "format": "int32",
                    "type": "integer"
                  },
                  "cache_read_input_tokens": {
                    "description": "Number of tokens retrieved from the cache for this request.",
                    "format": "int32",
                    "type": "integer"
                  },
                  "input_tokens": {
                    "description": "Number of input tokens used",
                    "format": "int32",
                    "type": "integer"
                  },
                  "output_tokens": {
                    "description": "Number of output tokens used",
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "required": [
                  "input_tokens",
                  "cache_creation_input_tokens",
                  "cache_read_input_tokens",
                  "output_tokens"
                ],
                "type": "object"
              }
            },
            "required": [
              "id",
              "type",
              "role",
              "content",
              "model",
              "usage"
            ],
            "type": "object"
          }
        }
      },
      "description": "Success"
    },
    "400": {
      "description": "Bad request. The request is invalid or an invalid API key is provided."
    },
    "422": {
      "description": "Unprocessable Entity. There are missing fields in the request body."
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "summary": "Create a messages response. This endpoint is compatible with the Anthropic API.",
  "tags": [
    "v1"
  ]
}
